/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((module) => {

!function(e,t){if(true)module.exports=t();else { var i, r; }}(self,(function(){return(()=>{"use strict";var e={373:(e,t,r)=>{r.r(t),r.d(t,{customAlphabet:()=>l,customRandom:()=>o,nanoid:()=>a,random:()=>n,urlAlphabet:()=>i});let i="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW",n=e=>crypto.getRandomValues(new Uint8Array(e)),o=(e,t,r)=>{let i=(2<<Math.log(e.length-1)/Math.LN2)-1,n=-~(1.6*i*t/e.length);return()=>{let o="";for(;;){let l=r(n),a=n;for(;a--;)if(o+=e[l[a]&i]||"",o.length===t)return o}}},l=(e,t)=>o(e,t,n),a=(e=21)=>{let t="",r=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let i=63&r[e];t+=i<36?i.toString(36):i<62?(i-26).toString(36).toUpperCase():i<63?"_":"-"}return t}},470:e=>{function t(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function r(e,t){for(var r,i="",n=0,o=-1,l=0,a=0;a<=e.length;++a){if(a<e.length)r=e.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(o===a-1||1===l);else if(o!==a-1&&2===l){if(i.length<2||2!==n||46!==i.charCodeAt(i.length-1)||46!==i.charCodeAt(i.length-2))if(i.length>2){var d=i.lastIndexOf("/");if(d!==i.length-1){-1===d?(i="",n=0):n=(i=i.slice(0,d)).length-1-i.lastIndexOf("/"),o=a,l=0;continue}}else if(2===i.length||1===i.length){i="",n=0,o=a,l=0;continue}t&&(i.length>0?i+="/..":i="..",n=2)}else i.length>0?i+="/"+e.slice(o+1,a):i=e.slice(o+1,a),n=a-o-1;o=a,l=0}else 46===r&&-1!==l?++l:l=-1}return i}var i={resolve:function(){for(var e,i="",n=!1,o=arguments.length-1;o>=-1&&!n;o--){var l;o>=0?l=arguments[o]:(void 0===e&&(e=process.cwd()),l=e),t(l),0!==l.length&&(i=l+"/"+i,n=47===l.charCodeAt(0))}return i=r(i,!n),n?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(t(e),0===e.length)return".";var i=47===e.charCodeAt(0),n=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!i)).length||i||(e="."),e.length>0&&n&&(e+="/"),i?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,r=0;r<arguments.length;++r){var n=arguments[r];t(n),n.length>0&&(void 0===e?e=n:e+="/"+n)}return void 0===e?".":i.normalize(e)},relative:function(e,r){if(t(e),t(r),e===r)return"";if((e=i.resolve(e))===(r=i.resolve(r)))return"";for(var n=1;n<e.length&&47===e.charCodeAt(n);++n);for(var o=e.length,l=o-n,a=1;a<r.length&&47===r.charCodeAt(a);++a);for(var d=r.length-a,c=l<d?l:d,u=-1,s=0;s<=c;++s){if(s===c){if(d>c){if(47===r.charCodeAt(a+s))return r.slice(a+s+1);if(0===s)return r.slice(a+s)}else l>c&&(47===e.charCodeAt(n+s)?u=s:0===s&&(u=0));break}var h=e.charCodeAt(n+s);if(h!==r.charCodeAt(a+s))break;47===h&&(u=s)}var f="";for(s=n+u+1;s<=o;++s)s!==o&&47!==e.charCodeAt(s)||(0===f.length?f+="..":f+="/..");return f.length>0?f+r.slice(a+u):(a+=u,47===r.charCodeAt(a)&&++a,r.slice(a))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var r=e.charCodeAt(0),i=47===r,n=-1,o=!0,l=e.length-1;l>=1;--l)if(47===(r=e.charCodeAt(l))){if(!o){n=l;break}}else o=!1;return-1===n?i?"/":".":i&&1===n?"//":e.slice(0,n)},basename:function(e,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');t(e);var i,n=0,o=-1,l=!0;if(void 0!==r&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return"";var a=r.length-1,d=-1;for(i=e.length-1;i>=0;--i){var c=e.charCodeAt(i);if(47===c){if(!l){n=i+1;break}}else-1===d&&(l=!1,d=i+1),a>=0&&(c===r.charCodeAt(a)?-1==--a&&(o=i):(a=-1,o=d))}return n===o?o=d:-1===o&&(o=e.length),e.slice(n,o)}for(i=e.length-1;i>=0;--i)if(47===e.charCodeAt(i)){if(!l){n=i+1;break}}else-1===o&&(l=!1,o=i+1);return-1===o?"":e.slice(n,o)},extname:function(e){t(e);for(var r=-1,i=0,n=-1,o=!0,l=0,a=e.length-1;a>=0;--a){var d=e.charCodeAt(a);if(47!==d)-1===n&&(o=!1,n=a+1),46===d?-1===r?r=a:1!==l&&(l=1):-1!==r&&(l=-1);else if(!o){i=a+1;break}}return-1===r||-1===n||0===l||1===l&&r===n-1&&r===i+1?"":e.slice(r,n)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,t){var r=t.dir||t.root,i=t.base||(t.name||"")+(t.ext||"");return r?r===t.root?r+i:r+"/"+i:i}(0,e)},parse:function(e){t(e);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return r;var i,n=e.charCodeAt(0),o=47===n;o?(r.root="/",i=1):i=0;for(var l=-1,a=0,d=-1,c=!0,u=e.length-1,s=0;u>=i;--u)if(47!==(n=e.charCodeAt(u)))-1===d&&(c=!1,d=u+1),46===n?-1===l?l=u:1!==s&&(s=1):-1!==l&&(s=-1);else if(!c){a=u+1;break}return-1===l||-1===d||0===s||1===s&&l===d-1&&l===a+1?-1!==d&&(r.base=r.name=0===a&&o?e.slice(1,d):e.slice(a,d)):(0===a&&o?(r.name=e.slice(1,l),r.base=e.slice(1,d)):(r.name=e.slice(a,l),r.base=e.slice(a,d)),r.ext=e.slice(l,d)),a>0?r.dir=e.slice(0,a-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};i.posix=i,e.exports=i},348:function(e,t,r){var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))((function(n,o){function l(e){try{d(i.next(e))}catch(e){o(e)}}function a(e){try{d(i.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(l,a)}d((i=i.apply(e,t||[])).next())}))},n=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(r){t[r]=e[r]&&function(t){return new Promise((function(i,n){!function(e,t,r,i){Promise.resolve(i).then((function(t){e({value:t,done:r})}),t)}(i,n,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t.NativeFS=t.registerNativeFS=t.verifyPermission=void 0;const o=r(373),l=r(470);var a,d;function c(e){return new Error(`NativeFS FileNotFound ${e.path}`)}function u(e,t){return i(this,void 0,void 0,(function*(){const r={mode:t};return!!e&&("granted"===(yield e.queryPermission(r))||"granted"===(yield e.requestPermission(r)))}))}!function(e){e[e.Unknown=0]="Unknown",e[e.File=1]="File",e[e.Directory=2]="Directory",e[e.SymbolicLink=64]="SymbolicLink"}(a||(a={})),function(e){e[e.Changed=1]="Changed",e[e.Created=2]="Created",e[e.Deleted=3]="Deleted"}(d||(d={})),t.verifyPermission=u;let s=!1;t.registerNativeFS=function(e){if(s)return;s=!0;const t=new h;(e.commands||[]).push({id:"nativeFS.showDirectoryPicker",handler:()=>i(this,void 0,void 0,(function*(){const e=yield window.showDirectoryPicker();return t.attachDirectory(e)}))},{id:"nativeFS.stat",handler(e){return i(this,void 0,void 0,(function*(){return yield t.stat(e)}))}},{id:"nativeFS.readDirectory",handler(e){return i(this,void 0,void 0,(function*(){return yield t.readDirectory(e)}))}},{id:"nativeFS.readFile",handler(e){return i(this,void 0,void 0,(function*(){return yield t.readFile(e)}))}},{id:"nativeFS.writeFile",handler(e,r,n){return i(this,void 0,void 0,(function*(){return yield t.writeFile(e,r,n)}))}},{id:"nativeFS.rename",handler(e,r,n){return i(this,void 0,void 0,(function*(){return yield t.rename(e,r,n)}))}},{id:"nativeFS.delete",handler(e,r){return i(this,void 0,void 0,(function*(){return yield t.delete(e,r)}))}},{id:"nativeFS.createDirectory",handler(e){return i(this,void 0,void 0,(function*(){return yield t.createDirectory(e)}))}})};class h{constructor(){this.directoryHandleMap={}}attachDirectory(e){return i(this,void 0,void 0,(function*(){const t="/"+o.nanoid(8)+"/"+e.name+"/";return this.directoryHandleMap[t]=e,t}))}helper(e,t="readwrite"){return i(this,void 0,void 0,(function*(){const r=e.replace(/\/+$/,"").split("/"),i="/"+r[1]+"/"+r[2]+"/",n=this.directoryHandleMap[i];return yield u(n,t),[n,r.slice(3,r.length)]}))}stat(e){return i(this,void 0,void 0,(function*(){let[t,r]=yield this.helper(e.path,"read");if(!t)throw c(e);let o=0;for(;o<r.length-1;o++)t=yield t.getDirectoryHandle(r[o]);const l=()=>i(this,void 0,void 0,(function*(){var e,r;let i=0;try{for(var o,l=n(t.values());!(o=yield l.next()).done;)o.value,i+=1}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=l.return)&&(yield r.call(l))}finally{if(e)throw e.error}}return{type:a.Directory,ctime:0,mtime:0,size:i}}));if(!r.length)return yield l();try{const e=yield t.getFileHandle(r[o]),i=yield e.getFile();return{type:a.File,ctime:i.lastModified,mtime:i.lastModified,size:i.size}}catch(e){try{return yield t.getDirectoryHandle(r[o]),yield l()}catch(e){throw e}}}))}readDirectory(e){var t,r;return i(this,void 0,void 0,(function*(){let[i,o]=yield this.helper(e.path,"read");if(i){let e=0;for(;e<o.length;e++)i=yield i.getDirectoryHandle(o[e]);const c=[];try{for(var l,d=n(i.values());!(l=yield d.next()).done;){const e=l.value;c.push([e.name,"directory"===e.kind?a.Directory:a.File])}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=d.return)&&(yield r.call(d))}finally{if(t)throw t.error}}return c}throw c(e)}))}readFile(e){return i(this,void 0,void 0,(function*(){let[t,r]=yield this.helper(e.path,"read");if(t){let e=0;for(;e<r.length-1;e++)t=yield t.getDirectoryHandle(r[e]);const i=yield(yield t.getFileHandle(r[e])).getFile();return Array.from(new Uint8Array(yield i.arrayBuffer()))}throw c(e)}))}writeFile(e,t,r){var o,l;return i(this,void 0,void 0,(function*(){let[i,a]=yield this.helper(e.path,"readwrite");if(i){let h=0;for(;h<a.length-1;h++)i=yield i.getDirectoryHandle(a[h],{create:r.create});let f=!1;try{for(var u,s=n(i.values());!(u=yield s.next()).done;)if(u.value.name===a[h]){f=!0;break}}catch(e){o={error:e}}finally{try{u&&!u.done&&(l=s.return)&&(yield l.call(s))}finally{if(o)throw o.error}}if(!f&&!r.create)throw c(e);if(f&&r.create&&!r.overwrite)throw function(e){return new Error(`NativeFS FileExists ${e.path}`)}(e);const y=yield i.getFileHandle(a[h],{create:r.create}),v=[];f||v.push({type:d.Created,uri:e});const g=yield y.createWritable();return yield g.write(Uint8Array.from(t)),yield g.close(),v.push({type:d.Changed,uri:e}),{events:v}}throw c(e)}))}rename(e,t,r){return i(this,void 0,void 0,(function*(){const i=yield this.readFile(e);return yield this.writeFile(t,i,{create:!0,overwrite:r.overwrite}),yield this.delete(e,{recursive:!0}),{events:[{type:d.Deleted,uri:e},{type:d.Created,uri:t}]}}))}delete(e,t){return i(this,void 0,void 0,(function*(){let[r,i]=yield this.helper(e.path,"readwrite");if(!r)throw c(e);let n=0;for(;n<i.length-1;n++)r=yield r.getDirectoryHandle(i[n]);return yield r.removeEntry(i[n],{recursive:t.recursive}),{events:[{uri:e,type:d.Deleted}]}}))}createDirectory(e){return i(this,void 0,void 0,(function*(){let[t,r]=yield this.helper(e.path,"readwrite");if(!t)throw c(e);for(let e=0;e<r.length;e++)t=yield t.getDirectoryHandle(r[e],{create:!0});const i={scheme:"nativefs",path:l.posix.dirname(e.path),authority:"",query:"",fragment:""};return{events:[{type:d.Changed,uri:i},{type:d.Created,uri:e}]}}))}}t.NativeFS=h}},t={};function r(i){var n=t[i];if(void 0!==n)return n.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,r),o.exports}return r.d=(e,t)=>{for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(348)})()}));

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extensions": () => (/* binding */ extensions)
/* harmony export */ });
var extensions = [{ "packageJSON": { "name": "bat", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.52.0" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin mmims/language-batchfile grammars/batchfile.cson ./syntaxes/batchfile.tmLanguage.json" }, "contributes": { "languages": [{ "id": "bat", "extensions": [".bat", ".cmd"], "aliases": ["Batch", "bat"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "bat", "scopeName": "source.batchfile", "path": "./syntaxes/batchfile.tmLanguage.json" }], "snippets": [{ "language": "bat", "path": "./snippets/batchfile.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "bat", "packageNLS": { "displayName": "Windows Bat Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in Windows batch files." } }, { "packageJSON": { "name": "clojure", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-clojure grammars/clojure.cson ./syntaxes/clojure.tmLanguage.json" }, "contributes": { "languages": [{ "id": "clojure", "aliases": ["Clojure", "clojure"], "extensions": [".clj", ".cljs", ".cljc", ".cljx", ".clojure", ".edn"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "clojure", "scopeName": "source.clojure", "path": "./syntaxes/clojure.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "clojure", "packageNLS": { "displayName": "Clojure Language Basics", "description": "Provides syntax highlighting and bracket matching in Clojure files." } }, { "packageJSON": { "name": "coffeescript", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-coffee-script grammars/coffeescript.cson ./syntaxes/coffeescript.tmLanguage.json" }, "contributes": { "languages": [{ "id": "coffeescript", "extensions": [".coffee", ".cson", ".iced"], "aliases": ["CoffeeScript", "coffeescript", "coffee"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "coffeescript", "scopeName": "source.coffee", "path": "./syntaxes/coffeescript.tmLanguage.json" }], "breakpoints": [{ "language": "coffeescript" }], "snippets": [{ "language": "coffeescript", "path": "./snippets/coffeescript.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "coffeescript", "packageNLS": { "displayName": "CoffeeScript Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in CoffeeScript files." } }, { "packageJSON": { "name": "configuration-editing", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.0.0" }, "activationEvents": ["onLanguage:json", "onLanguage:jsonc"], "main": "./out/configurationEditingMain", "browser": "./dist/browser/configurationEditingMain", "scripts": { "compile": "gulp compile-extension:configuration-editing", "watch": "gulp watch-extension:configuration-editing" }, "dependencies": { "jsonc-parser": "^2.2.1", "vscode-nls": "^4.1.1" }, "contributes": { "languages": [{ "id": "jsonc", "extensions": [".code-workspace", "language-configuration.json", "icon-theme.json", "color-theme.json", ".code-snippets"], "filenames": ["settings.json", "launch.json", "tasks.json", "keybindings.json", "extensions.json", "argv.json", "profiles.json", ".devcontainer.json"], "filenamePatterns": ["**/.devcontainer/devcontainer.json"] }], "jsonValidation": [{ "fileMatch": "vscode://defaultsettings/keybindings.json", "url": "vscode://schemas/keybindings" }, { "fileMatch": "%APP_SETTINGS_HOME%/keybindings.json", "url": "vscode://schemas/keybindings" }, { "fileMatch": "vscode://defaultsettings/*.json", "url": "vscode://schemas/settings/default" }, { "fileMatch": "%APP_SETTINGS_HOME%/settings.json", "url": "vscode://schemas/settings/user" }, { "fileMatch": "%MACHINE_SETTINGS_HOME%/settings.json", "url": "vscode://schemas/settings/machine" }, { "fileMatch": "%APP_WORKSPACES_HOME%/*/workspace.json", "url": "vscode://schemas/workspaceConfig" }, { "fileMatch": "**/*.code-workspace", "url": "vscode://schemas/workspaceConfig" }, { "fileMatch": "**/argv.json", "url": "vscode://schemas/argv" }, { "fileMatch": "/.vscode/settings.json", "url": "vscode://schemas/settings/folder" }, { "fileMatch": "/.vscode/launch.json", "url": "vscode://schemas/launch" }, { "fileMatch": "/.vscode/tasks.json", "url": "vscode://schemas/tasks" }, { "fileMatch": "%APP_SETTINGS_HOME%/tasks.json", "url": "vscode://schemas/tasks" }, { "fileMatch": "%APP_SETTINGS_HOME%/snippets/*.json", "url": "vscode://schemas/snippets" }, { "fileMatch": "%APP_SETTINGS_HOME%/sync/snippets/preview/*.json", "url": "vscode://schemas/snippets" }, { "fileMatch": "**/*.code-snippets", "url": "vscode://schemas/global-snippets" }, { "fileMatch": "/.vscode/extensions.json", "url": "vscode://schemas/extensions" }, { "fileMatch": "/.devcontainer/devcontainer.json", "url": "./schemas/devContainer.schema.generated.json" }, { "fileMatch": "/.devcontainer.json", "url": "./schemas/devContainer.schema.generated.json" }, { "fileMatch": "%APP_SETTINGS_HOME%/globalStorage/ms-vscode-remote.remote-containers/nameConfigs/*.json", "url": "./schemas/attachContainer.schema.json" }, { "fileMatch": "%APP_SETTINGS_HOME%/globalStorage/ms-vscode-remote.remote-containers/imageConfigs/*.json", "url": "./schemas/attachContainer.schema.json" }] }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "configuration-editing", "packageNLS": { "displayName": "Configuration Editing", "description": "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files." } }, { "packageJSON": { "name": "cpp", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ./build/update-grammars.js" }, "contributes": { "languages": [{ "id": "c", "extensions": [".c", ".i"], "aliases": ["C", "c"], "configuration": "./language-configuration.json" }, { "id": "cpp", "extensions": [".cpp", ".cc", ".cxx", ".c++", ".hpp", ".hh", ".hxx", ".h++", ".h", ".ii", ".ino", ".inl", ".ipp", ".hpp.in", ".h.in"], "aliases": ["C++", "Cpp", "cpp"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "c", "scopeName": "source.c", "path": "./syntaxes/c.tmLanguage.json" }, { "language": "cpp", "scopeName": "source.cpp.embedded.macro", "path": "./syntaxes/cpp.embedded.macro.tmLanguage.json" }, { "language": "cpp", "scopeName": "source.cpp", "path": "./syntaxes/cpp.tmLanguage.json" }, { "scopeName": "source.c.platform", "path": "./syntaxes/platform.tmLanguage.json" }], "snippets": [{ "language": "c", "path": "./snippets/c.code-snippets" }, { "language": "cpp", "path": "./snippets/cpp.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "cpp", "packageNLS": { "displayName": "C/C++ Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in C/C++ files." } }, { "packageJSON": { "name": "csharp", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin dotnet/csharp-tmLanguage grammars/csharp.tmLanguage ./syntaxes/csharp.tmLanguage.json" }, "contributes": { "languages": [{ "id": "csharp", "extensions": [".cs", ".csx", ".cake"], "aliases": ["C#", "csharp"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "csharp", "scopeName": "source.cs", "path": "./syntaxes/csharp.tmLanguage.json" }], "snippets": [{ "language": "csharp", "path": "./snippets/csharp.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "csharp", "packageNLS": { "displayName": "C# Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in C# files." } }, { "packageJSON": { "name": "css", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin octref/language-css grammars/css.cson ./syntaxes/css.tmLanguage.json" }, "contributes": { "languages": [{ "id": "css", "aliases": ["CSS", "css"], "extensions": [".css"], "mimetypes": ["text/css"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "css", "scopeName": "source.css", "path": "./syntaxes/css.tmLanguage.json", "tokenTypes": { "meta.function.url string.quoted": "other" } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "css", "packageNLS": { "displayName": "CSS Language Basics", "description": "Provides syntax highlighting and bracket matching for CSS, LESS and SCSS files." } }, { "packageJSON": { "name": "css-language-features", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.29.0" }, "icon": "icons/css.png", "activationEvents": ["onLanguage:css", "onLanguage:less", "onLanguage:scss", "onCommand:_css.applyCodeAction"], "main": "./client/out/node/cssClientMain", "browser": "./client/dist/browser/cssClientMain", "enableProposedApi": true, "scripts": { "compile": "gulp compile-extension:css-language-features-client compile-extension:css-language-features-server", "watch": "gulp watch-extension:css-language-features-client watch-extension:css-language-features-server", "test": "node ../../node_modules/mocha/bin/mocha", "install-client-next": "yarn add vscode-languageclient@next" }, "categories": ["Programming Languages"], "contributes": { "configuration": [{ "order": 22, "id": "css", "title": "%css.title%", "properties": { "css.customData": { "type": "array", "markdownDescription": "%css.customData.desc%", "default": [], "items": { "type": "string" }, "scope": "resource" }, "css.completion.triggerPropertyValueCompletion": { "type": "boolean", "scope": "resource", "default": true, "description": "%css.completion.triggerPropertyValueCompletion.desc%" }, "css.completion.completePropertyWithSemicolon": { "type": "boolean", "scope": "resource", "default": true, "description": "%css.completion.completePropertyWithSemicolon.desc%" }, "css.validate": { "type": "boolean", "scope": "resource", "default": true, "description": "%css.validate.desc%" }, "css.hover.documentation": { "type": "boolean", "scope": "resource", "default": true, "description": "%css.hover.documentation%" }, "css.hover.references": { "type": "boolean", "scope": "resource", "default": true, "description": "%css.hover.references%" }, "css.lint.compatibleVendorPrefixes": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.compatibleVendorPrefixes.desc%" }, "css.lint.vendorPrefix": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%css.lint.vendorPrefix.desc%" }, "css.lint.duplicateProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.duplicateProperties.desc%" }, "css.lint.emptyRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%css.lint.emptyRules.desc%" }, "css.lint.importStatement": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.importStatement.desc%" }, "css.lint.boxModel": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%css.lint.boxModel.desc%" }, "css.lint.universalSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%css.lint.universalSelector.desc%" }, "css.lint.zeroUnits": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.zeroUnits.desc%" }, "css.lint.fontFaceProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%css.lint.fontFaceProperties.desc%" }, "css.lint.hexColorLength": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%css.lint.hexColorLength.desc%" }, "css.lint.argumentsInColorFunction": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%css.lint.argumentsInColorFunction.desc%" }, "css.lint.unknownProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%css.lint.unknownProperties.desc%" }, "css.lint.validProperties": { "type": "array", "uniqueItems": true, "items": { "type": "string" }, "scope": "resource", "default": [], "description": "%css.lint.validProperties.desc%" }, "css.lint.ieHack": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.ieHack.desc%" }, "css.lint.unknownVendorSpecificProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.unknownVendorSpecificProperties.desc%" }, "css.lint.propertyIgnoredDueToDisplay": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%css.lint.propertyIgnoredDueToDisplay.desc%" }, "css.lint.important": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%css.lint.important.desc%" }, "css.lint.float": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%css.lint.float.desc%" }, "css.lint.idSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%css.lint.idSelector.desc%" }, "css.lint.unknownAtRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%css.lint.unknownAtRules.desc%" }, "css.trace.server": { "type": "string", "scope": "window", "enum": ["off", "messages", "verbose"], "default": "off", "description": "%css.trace.server.desc%" } } }, { "id": "scss", "order": 24, "title": "%scss.title%", "properties": { "scss.completion.triggerPropertyValueCompletion": { "type": "boolean", "scope": "resource", "default": true, "description": "%scss.completion.triggerPropertyValueCompletion.desc%" }, "scss.completion.completePropertyWithSemicolon": { "type": "boolean", "scope": "resource", "default": true, "description": "%scss.completion.completePropertyWithSemicolon.desc%" }, "scss.validate": { "type": "boolean", "scope": "resource", "default": true, "description": "%scss.validate.desc%" }, "scss.hover.documentation": { "type": "boolean", "scope": "resource", "default": true, "description": "%scss.hover.documentation%" }, "scss.hover.references": { "type": "boolean", "scope": "resource", "default": true, "description": "%scss.hover.references%" }, "scss.lint.compatibleVendorPrefixes": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.compatibleVendorPrefixes.desc%" }, "scss.lint.vendorPrefix": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%scss.lint.vendorPrefix.desc%" }, "scss.lint.duplicateProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.duplicateProperties.desc%" }, "scss.lint.emptyRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%scss.lint.emptyRules.desc%" }, "scss.lint.importStatement": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.importStatement.desc%" }, "scss.lint.boxModel": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%scss.lint.boxModel.desc%" }, "scss.lint.universalSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%scss.lint.universalSelector.desc%" }, "scss.lint.zeroUnits": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.zeroUnits.desc%" }, "scss.lint.fontFaceProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%scss.lint.fontFaceProperties.desc%" }, "scss.lint.hexColorLength": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%scss.lint.hexColorLength.desc%" }, "scss.lint.argumentsInColorFunction": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%scss.lint.argumentsInColorFunction.desc%" }, "scss.lint.unknownProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%scss.lint.unknownProperties.desc%" }, "scss.lint.validProperties": { "type": "array", "uniqueItems": true, "items": { "type": "string" }, "scope": "resource", "default": [], "description": "%scss.lint.validProperties.desc%" }, "scss.lint.ieHack": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.ieHack.desc%" }, "scss.lint.unknownVendorSpecificProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.unknownVendorSpecificProperties.desc%" }, "scss.lint.propertyIgnoredDueToDisplay": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%scss.lint.propertyIgnoredDueToDisplay.desc%" }, "scss.lint.important": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%scss.lint.important.desc%" }, "scss.lint.float": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%scss.lint.float.desc%" }, "scss.lint.idSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%scss.lint.idSelector.desc%" }, "scss.lint.unknownAtRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%scss.lint.unknownAtRules.desc%" } } }, { "id": "less", "order": 23, "type": "object", "title": "%less.title%", "properties": { "less.completion.triggerPropertyValueCompletion": { "type": "boolean", "scope": "resource", "default": true, "description": "%less.completion.triggerPropertyValueCompletion.desc%" }, "less.completion.completePropertyWithSemicolon": { "type": "boolean", "scope": "resource", "default": true, "description": "%less.completion.completePropertyWithSemicolon.desc%" }, "less.validate": { "type": "boolean", "scope": "resource", "default": true, "description": "%less.validate.desc%" }, "less.hover.documentation": { "type": "boolean", "scope": "resource", "default": true, "description": "%less.hover.documentation%" }, "less.hover.references": { "type": "boolean", "scope": "resource", "default": true, "description": "%less.hover.references%" }, "less.lint.compatibleVendorPrefixes": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.compatibleVendorPrefixes.desc%" }, "less.lint.vendorPrefix": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%less.lint.vendorPrefix.desc%" }, "less.lint.duplicateProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.duplicateProperties.desc%" }, "less.lint.emptyRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%less.lint.emptyRules.desc%" }, "less.lint.importStatement": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.importStatement.desc%" }, "less.lint.boxModel": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%less.lint.boxModel.desc%" }, "less.lint.universalSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%less.lint.universalSelector.desc%" }, "less.lint.zeroUnits": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.zeroUnits.desc%" }, "less.lint.fontFaceProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%less.lint.fontFaceProperties.desc%" }, "less.lint.hexColorLength": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%less.lint.hexColorLength.desc%" }, "less.lint.argumentsInColorFunction": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "error", "description": "%less.lint.argumentsInColorFunction.desc%" }, "less.lint.unknownProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%less.lint.unknownProperties.desc%" }, "less.lint.validProperties": { "type": "array", "uniqueItems": true, "items": { "type": "string" }, "scope": "resource", "default": [], "description": "%less.lint.validProperties.desc%" }, "less.lint.ieHack": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.ieHack.desc%" }, "less.lint.unknownVendorSpecificProperties": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.unknownVendorSpecificProperties.desc%" }, "less.lint.propertyIgnoredDueToDisplay": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "markdownDescription": "%less.lint.propertyIgnoredDueToDisplay.desc%" }, "less.lint.important": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%less.lint.important.desc%" }, "less.lint.float": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "markdownDescription": "%less.lint.float.desc%" }, "less.lint.idSelector": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "ignore", "description": "%less.lint.idSelector.desc%" }, "less.lint.unknownAtRules": { "type": "string", "scope": "resource", "enum": ["ignore", "warning", "error"], "default": "warning", "description": "%less.lint.unknownAtRules.desc%" } } }], "configurationDefaults": { "[css]": { "editor.suggest.insertMode": "replace" }, "[scss]": { "editor.suggest.insertMode": "replace" }, "[less]": { "editor.suggest.insertMode": "replace" } }, "jsonValidation": [{ "fileMatch": "*.css-data.json", "url": "https://raw.githubusercontent.com/microsoft/vscode-css-languageservice/master/docs/customData.schema.json" }, { "fileMatch": "package.json", "url": "./schemas/package.schema.json" }] }, "dependencies": { "vscode-languageclient": "^7.0.0", "vscode-nls": "^5.0.0", "vscode-uri": "^3.0.2" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "css-language-features", "packageNLS": { "displayName": "CSS Language Features", "description": "Provides rich language support for CSS, LESS and SCSS files.", "css.title": "CSS", "css.customData.desc": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.", "css.completion.triggerPropertyValueCompletion.desc": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.", "css.completion.completePropertyWithSemicolon.desc": "Insert semicolon at end of line when completing CSS properties", "css.lint.argumentsInColorFunction.desc": "Invalid number of parameters.", "css.lint.boxModel.desc": "Do not use `width` or `height` when using `padding` or `border`.", "css.lint.compatibleVendorPrefixes.desc": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties.", "css.lint.duplicateProperties.desc": "Do not use duplicate style definitions.", "css.lint.emptyRules.desc": "Do not use empty rulesets.", "css.lint.float.desc": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.", "css.lint.fontFaceProperties.desc": "`@font-face` rule must define `src` and `font-family` properties.", "css.lint.hexColorLength.desc": "Hex colors must consist of three or six hex numbers.", "css.lint.idSelector.desc": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML.", "css.lint.ieHack.desc": "IE hacks are only necessary when supporting IE7 and older.", "css.lint.important.desc": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.", "css.lint.importStatement.desc": "Import statements do not load in parallel.", "css.lint.propertyIgnoredDueToDisplay.desc": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.", "css.lint.universalSelector.desc": "The universal selector (`*`) is known to be slow.", "css.lint.unknownAtRules.desc": "Unknown at-rule.", "css.lint.unknownProperties.desc": "Unknown property.", "css.lint.validProperties.desc": "A list of properties that are not validated against the `unknownProperties` rule.", "css.lint.unknownVendorSpecificProperties.desc": "Unknown vendor specific property.", "css.lint.vendorPrefix.desc": "When using a vendor-specific prefix, also include the standard property.", "css.lint.zeroUnits.desc": "No unit for zero needed.", "css.trace.server.desc": "Traces the communication between VS Code and the CSS language server.", "css.validate.title": "Controls CSS validation and problem severities.", "css.validate.desc": "Enables or disables all validations.", "css.hover.documentation": "Show tag and attribute documentation in CSS hovers.", "css.hover.references": "Show references to MDN in CSS hovers.", "less.title": "LESS", "less.completion.triggerPropertyValueCompletion.desc": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.", "less.completion.completePropertyWithSemicolon.desc": "Insert semicolon at end of line when completing CSS properties", "less.lint.argumentsInColorFunction.desc": "Invalid number of parameters.", "less.lint.boxModel.desc": "Do not use `width` or `height` when using `padding` or `border`.", "less.lint.compatibleVendorPrefixes.desc": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties.", "less.lint.duplicateProperties.desc": "Do not use duplicate style definitions.", "less.lint.emptyRules.desc": "Do not use empty rulesets.", "less.lint.float.desc": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.", "less.lint.fontFaceProperties.desc": "`@font-face` rule must define `src` and `font-family` properties.", "less.lint.hexColorLength.desc": "Hex colors must consist of three or six hex numbers.", "less.lint.idSelector.desc": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML.", "less.lint.ieHack.desc": "IE hacks are only necessary when supporting IE7 and older.", "less.lint.important.desc": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.", "less.lint.importStatement.desc": "Import statements do not load in parallel.", "less.lint.propertyIgnoredDueToDisplay.desc": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.", "less.lint.universalSelector.desc": "The universal selector (`*`) is known to be slow.", "less.lint.unknownAtRules.desc": "Unknown at-rule.", "less.lint.unknownProperties.desc": "Unknown property.", "less.lint.validProperties.desc": "A list of properties that are not validated against the `unknownProperties` rule.", "less.lint.unknownVendorSpecificProperties.desc": "Unknown vendor specific property.", "less.lint.vendorPrefix.desc": "When using a vendor-specific prefix, also include the standard property.", "less.lint.zeroUnits.desc": "No unit for zero needed.", "less.validate.title": "Controls LESS validation and problem severities.", "less.validate.desc": "Enables or disables all validations.", "less.hover.documentation": "Show tag and attribute documentation in LESS hovers.", "less.hover.references": "Show references to MDN in LESS hovers.", "scss.title": "SCSS (Sass)", "scss.completion.triggerPropertyValueCompletion.desc": "By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.", "scss.completion.completePropertyWithSemicolon.desc": "Insert semicolon at end of line when completing CSS properties", "scss.lint.argumentsInColorFunction.desc": "Invalid number of parameters.", "scss.lint.boxModel.desc": "Do not use `width` or `height` when using `padding` or `border`.", "scss.lint.compatibleVendorPrefixes.desc": "When using a vendor-specific prefix make sure to also include all other vendor-specific properties.", "scss.lint.duplicateProperties.desc": "Do not use duplicate style definitions.", "scss.lint.emptyRules.desc": "Do not use empty rulesets.", "scss.lint.float.desc": "Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.", "scss.lint.fontFaceProperties.desc": "`@font-face` rule must define `src` and `font-family` properties.", "scss.lint.hexColorLength.desc": "Hex colors must consist of three or six hex numbers.", "scss.lint.idSelector.desc": "Selectors should not contain IDs because these rules are too tightly coupled with the HTML.", "scss.lint.ieHack.desc": "IE hacks are only necessary when supporting IE7 and older.", "scss.lint.important.desc": "Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.", "scss.lint.importStatement.desc": "Import statements do not load in parallel.", "scss.lint.propertyIgnoredDueToDisplay.desc": "Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.", "scss.lint.universalSelector.desc": "The universal selector (`*`) is known to be slow.", "scss.lint.unknownAtRules.desc": "Unknown at-rule.", "scss.lint.unknownProperties.desc": "Unknown property.", "scss.lint.validProperties.desc": "A list of properties that are not validated against the `unknownProperties` rule.", "scss.lint.unknownVendorSpecificProperties.desc": "Unknown vendor specific property.", "scss.lint.vendorPrefix.desc": "When using a vendor-specific prefix, also include the standard property.", "scss.lint.zeroUnits.desc": "No unit for zero needed.", "scss.validate.title": "Controls SCSS validation and problem severities.", "scss.validate.desc": "Enables or disables all validations.", "scss.hover.documentation": "Show tag and attribute documentation in SCSS hovers.", "scss.hover.references": "Show references to MDN in SCSS hovers.", "css.colorDecorators.enable.deprecationMessage": "The setting `css.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.", "scss.colorDecorators.enable.deprecationMessage": "The setting `scss.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.", "less.colorDecorators.enable.deprecationMessage": "The setting `less.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`." } }, { "packageJSON": { "name": "debug-auto-launch", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.5.0" }, "activationEvents": ["*"], "main": "./out/extension", "scripts": { "compile": "gulp compile-extension:debug-auto-launch", "watch": "gulp watch-extension:debug-auto-launch" }, "contributes": { "commands": [{ "command": "extension.node-debug.toggleAutoAttach", "title": "%toggle.auto.attach%", "category": "Debug" }] }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "prettier": { "printWidth": 100, "trailingComma": "all", "singleQuote": true, "arrowParens": "avoid" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "debug-auto-launch", "packageNLS": { "displayName": "Node Debug Auto-attach", "description": "Helper for auto-attach feature when node-debug extensions are not active.", "toggle.auto.attach": "Toggle Auto Attach" } }, { "packageJSON": { "name": "debug-server-ready", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.32.0" }, "activationEvents": ["onDebugResolve"], "enableProposedApi": true, "main": "./out/extension", "scripts": { "compile": "gulp compile-extension:debug-server-ready", "watch": "gulp watch-extension:debug-server-ready" }, "contributes": { "debuggers": [{ "type": "*", "configurationAttributes": { "launch": { "properties": { "serverReadyAction": { "oneOf": [{ "type": "object", "additionalProperties": false, "markdownDescription": "%debug.server.ready.serverReadyAction.description%", "default": { "action": "openExternally" }, "properties": { "action": { "type": "string", "enum": ["openExternally"], "enumDescriptions": ["%debug.server.ready.action.openExternally.description%"], "markdownDescription": "%debug.server.ready.action.description%", "default": "openExternally" }, "pattern": { "type": "string", "markdownDescription": "%debug.server.ready.pattern.description%", "default": "listening on port ([0-9]+)" }, "uriFormat": { "type": "string", "markdownDescription": "%debug.server.ready.uriFormat.description%", "default": "http://localhost:%s" } } }, { "type": "object", "additionalProperties": false, "markdownDescription": "%debug.server.ready.serverReadyAction.description%", "default": { "action": "openExternally" }, "properties": { "action": { "type": "string", "enum": ["debugWithChrome"], "enumDescriptions": ["%debug.server.ready.action.debugWithChrome.description%"], "markdownDescription": "%debug.server.ready.action.description%", "default": "openExternally" }, "pattern": { "type": "string", "markdownDescription": "%debug.server.ready.pattern.description%", "default": "listening on port ([0-9]+)" }, "uriFormat": { "type": "string", "markdownDescription": "%debug.server.ready.uriFormat.description%", "default": "http://localhost:%s" }, "webRoot": { "type": "string", "markdownDescription": "%debug.server.ready.webRoot.description%", "default": "${workspaceFolder}" } } }, { "type": "object", "additionalProperties": false, "markdownDescription": "%debug.server.ready.serverReadyAction.description%", "default": { "action": "startDebugging", "name": "<launch browser config name>" }, "required": ["name"], "properties": { "action": { "type": "string", "enum": ["startDebugging"], "enumDescriptions": ["%debug.server.ready.action.startDebugging.description%"], "markdownDescription": "%debug.server.ready.action.description%", "default": "startDebugging" }, "pattern": { "type": "string", "markdownDescription": "%debug.server.ready.pattern.description%", "default": "listening on port ([0-9]+)" }, "name": { "type": "string", "markdownDescription": "%debug.server.ready.debugConfigName.description%", "default": "Launch Browser" } } }] } } } } }] }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "debug-server-ready", "packageNLS": { "displayName": "Server Ready Action", "description": "Open URI in browser if server under debugging is ready.", "debug.server.ready.serverReadyAction.description": "Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)", "debug.server.ready.action.description": "What to do with the URI when the server is ready.", "debug.server.ready.action.openExternally.description": "Open URI externally with the default application.", "debug.server.ready.action.debugWithChrome.description": "Start debugging with the 'Debugger for Chrome'.", "debug.server.ready.action.startDebugging.description": "Run another launch configuration.", "debug.server.ready.pattern.description": "Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.", "debug.server.ready.uriFormat.description": "A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.", "debug.server.ready.webRoot.description": "Value passed to the debug configuration for the 'Debugger for Chrome'.", "debug.server.ready.debugConfigName.description": "Name of the launch configuration to run." } }, { "packageJSON": { "name": "docker", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin moby/moby contrib/syntax/textmate/Docker.tmbundle/Syntaxes/Dockerfile.tmLanguage ./syntaxes/docker.tmLanguage.json" }, "contributes": { "languages": [{ "id": "dockerfile", "extensions": [".dockerfile", ".containerfile"], "filenames": ["Dockerfile", "Containerfile"], "filenamePatterns": ["Dockerfile.*", "Containerfile.*"], "aliases": ["Docker", "Dockerfile", "Containerfile"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "dockerfile", "scopeName": "source.dockerfile", "path": "./syntaxes/docker.tmLanguage.json" }], "configurationDefaults": { "[dockerfile]": { "editor.quickSuggestions": { "strings": true } } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "docker", "packageNLS": { "displayName": "Docker Language Basics", "description": "Provides syntax highlighting and bracket matching in Docker files." } }, { "packageJSON": { "name": "emmet", "displayName": "Emmet", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.13.0" }, "icon": "images/icon.png", "categories": ["Other"], "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" }, "activationEvents": ["onStartupFinished", "onCommand:emmet.expandAbbreviation", "onLanguage:html", "onLanguage:css", "onLanguage:scss", "onLanguage:less"], "main": "./out/node/emmetNodeMain", "browser": "./dist/browser/emmetBrowserMain", "contributes": { "configuration": { "type": "object", "title": "Emmet", "properties": { "emmet.showExpandedAbbreviation": { "type": ["string"], "enum": ["never", "always", "inMarkupAndStylesheetFilesOnly"], "default": "always", "markdownDescription": "%emmetShowExpandedAbbreviation%" }, "emmet.showAbbreviationSuggestions": { "type": "boolean", "default": true, "markdownDescription": "%emmetShowAbbreviationSuggestions%" }, "emmet.includeLanguages": { "type": "object", "additionalProperties": { "type": "string" }, "default": {}, "markdownDescription": "%emmetIncludeLanguages%" }, "emmet.variables": { "type": "object", "properties": { "lang": { "type": "string", "default": "en" }, "charset": { "type": "string", "default": "UTF-8" } }, "default": {}, "description": "%emmetVariables%" }, "emmet.syntaxProfiles": { "type": "object", "default": {}, "description": "%emmetSyntaxProfiles%" }, "emmet.excludeLanguages": { "type": "array", "default": ["markdown"], "description": "%emmetExclude%" }, "emmet.extensionsPath": { "type": ["string", "array", "null"], "default": null, "description": "%emmetExtensionsPath%" }, "emmet.triggerExpansionOnTab": { "type": "boolean", "default": false, "description": "%emmetTriggerExpansionOnTab%" }, "emmet.preferences": { "type": "object", "default": {}, "description": "%emmetPreferences%", "properties": { "css.intUnit": { "type": "string", "default": "px", "description": "%emmetPreferencesIntUnit%" }, "css.floatUnit": { "type": "string", "default": "em", "description": "%emmetPreferencesFloatUnit%" }, "css.propertyEnd": { "type": "string", "default": ";", "description": "%emmetPreferencesCssAfter%" }, "sass.propertyEnd": { "type": "string", "default": "", "description": "%emmetPreferencesSassAfter%" }, "stylus.propertyEnd": { "type": "string", "default": "", "description": "%emmetPreferencesStylusAfter%" }, "css.valueSeparator": { "type": "string", "default": ": ", "description": "%emmetPreferencesCssBetween%" }, "sass.valueSeparator": { "type": "string", "default": ": ", "description": "%emmetPreferencesSassBetween%" }, "stylus.valueSeparator": { "type": "string", "default": " ", "description": "%emmetPreferencesStylusBetween%" }, "bem.elementSeparator": { "type": "string", "default": "__", "description": "%emmetPreferencesBemElementSeparator%" }, "bem.modifierSeparator": { "type": "string", "default": "_", "description": "%emmetPreferencesBemModifierSeparator%" }, "filter.commentBefore": { "type": "string", "default": "", "description": "%emmetPreferencesFilterCommentBefore%" }, "filter.commentAfter": { "type": "string", "default": "\n<!-- /[#ID][.CLASS] -->", "description": "%emmetPreferencesFilterCommentAfter%" }, "filter.commentTrigger": { "type": "array", "default": ["id", "class"], "description": "%emmetPreferencesFilterCommentTrigger%" }, "format.noIndentTags": { "type": "array", "default": ["html"], "description": "%emmetPreferencesFormatNoIndentTags%" }, "format.forceIndentationForTags": { "type": "array", "default": ["body"], "description": "%emmetPreferencesFormatForceIndentTags%" }, "profile.allowCompactBoolean": { "type": "boolean", "default": false, "description": "%emmetPreferencesAllowCompactBoolean%" }, "css.webkitProperties": { "type": "string", "default": null, "markdownDescription": "%emmetPreferencesCssWebkitProperties%" }, "css.mozProperties": { "type": "string", "default": null, "markdownDescription": "%emmetPreferencesCssMozProperties%" }, "css.oProperties": { "type": "string", "default": null, "markdownDescription": "%emmetPreferencesCssOProperties%" }, "css.msProperties": { "type": "string", "default": null, "markdownDescription": "%emmetPreferencesCssMsProperties%" }, "css.fuzzySearchMinScore": { "type": "number", "default": 0.3, "description": "%emmetPreferencesCssFuzzySearchMinScore%" }, "output.reverseAttributes": { "type": "boolean", "default": false, "description": "%emmetPreferencesOutputReverseAttributes%" }, "css.color.short": { "type": "boolean", "default": true, "description": "%emmetPreferencesCssColorShort%" } } }, "emmet.showSuggestionsAsSnippets": { "type": "boolean", "default": false, "markdownDescription": "%emmetShowSuggestionsAsSnippets%" }, "emmet.optimizeStylesheetParsing": { "type": "boolean", "default": true, "markdownDescription": "%emmetOptimizeStylesheetParsing%" } } }, "commands": [{ "command": "editor.emmet.action.wrapWithAbbreviation", "title": "%command.wrapWithAbbreviation%", "category": "Emmet" }, { "command": "editor.emmet.action.removeTag", "title": "%command.removeTag%", "category": "Emmet" }, { "command": "editor.emmet.action.updateTag", "title": "%command.updateTag%", "category": "Emmet" }, { "command": "editor.emmet.action.matchTag", "title": "%command.matchTag%", "category": "Emmet" }, { "command": "editor.emmet.action.balanceIn", "title": "%command.balanceIn%", "category": "Emmet" }, { "command": "editor.emmet.action.balanceOut", "title": "%command.balanceOut%", "category": "Emmet" }, { "command": "editor.emmet.action.prevEditPoint", "title": "%command.prevEditPoint%", "category": "Emmet" }, { "command": "editor.emmet.action.nextEditPoint", "title": "%command.nextEditPoint%", "category": "Emmet" }, { "command": "editor.emmet.action.mergeLines", "title": "%command.mergeLines%", "category": "Emmet" }, { "command": "editor.emmet.action.selectPrevItem", "title": "%command.selectPrevItem%", "category": "Emmet" }, { "command": "editor.emmet.action.selectNextItem", "title": "%command.selectNextItem%", "category": "Emmet" }, { "command": "editor.emmet.action.splitJoinTag", "title": "%command.splitJoinTag%", "category": "Emmet" }, { "command": "editor.emmet.action.toggleComment", "title": "%command.toggleComment%", "category": "Emmet" }, { "command": "editor.emmet.action.evaluateMathExpression", "title": "%command.evaluateMathExpression%", "category": "Emmet" }, { "command": "editor.emmet.action.updateImageSize", "title": "%command.updateImageSize%", "category": "Emmet" }, { "command": "editor.emmet.action.incrementNumberByOneTenth", "title": "%command.incrementNumberByOneTenth%", "category": "Emmet" }, { "command": "editor.emmet.action.incrementNumberByOne", "title": "%command.incrementNumberByOne%", "category": "Emmet" }, { "command": "editor.emmet.action.incrementNumberByTen", "title": "%command.incrementNumberByTen%", "category": "Emmet" }, { "command": "editor.emmet.action.decrementNumberByOneTenth", "title": "%command.decrementNumberByOneTenth%", "category": "Emmet" }, { "command": "editor.emmet.action.decrementNumberByOne", "title": "%command.decrementNumberByOne%", "category": "Emmet" }, { "command": "editor.emmet.action.decrementNumberByTen", "title": "%command.decrementNumberByTen%", "category": "Emmet" }, { "command": "editor.emmet.action.reflectCSSValue", "title": "%command.reflectCSSValue%", "category": "Emmet" }, { "command": "workbench.action.showEmmetCommands", "title": "%command.showEmmetCommands%", "category": "" }], "menus": { "commandPalette": [{ "command": "editor.emmet.action.wrapWithAbbreviation" }, { "command": "editor.emmet.action.removeTag" }, { "command": "editor.emmet.action.updateTag" }, { "command": "editor.emmet.action.matchTag" }, { "command": "editor.emmet.action.balanceIn" }, { "command": "editor.emmet.action.balanceOut" }, { "command": "editor.emmet.action.prevEditPoint" }, { "command": "editor.emmet.action.nextEditPoint" }, { "command": "editor.emmet.action.mergeLines" }, { "command": "editor.emmet.action.selectPrevItem" }, { "command": "editor.emmet.action.selectNextItem" }, { "command": "editor.emmet.action.splitJoinTag" }, { "command": "editor.emmet.action.toggleComment" }, { "command": "editor.emmet.action.evaluateMathExpression" }, { "command": "editor.emmet.action.updateImageSize", "when": "resourceScheme =~ /^file$/" }, { "command": "editor.emmet.action.incrementNumberByOneTenth" }, { "command": "editor.emmet.action.incrementNumberByOne" }, { "command": "editor.emmet.action.incrementNumberByTen" }, { "command": "editor.emmet.action.decrementNumberByOneTenth" }, { "command": "editor.emmet.action.decrementNumberByOne" }, { "command": "editor.emmet.action.decrementNumberByTen" }, { "command": "editor.emmet.action.reflectCSSValue" }] } }, "scripts": { "watch": "gulp watch-extension:emmet", "compile": "gulp compile-extension:emmet", "deps": "yarn add vscode-emmet-helper" }, "devDependencies": { "@types/node": "^12.19.9" }, "dependencies": { "@emmetio/abbreviation": "^2.2.0", "@emmetio/css-parser": "ramya-rao-a/css-parser#vscode", "@emmetio/html-matcher": "^0.3.3", "@emmetio/math-expression": "^1.0.4", "image-size": "^0.5.2", "vscode-emmet-helper": "^2.3.0", "vscode-languageserver-textdocument": "^1.0.1" } }, "extensionPath": "emmet", "packageNLS": { "description": "Emmet support for VS Code", "command.wrapWithAbbreviation": "Wrap with Abbreviation", "command.removeTag": "Remove Tag", "command.updateTag": "Update Tag", "command.matchTag": "Go to Matching Pair", "command.balanceIn": "Balance (inward)", "command.balanceOut": "Balance (outward)", "command.prevEditPoint": "Go to Previous Edit Point", "command.nextEditPoint": "Go to Next Edit Point", "command.mergeLines": "Merge Lines", "command.selectPrevItem": "Select Previous Item", "command.selectNextItem": "Select Next Item", "command.splitJoinTag": "Split/Join Tag", "command.toggleComment": "Toggle Comment", "command.evaluateMathExpression": "Evaluate Math Expression", "command.updateImageSize": "Update Image Size", "command.reflectCSSValue": "Reflect CSS Value", "command.incrementNumberByOne": "Increment by 1", "command.decrementNumberByOne": "Decrement by 1", "command.incrementNumberByOneTenth": "Increment by 0.1", "command.decrementNumberByOneTenth": "Decrement by 0.1", "command.incrementNumberByTen": "Increment by 10", "command.decrementNumberByTen": "Decrement by 10", "command.showEmmetCommands": "Show Emmet Commands", "emmetSyntaxProfiles": "Define profile for specified syntax or use your own profile with specific rules.", "emmetExclude": "An array of languages where Emmet abbreviations should not be expanded.", "emmetExtensionsPath": "Path to a folder containing Emmet profiles and snippets.", "emmetShowExpandedAbbreviation": "Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css.", "emmetShowAbbreviationSuggestions": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`.", "emmetIncludeLanguages": "Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.\n E.g.: `{\"vue-html\": \"html\", \"javascript\": \"javascriptreact\"}`", "emmetVariables": "Variables to be used in Emmet snippets", "emmetTriggerExpansionOnTab": "When enabled, Emmet abbreviations are expanded when pressing TAB.", "emmetPreferences": "Preferences used to modify behavior of some actions and resolvers of Emmet.", "emmetPreferencesIntUnit": "Default unit for integer values", "emmetPreferencesFloatUnit": "Default unit for float values", "emmetPreferencesCssAfter": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations", "emmetPreferencesSassAfter": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files", "emmetPreferencesStylusAfter": "Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files", "emmetPreferencesCssBetween": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations", "emmetPreferencesSassBetween": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files", "emmetPreferencesStylusBetween": "Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files", "emmetShowSuggestionsAsSnippets": "If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting.", "emmetPreferencesBemElementSeparator": "Element separator used for classes when using the BEM filter", "emmetPreferencesBemModifierSeparator": "Modifier separator used for classes when using the BEM filter", "emmetPreferencesFilterCommentBefore": "A definition of comment that should be placed before matched element when comment filter is applied.", "emmetPreferencesFilterCommentAfter": "A definition of comment that should be placed after matched element when comment filter is applied.", "emmetPreferencesFilterCommentTrigger": "A comma-separated list of attribute names that should exist in abbreviation for the comment filter to be applied", "emmetPreferencesFormatNoIndentTags": "An array of tag names that should not get inner indentation", "emmetPreferencesFormatForceIndentTags": "An array of tag names that should always get inner indentation", "emmetPreferencesAllowCompactBoolean": "If true, compact notation of boolean attributes are produced", "emmetPreferencesCssWebkitProperties": "Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix.", "emmetPreferencesCssMozProperties": "Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix.", "emmetPreferencesCssOProperties": "Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix.", "emmetPreferencesCssMsProperties": "Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix.", "emmetPreferencesCssFuzzySearchMinScore": "The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches.", "emmetOptimizeStylesheetParsing": "When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in css/scss/less files is parsed.", "emmetPreferencesOutputReverseAttributes": "If `true`, reverses attribute merging directions when resolving snippets.", "emmetPreferencesCssColorShort": "If `true`, color values like #f will be expanded to #fff instead of #ffffff." } }, { "packageJSON": { "name": "extension-editing", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.4.0" }, "activationEvents": ["onLanguage:json", "onLanguage:markdown", "onLanguage:typescript"], "main": "./out/extensionEditingMain", "browser": "./dist/browser/extensionEditingBrowserMain", "scripts": { "compile": "gulp compile-extension:extension-editing", "watch": "gulp watch-extension:extension-editing" }, "dependencies": { "jsonc-parser": "^2.2.1", "markdown-it": "^8.3.1", "parse5": "^3.0.2", "vscode-nls": "^4.1.1" }, "contributes": { "jsonValidation": [{ "fileMatch": "package.json", "url": "vscode://schemas/vscode-extensions" }, { "fileMatch": "*language-configuration.json", "url": "vscode://schemas/language-configuration" }, { "fileMatch": ["*icon-theme.json", "!*product-icon-theme.json"], "url": "vscode://schemas/icon-theme" }, { "fileMatch": "*product-icon-theme.json", "url": "vscode://schemas/product-icon-theme" }, { "fileMatch": "*color-theme.json", "url": "vscode://schemas/color-theme" }], "languages": [{ "id": "ignore", "filenames": [".vscodeignore"] }] }, "devDependencies": { "@types/markdown-it": "0.0.2", "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "extension-editing", "packageNLS": { "displayName": "Extension Authoring", "description": "Provides linting capabilities for authoring extensions." } }, { "packageJSON": { "name": "fsharp", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin ionide/ionide-fsgrammar grammars/fsharp.json ./syntaxes/fsharp.tmLanguage.json" }, "contributes": { "languages": [{ "id": "fsharp", "extensions": [".fs", ".fsi", ".fsx", ".fsscript"], "aliases": ["F#", "FSharp", "fsharp"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "fsharp", "scopeName": "source.fsharp", "path": "./syntaxes/fsharp.tmLanguage.json" }], "snippets": [{ "language": "fsharp", "path": "./snippets/fsharp.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "fsharp", "packageNLS": { "displayName": "F# Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in F# files." } }, { "packageJSON": { "name": "git", "displayName": "%displayName%", "description": "%description%", "publisher": "vscode", "license": "MIT", "version": "1.0.0", "engines": { "vscode": "^1.5.0" }, "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "enableProposedApi": true, "categories": ["Other"], "activationEvents": ["*", "onFileSystem:git"], "main": "./out/main", "icon": "resources/icons/git.png", "scripts": { "compile": "gulp compile-extension:git", "watch": "gulp watch-extension:git", "update-emoji": "node ./build/update-emoji.js", "update-grammar": "node ./build/update-grammars.js", "test": "node ../../node_modules/mocha/bin/mocha" }, "contributes": { "commands": [{ "command": "git.setLogLevel", "title": "%command.setLogLevel%", "category": "Git" }, { "command": "git.clone", "title": "%command.clone%", "category": "Git" }, { "command": "git.cloneRecursive", "title": "%command.cloneRecursive%", "category": "Git" }, { "command": "git.init", "title": "%command.init%", "category": "Git", "icon": "$(add)" }, { "command": "git.openRepository", "title": "%command.openRepository%", "category": "Git" }, { "command": "git.close", "title": "%command.close%", "category": "Git" }, { "command": "git.refresh", "title": "%command.refresh%", "category": "Git", "icon": "$(refresh)" }, { "command": "git.openChange", "title": "%command.openChange%", "category": "Git", "icon": "$(compare-changes)" }, { "command": "git.openAllChanges", "title": "%command.openAllChanges%", "category": "Git" }, { "command": "git.openFile", "title": "%command.openFile%", "category": "Git", "icon": "$(go-to-file)" }, { "command": "git.openFile2", "title": "%command.openFile%", "category": "Git", "icon": "$(go-to-file)" }, { "command": "git.openHEADFile", "title": "%command.openHEADFile%", "category": "Git" }, { "command": "git.stage", "title": "%command.stage%", "category": "Git", "icon": "$(add)" }, { "command": "git.stageAll", "title": "%command.stageAll%", "category": "Git", "icon": "$(add)" }, { "command": "git.stageAllTracked", "title": "%command.stageAllTracked%", "category": "Git", "icon": "$(add)" }, { "command": "git.stageAllUntracked", "title": "%command.stageAllUntracked%", "category": "Git", "icon": "$(add)" }, { "command": "git.stageAllMerge", "title": "%command.stageAllMerge%", "category": "Git", "icon": "$(add)" }, { "command": "git.stageSelectedRanges", "title": "%command.stageSelectedRanges%", "category": "Git" }, { "command": "git.revertSelectedRanges", "title": "%command.revertSelectedRanges%", "category": "Git" }, { "command": "git.stageChange", "title": "%command.stageChange%", "category": "Git", "icon": "$(add)" }, { "command": "git.revertChange", "title": "%command.revertChange%", "category": "Git", "icon": "$(discard)" }, { "command": "git.unstage", "title": "%command.unstage%", "category": "Git", "icon": "$(remove)" }, { "command": "git.unstageAll", "title": "%command.unstageAll%", "category": "Git", "icon": "$(remove)" }, { "command": "git.unstageSelectedRanges", "title": "%command.unstageSelectedRanges%", "category": "Git" }, { "command": "git.clean", "title": "%command.clean%", "category": "Git", "icon": "$(discard)" }, { "command": "git.cleanAll", "title": "%command.cleanAll%", "category": "Git", "icon": "$(discard)" }, { "command": "git.cleanAllTracked", "title": "%command.cleanAllTracked%", "category": "Git", "icon": "$(discard)" }, { "command": "git.cleanAllUntracked", "title": "%command.cleanAllUntracked%", "category": "Git", "icon": "$(discard)" }, { "command": "git.rename", "title": "%command.rename%", "category": "Git", "icon": "$(discard)" }, { "command": "git.commit", "title": "%command.commit%", "category": "Git", "icon": "$(check)" }, { "command": "git.commitStaged", "title": "%command.commitStaged%", "category": "Git" }, { "command": "git.commitEmpty", "title": "%command.commitEmpty%", "category": "Git" }, { "command": "git.commitStagedSigned", "title": "%command.commitStagedSigned%", "category": "Git" }, { "command": "git.commitStagedAmend", "title": "%command.commitStagedAmend%", "category": "Git" }, { "command": "git.commitAll", "title": "%command.commitAll%", "category": "Git" }, { "command": "git.commitAllSigned", "title": "%command.commitAllSigned%", "category": "Git" }, { "command": "git.commitAllAmend", "title": "%command.commitAllAmend%", "category": "Git" }, { "command": "git.commitNoVerify", "title": "%command.commitNoVerify%", "category": "Git", "icon": "$(check)" }, { "command": "git.commitStagedNoVerify", "title": "%command.commitStagedNoVerify%", "category": "Git" }, { "command": "git.commitEmptyNoVerify", "title": "%command.commitEmptyNoVerify%", "category": "Git" }, { "command": "git.commitStagedSignedNoVerify", "title": "%command.commitStagedSignedNoVerify%", "category": "Git" }, { "command": "git.commitStagedAmendNoVerify", "title": "%command.commitStagedAmendNoVerify%", "category": "Git" }, { "command": "git.commitAllNoVerify", "title": "%command.commitAllNoVerify%", "category": "Git" }, { "command": "git.commitAllSignedNoVerify", "title": "%command.commitAllSignedNoVerify%", "category": "Git" }, { "command": "git.commitAllAmendNoVerify", "title": "%command.commitAllAmendNoVerify%", "category": "Git" }, { "command": "git.restoreCommitTemplate", "title": "%command.restoreCommitTemplate%", "category": "Git" }, { "command": "git.undoCommit", "title": "%command.undoCommit%", "category": "Git" }, { "command": "git.checkout", "title": "%command.checkout%", "category": "Git" }, { "command": "git.checkoutDetached", "title": "%command.checkoutDetached%", "category": "Git" }, { "command": "git.branch", "title": "%command.branch%", "category": "Git" }, { "command": "git.branchFrom", "title": "%command.branchFrom%", "category": "Git" }, { "command": "git.deleteBranch", "title": "%command.deleteBranch%", "category": "Git" }, { "command": "git.renameBranch", "title": "%command.renameBranch%", "category": "Git" }, { "command": "git.merge", "title": "%command.merge%", "category": "Git" }, { "command": "git.rebase", "title": "%command.rebase%", "category": "Git" }, { "command": "git.createTag", "title": "%command.createTag%", "category": "Git" }, { "command": "git.deleteTag", "title": "%command.deleteTag%", "category": "Git" }, { "command": "git.fetch", "title": "%command.fetch%", "category": "Git" }, { "command": "git.fetchPrune", "title": "%command.fetchPrune%", "category": "Git" }, { "command": "git.fetchAll", "title": "%command.fetchAll%", "category": "Git" }, { "command": "git.pull", "title": "%command.pull%", "category": "Git" }, { "command": "git.pullRebase", "title": "%command.pullRebase%", "category": "Git" }, { "command": "git.pullFrom", "title": "%command.pullFrom%", "category": "Git" }, { "command": "git.push", "title": "%command.push%", "category": "Git" }, { "command": "git.pushForce", "title": "%command.pushForce%", "category": "Git" }, { "command": "git.pushTo", "title": "%command.pushTo%", "category": "Git" }, { "command": "git.pushToForce", "title": "%command.pushToForce%", "category": "Git" }, { "command": "git.pushTags", "title": "%command.pushTags%", "category": "Git" }, { "command": "git.pushWithTags", "title": "%command.pushFollowTags%", "category": "Git" }, { "command": "git.pushWithTagsForce", "title": "%command.pushFollowTagsForce%", "category": "Git" }, { "command": "git.cherryPick", "title": "%command.cherryPick%", "category": "Git" }, { "command": "git.addRemote", "title": "%command.addRemote%", "category": "Git" }, { "command": "git.removeRemote", "title": "%command.removeRemote%", "category": "Git" }, { "command": "git.sync", "title": "%command.sync%", "category": "Git" }, { "command": "git.syncRebase", "title": "%command.syncRebase%", "category": "Git" }, { "command": "git.publish", "title": "%command.publish%", "category": "Git" }, { "command": "git.showOutput", "title": "%command.showOutput%", "category": "Git" }, { "command": "git.ignore", "title": "%command.ignore%", "category": "Git" }, { "command": "git.revealInExplorer", "title": "%command.revealInExplorer%", "category": "Git" }, { "command": "git.stashIncludeUntracked", "title": "%command.stashIncludeUntracked%", "category": "Git" }, { "command": "git.stash", "title": "%command.stash%", "category": "Git" }, { "command": "git.stashPop", "title": "%command.stashPop%", "category": "Git" }, { "command": "git.stashPopLatest", "title": "%command.stashPopLatest%", "category": "Git" }, { "command": "git.stashApply", "title": "%command.stashApply%", "category": "Git" }, { "command": "git.stashApplyLatest", "title": "%command.stashApplyLatest%", "category": "Git" }, { "command": "git.stashDrop", "title": "%command.stashDrop%", "category": "Git" }, { "command": "git.timeline.openDiff", "title": "%command.timelineOpenDiff%", "icon": "$(compare-changes)", "category": "Git" }, { "command": "git.timeline.copyCommitId", "title": "%command.timelineCopyCommitId%", "category": "Git" }, { "command": "git.timeline.copyCommitMessage", "title": "%command.timelineCopyCommitMessage%", "category": "Git" }, { "command": "git.timeline.selectForCompare", "title": "%command.timelineSelectForCompare%", "category": "Git" }, { "command": "git.timeline.compareWithSelected", "title": "%command.timelineCompareWithSelected%", "category": "Git" }, { "command": "git.rebaseAbort", "title": "%command.rebaseAbort%", "category": "Git" }], "keybindings": [{ "command": "git.stageSelectedRanges", "key": "ctrl+k ctrl+alt+s", "mac": "cmd+k cmd+alt+s", "when": "isInDiffEditor" }, { "command": "git.unstageSelectedRanges", "key": "ctrl+k ctrl+n", "mac": "cmd+k cmd+n", "when": "isInDiffEditor" }, { "command": "git.revertSelectedRanges", "key": "ctrl+k ctrl+r", "mac": "cmd+k cmd+r", "when": "isInDiffEditor" }], "menus": { "commandPalette": [{ "command": "git.setLogLevel", "when": "config.git.enabled && !git.missing" }, { "command": "git.clone", "when": "config.git.enabled && !git.missing" }, { "command": "git.cloneRecursive", "when": "config.git.enabled && !git.missing" }, { "command": "git.init", "when": "config.git.enabled && !git.missing" }, { "command": "git.openRepository", "when": "config.git.enabled && !git.missing" }, { "command": "git.close", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.refresh", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.openFile", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.openHEADFile", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.openChange", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stage", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageAll", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageAllTracked", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageAllUntracked", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageAllMerge", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageSelectedRanges", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stageChange", "when": "false" }, { "command": "git.revertSelectedRanges", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.revertChange", "when": "false" }, { "command": "git.openFile2", "when": "false" }, { "command": "git.unstage", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.unstageAll", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.unstageSelectedRanges", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.clean", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.cleanAll", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.cleanAllTracked", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.cleanAllUntracked", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.rename", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file" }, { "command": "git.commit", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitStaged", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitEmpty", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitStagedSigned", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitStagedAmend", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitAll", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitAllSigned", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.commitAllAmend", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.rebaseAbort", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress" }, { "command": "git.commitNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitStagedNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitEmptyNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitStagedSignedNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitStagedAmendNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitAllNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitAllSignedNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.commitAllAmendNoVerify", "when": "config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0" }, { "command": "git.restoreCommitTemplate", "when": "false" }, { "command": "git.revealInExplorer", "when": "false" }, { "command": "git.undoCommit", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.checkout", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.branch", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.branchFrom", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.deleteBranch", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.renameBranch", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.cherryPick", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pull", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pullFrom", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pullRebase", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.merge", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.rebase", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.createTag", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.deleteTag", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.fetch", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.fetchPrune", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.fetchAll", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.push", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pushForce", "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0" }, { "command": "git.pushTo", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pushToForce", "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0" }, { "command": "git.pushWithTags", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.pushWithTagsForce", "when": "config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0" }, { "command": "git.pushTags", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.addRemote", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.removeRemote", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.sync", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.syncRebase", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.publish", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.showOutput", "when": "config.git.enabled" }, { "command": "git.ignore", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashIncludeUntracked", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stash", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashPop", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashPopLatest", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashApply", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashApplyLatest", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.stashDrop", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0" }, { "command": "git.timeline.openDiff", "when": "false" }, { "command": "git.timeline.copyCommitId", "when": "false" }, { "command": "git.timeline.copyCommitMessage", "when": "false" }, { "command": "git.timeline.selectForCompare", "when": "false" }, { "command": "git.timeline.compareWithSelected", "when": "false" }], "scm/title": [{ "command": "git.commit", "group": "navigation", "when": "scmProvider == git" }, { "command": "git.refresh", "group": "navigation", "when": "scmProvider == git" }, { "command": "git.pull", "group": "1_header@1", "when": "scmProvider == git" }, { "command": "git.push", "group": "1_header@2", "when": "scmProvider == git" }, { "command": "git.clone", "group": "1_header@3", "when": "scmProvider == git" }, { "command": "git.checkout", "group": "1_header@4", "when": "scmProvider == git" }, { "submenu": "git.commit", "group": "2_main@1", "when": "scmProvider == git" }, { "submenu": "git.changes", "group": "2_main@2", "when": "scmProvider == git" }, { "submenu": "git.pullpush", "group": "2_main@3", "when": "scmProvider == git" }, { "submenu": "git.branch", "group": "2_main@4", "when": "scmProvider == git" }, { "submenu": "git.remotes", "group": "2_main@5", "when": "scmProvider == git" }, { "submenu": "git.stash", "group": "2_main@6", "when": "scmProvider == git" }, { "submenu": "git.tags", "group": "2_main@7", "when": "scmProvider == git" }, { "command": "git.showOutput", "group": "3_footer", "when": "scmProvider == git" }], "scm/sourceControl": [{ "command": "git.close", "group": "navigation", "when": "scmProvider == git" }], "scm/resourceGroup/context": [{ "command": "git.stageAllMerge", "when": "scmProvider == git && scmResourceGroup == merge", "group": "1_modification" }, { "command": "git.stageAllMerge", "when": "scmProvider == git && scmResourceGroup == merge", "group": "inline@2" }, { "command": "git.unstageAll", "when": "scmProvider == git && scmResourceGroup == index", "group": "1_modification" }, { "command": "git.unstageAll", "when": "scmProvider == git && scmResourceGroup == index", "group": "inline@2" }, { "command": "git.cleanAll", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed", "group": "1_modification" }, { "command": "git.stageAll", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed", "group": "1_modification" }, { "command": "git.cleanAll", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed", "group": "inline@2" }, { "command": "git.stageAll", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed", "group": "inline@2" }, { "command": "git.cleanAllTracked", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed", "group": "1_modification" }, { "command": "git.stageAllTracked", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed", "group": "1_modification" }, { "command": "git.cleanAllTracked", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed", "group": "inline@2" }, { "command": "git.stageAllTracked", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed", "group": "inline@2" }, { "command": "git.cleanAllUntracked", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification" }, { "command": "git.stageAllUntracked", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification" }, { "command": "git.cleanAllUntracked", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "inline@2" }, { "command": "git.stageAllUntracked", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "inline@2" }], "scm/resourceFolder/context": [{ "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == merge", "group": "1_modification" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == merge", "group": "inline@2" }, { "command": "git.unstage", "when": "scmProvider == git && scmResourceGroup == index", "group": "1_modification" }, { "command": "git.unstage", "when": "scmProvider == git && scmResourceGroup == index", "group": "inline@2" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "inline@2" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "inline@2" }, { "command": "git.ignore", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification@3" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "inline@2" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "inline@2" }, { "command": "git.ignore", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification@3" }], "scm/resourceState/context": [{ "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == merge", "group": "1_modification" }, { "command": "git.openFile", "when": "scmProvider == git && scmResourceGroup == merge", "group": "navigation" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == merge", "group": "inline@2" }, { "command": "git.revealInExplorer", "when": "scmProvider == git && scmResourceGroup == merge", "group": "2_view" }, { "command": "git.openFile2", "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == index", "group": "navigation" }, { "command": "git.openFile", "when": "scmProvider == git && scmResourceGroup == index", "group": "navigation" }, { "command": "git.openHEADFile", "when": "scmProvider == git && scmResourceGroup == index", "group": "navigation" }, { "command": "git.unstage", "when": "scmProvider == git && scmResourceGroup == index", "group": "1_modification" }, { "command": "git.unstage", "when": "scmProvider == git && scmResourceGroup == index", "group": "inline@2" }, { "command": "git.revealInExplorer", "when": "scmProvider == git && scmResourceGroup == index", "group": "2_view" }, { "command": "git.openFile2", "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "navigation" }, { "command": "git.openHEADFile", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "navigation" }, { "command": "git.openFile", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "navigation" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "inline@2" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "inline@2" }, { "command": "git.openFile2", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.ignore", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "1_modification@3" }, { "command": "git.revealInExplorer", "when": "scmProvider == git && scmResourceGroup == workingTree", "group": "2_view" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "navigation" }, { "command": "git.openHEADFile", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "navigation" }, { "command": "git.openFile", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "navigation" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository", "group": "1_modification" }, { "command": "git.clean", "when": "scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository", "group": "inline@2" }, { "command": "git.stage", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "inline@2" }, { "command": "git.openFile2", "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.openChange", "when": "scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick", "group": "inline@1" }, { "command": "git.ignore", "when": "scmProvider == git && scmResourceGroup == untracked", "group": "1_modification@3" }], "editor/title": [{ "command": "git.openFile", "group": "navigation", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.openFile", "group": "navigation", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInNotebookTextDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.openChange", "group": "navigation", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && resourceScheme == file" }, { "command": "git.stageSelectedRanges", "group": "2_git@1", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.unstageSelectedRanges", "group": "2_git@2", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.revertSelectedRanges", "group": "2_git@3", "when": "config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }], "editor/context": [{ "command": "git.stageSelectedRanges", "group": "2_git@1", "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.unstageSelectedRanges", "group": "2_git@2", "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }, { "command": "git.revertSelectedRanges", "group": "2_git@3", "when": "isInDiffRightEditor && !isInEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/" }], "scm/change/title": [{ "command": "git.stageChange", "when": "config.git.enabled && !git.missing && originalResourceScheme == git" }, { "command": "git.revertChange", "when": "config.git.enabled && !git.missing && originalResourceScheme == git" }], "timeline/item/context": [{ "command": "git.timeline.openDiff", "group": "1_actions", "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection" }, { "command": "git.timeline.compareWithSelected", "group": "3_compare@1", "when": "config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection" }, { "command": "git.timeline.selectForCompare", "group": "3_compare@2", "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection" }, { "command": "git.timeline.copyCommitId", "group": "5_copy@1", "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection" }, { "command": "git.timeline.copyCommitMessage", "group": "5_copy@2", "when": "config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection" }], "git.commit": [{ "command": "git.commit", "group": "1_commit@1" }, { "command": "git.commitStaged", "group": "1_commit@2" }, { "command": "git.commitAll", "group": "1_commit@3" }, { "command": "git.undoCommit", "group": "1_commit@4" }, { "command": "git.rebaseAbort", "group": "1_commit@5" }, { "command": "git.commitNoVerify", "group": "1_commit@6", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitStagedNoVerify", "group": "1_commit@7", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitAllNoVerify", "group": "1_commit@8", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitStagedAmend", "group": "2_amend@1" }, { "command": "git.commitAllAmend", "group": "2_amend@2" }, { "command": "git.commitStagedAmendNoVerify", "group": "2_amend@3", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitAllAmendNoVerify", "group": "2_amend@4", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitStagedSigned", "group": "3_signoff@1" }, { "command": "git.commitAllSigned", "group": "3_signoff@2" }, { "command": "git.commitStagedSignedNoVerify", "group": "3_signoff@3", "when": "config.git.allowNoVerifyCommit" }, { "command": "git.commitAllSignedNoVerify", "group": "3_signoff@4", "when": "config.git.allowNoVerifyCommit" }], "git.changes": [{ "command": "git.stageAll", "group": "changes@1" }, { "command": "git.unstageAll", "group": "changes@2" }, { "command": "git.cleanAll", "group": "changes@3" }], "git.pullpush": [{ "command": "git.sync", "group": "1_sync@1" }, { "command": "git.syncRebase", "when": "gitState == idle", "group": "1_sync@2" }, { "command": "git.pull", "group": "2_pull@1" }, { "command": "git.pullRebase", "group": "2_pull@2" }, { "command": "git.pullFrom", "group": "2_pull@3" }, { "command": "git.push", "group": "3_push@1" }, { "command": "git.pushForce", "when": "config.git.allowForcePush", "group": "3_push@2" }, { "command": "git.pushTo", "group": "3_push@3" }, { "command": "git.pushToForce", "when": "config.git.allowForcePush", "group": "3_push@4" }, { "command": "git.fetch", "group": "4_fetch@1" }, { "command": "git.fetchPrune", "group": "4_fetch@2" }, { "command": "git.fetchAll", "group": "4_fetch@3" }], "git.branch": [{ "command": "git.merge", "group": "branch@1" }, { "command": "git.rebase", "group": "branch@2" }, { "command": "git.branch", "group": "branch@3" }, { "command": "git.branchFrom", "group": "branch@4" }, { "command": "git.renameBranch", "group": "branch@5" }, { "command": "git.publish", "group": "branch@6" }], "git.remotes": [{ "command": "git.addRemote", "group": "remote@1" }, { "command": "git.removeRemote", "group": "remote@2" }], "git.stash": [{ "command": "git.stash", "group": "stash@1" }, { "command": "git.stashIncludeUntracked", "group": "stash@2" }, { "command": "git.stashApplyLatest", "group": "stash@3" }, { "command": "git.stashApply", "group": "stash@4" }, { "command": "git.stashPopLatest", "group": "stash@5" }, { "command": "git.stashPop", "group": "stash@6" }, { "command": "git.stashDrop", "group": "stash@7" }], "git.tags": [{ "command": "git.createTag", "group": "tags@1" }, { "command": "git.deleteTag", "group": "tags@2" }] }, "submenus": [{ "id": "git.commit", "label": "%submenu.commit%" }, { "id": "git.changes", "label": "%submenu.changes%" }, { "id": "git.pullpush", "label": "%submenu.pullpush%" }, { "id": "git.branch", "label": "%submenu.branch%" }, { "id": "git.remotes", "label": "%submenu.remotes%" }, { "id": "git.stash", "label": "%submenu.stash%" }, { "id": "git.tags", "label": "%submenu.tags%" }], "configuration": { "title": "Git", "properties": { "git.enabled": { "type": "boolean", "scope": "resource", "description": "%config.enabled%", "default": true }, "git.path": { "type": ["string", "null", "array"], "markdownDescription": "%config.path%", "default": null, "scope": "machine" }, "git.autoRepositoryDetection": { "type": ["boolean", "string"], "enum": [true, false, "subFolders", "openEditors"], "enumDescriptions": ["%config.autoRepositoryDetection.true%", "%config.autoRepositoryDetection.false%", "%config.autoRepositoryDetection.subFolders%", "%config.autoRepositoryDetection.openEditors%"], "description": "%config.autoRepositoryDetection%", "default": true }, "git.autorefresh": { "type": "boolean", "description": "%config.autorefresh%", "default": true }, "git.autofetch": { "anyOf": [{ "type": "boolean" }, { "type": "string", "enum": ["all"] }], "scope": "resource", "description": "%config.autofetch%", "default": false, "tags": ["usesOnlineServices"] }, "git.autofetchPeriod": { "type": "number", "scope": "resource", "description": "%config.autofetchPeriod%", "default": 180 }, "git.branchValidationRegex": { "type": "string", "description": "%config.branchValidationRegex%", "default": "" }, "git.branchWhitespaceChar": { "type": "string", "description": "%config.branchWhitespaceChar%", "default": "-" }, "git.confirmSync": { "type": "boolean", "description": "%config.confirmSync%", "default": true }, "git.countBadge": { "type": "string", "enum": ["all", "tracked", "off"], "enumDescriptions": ["%config.countBadge.all%", "%config.countBadge.tracked%", "%config.countBadge.off%"], "description": "%config.countBadge%", "default": "all", "scope": "resource" }, "git.checkoutType": { "type": "array", "items": { "type": "string", "enum": ["local", "tags", "remote"], "enumDescriptions": ["%config.checkoutType.local%", "%config.checkoutType.tags%", "%config.checkoutType.remote%"] }, "uniqueItems": true, "markdownDescription": "%config.checkoutType%", "default": ["local", "remote", "tags"] }, "git.ignoreLegacyWarning": { "type": "boolean", "description": "%config.ignoreLegacyWarning%", "default": false }, "git.ignoreMissingGitWarning": { "type": "boolean", "description": "%config.ignoreMissingGitWarning%", "default": false }, "git.ignoreWindowsGit27Warning": { "type": "boolean", "description": "%config.ignoreWindowsGit27Warning%", "default": false }, "git.ignoreLimitWarning": { "type": "boolean", "description": "%config.ignoreLimitWarning%", "default": false }, "git.ignoreRebaseWarning": { "type": "boolean", "description": "%config.ignoreRebaseWarning%", "default": false }, "git.defaultCloneDirectory": { "type": ["string", "null"], "default": null, "scope": "machine", "description": "%config.defaultCloneDirectory%" }, "git.enableSmartCommit": { "type": "boolean", "scope": "resource", "description": "%config.enableSmartCommit%", "default": false }, "git.smartCommitChanges": { "type": "string", "enum": ["all", "tracked"], "enumDescriptions": ["%config.smartCommitChanges.all%", "%config.smartCommitChanges.tracked%"], "scope": "resource", "description": "%config.smartCommitChanges%", "default": "all" }, "git.suggestSmartCommit": { "type": "boolean", "scope": "resource", "description": "%config.suggestSmartCommit%", "default": true }, "git.enableCommitSigning": { "type": "boolean", "scope": "resource", "description": "%config.enableCommitSigning%", "default": false }, "git.confirmEmptyCommits": { "type": "boolean", "scope": "resource", "description": "%config.confirmEmptyCommits%", "default": true }, "git.decorations.enabled": { "type": "boolean", "default": true, "description": "%config.decorations.enabled%" }, "git.enableStatusBarSync": { "type": "boolean", "default": true, "description": "%config.enableStatusBarSync%", "scope": "resource" }, "git.followTagsWhenSync": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.followTagsWhenSync%" }, "git.promptToSaveFilesBeforeStash": { "type": "string", "enum": ["always", "staged", "never"], "enumDescriptions": ["%config.promptToSaveFilesBeforeStash.always%", "%config.promptToSaveFilesBeforeStash.staged%", "%config.promptToSaveFilesBeforeStash.never%"], "scope": "resource", "default": "always", "description": "%config.promptToSaveFilesBeforeStash%" }, "git.promptToSaveFilesBeforeCommit": { "type": "string", "enum": ["always", "staged", "never"], "enumDescriptions": ["%config.promptToSaveFilesBeforeCommit.always%", "%config.promptToSaveFilesBeforeCommit.staged%", "%config.promptToSaveFilesBeforeCommit.never%"], "scope": "resource", "default": "always", "description": "%config.promptToSaveFilesBeforeCommit%" }, "git.postCommitCommand": { "type": "string", "enum": ["none", "push", "sync"], "enumDescriptions": ["%config.postCommitCommand.none%", "%config.postCommitCommand.push%", "%config.postCommitCommand.sync%"], "markdownDescription": "%config.postCommitCommand%", "scope": "resource", "default": "none" }, "git.openAfterClone": { "type": "string", "enum": ["always", "alwaysNewWindow", "whenNoFolderOpen", "prompt"], "enumDescriptions": ["%config.openAfterClone.always%", "%config.openAfterClone.alwaysNewWindow%", "%config.openAfterClone.whenNoFolderOpen%", "%config.openAfterClone.prompt%"], "default": "prompt", "description": "%config.openAfterClone%" }, "git.showInlineOpenFileAction": { "type": "boolean", "default": true, "description": "%config.showInlineOpenFileAction%" }, "git.showPushSuccessNotification": { "type": "boolean", "description": "%config.showPushSuccessNotification%", "default": false }, "git.inputValidation": { "type": "string", "enum": ["always", "warn", "off"], "default": "warn", "description": "%config.inputValidation%" }, "git.inputValidationLength": { "type": "number", "default": 72, "description": "%config.inputValidationLength%" }, "git.inputValidationSubjectLength": { "type": ["number", "null"], "default": 50, "description": "%config.inputValidationSubjectLength%" }, "git.detectSubmodules": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.detectSubmodules%" }, "git.detectSubmodulesLimit": { "type": "number", "scope": "resource", "default": 10, "description": "%config.detectSubmodulesLimit%" }, "git.alwaysShowStagedChangesResourceGroup": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.alwaysShowStagedChangesResourceGroup%" }, "git.alwaysSignOff": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.alwaysSignOff%" }, "git.ignoreSubmodules": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.ignoreSubmodules%" }, "git.ignoredRepositories": { "type": "array", "items": { "type": "string" }, "default": [], "scope": "window", "description": "%config.ignoredRepositories%" }, "git.scanRepositories": { "type": "array", "items": { "type": "string" }, "default": [], "scope": "resource", "description": "%config.scanRepositories%" }, "git.showProgress": { "type": "boolean", "description": "%config.showProgress%", "default": true, "scope": "resource" }, "git.rebaseWhenSync": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.rebaseWhenSync%" }, "git.fetchOnPull": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.fetchOnPull%" }, "git.pruneOnFetch": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.pruneOnFetch%" }, "git.pullTags": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.pullTags%" }, "git.autoStash": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.autoStash%" }, "git.allowForcePush": { "type": "boolean", "default": false, "description": "%config.allowForcePush%" }, "git.useForcePushWithLease": { "type": "boolean", "default": true, "description": "%config.useForcePushWithLease%" }, "git.confirmForcePush": { "type": "boolean", "default": true, "description": "%config.confirmForcePush%" }, "git.allowNoVerifyCommit": { "type": "boolean", "default": false, "description": "%config.allowNoVerifyCommit%" }, "git.confirmNoVerifyCommit": { "type": "boolean", "default": true, "description": "%config.confirmNoVerifyCommit%" }, "git.openDiffOnClick": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.openDiffOnClick%" }, "git.supportCancellation": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.supportCancellation%" }, "git.branchSortOrder": { "type": "string", "enum": ["committerdate", "alphabetically"], "default": "committerdate", "description": "%config.branchSortOrder%" }, "git.untrackedChanges": { "type": "string", "enum": ["mixed", "separate", "hidden"], "enumDescriptions": ["%config.untrackedChanges.mixed%", "%config.untrackedChanges.separate%", "%config.untrackedChanges.hidden%"], "default": "mixed", "description": "%config.untrackedChanges%", "scope": "resource" }, "git.requireGitUserConfig": { "type": "boolean", "description": "%config.requireGitUserConfig%", "default": true }, "git.showCommitInput": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.showCommitInput%" }, "git.terminalAuthentication": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.terminalAuthentication%" }, "git.useCommitInputAsStashMessage": { "type": "boolean", "scope": "resource", "default": false, "description": "%config.useCommitInputAsStashMessage%" }, "git.githubAuthentication": { "deprecationMessage": "This setting is now deprecated, please use `github.gitAuthentication` instead." }, "git.timeline.date": { "enum": ["committed", "authored"], "enumDescriptions": ["%config.timeline.date.committed%", "%config.timeline.date.authored%"], "default": "committed", "description": "%config.timeline.date%", "scope": "window" }, "git.timeline.showAuthor": { "type": "boolean", "default": true, "description": "%config.timeline.showAuthor%", "scope": "window" } } }, "colors": [{ "id": "gitDecoration.addedResourceForeground", "description": "%colors.added%", "defaults": { "light": "#587c0c", "dark": "#81b88b", "highContrast": "#1b5225" } }, { "id": "gitDecoration.modifiedResourceForeground", "description": "%colors.modified%", "defaults": { "light": "#895503", "dark": "#E2C08D", "highContrast": "#E2C08D" } }, { "id": "gitDecoration.deletedResourceForeground", "description": "%colors.deleted%", "defaults": { "light": "#ad0707", "dark": "#c74e39", "highContrast": "#c74e39" } }, { "id": "gitDecoration.renamedResourceForeground", "description": "%colors.renamed%", "defaults": { "light": "#007100", "dark": "#73C991", "highContrast": "#73C991" } }, { "id": "gitDecoration.untrackedResourceForeground", "description": "%colors.untracked%", "defaults": { "light": "#007100", "dark": "#73C991", "highContrast": "#73C991" } }, { "id": "gitDecoration.ignoredResourceForeground", "description": "%colors.ignored%", "defaults": { "light": "#8E8E90", "dark": "#8C8C8C", "highContrast": "#A7A8A9" } }, { "id": "gitDecoration.stageModifiedResourceForeground", "description": "%colors.stageModified%", "defaults": { "light": "#895503", "dark": "#E2C08D", "highContrast": "#E2C08D" } }, { "id": "gitDecoration.stageDeletedResourceForeground", "description": "%colors.stageDeleted%", "defaults": { "light": "#ad0707", "dark": "#c74e39", "highContrast": "#c74e39" } }, { "id": "gitDecoration.conflictingResourceForeground", "description": "%colors.conflict%", "defaults": { "light": "#ad0707", "dark": "#e4676b", "highContrast": "#c74e39" } }, { "id": "gitDecoration.submoduleResourceForeground", "description": "%colors.submodule%", "defaults": { "light": "#1258a7", "dark": "#8db9e2", "highContrast": "#8db9e2" } }], "languages": [{ "id": "git-commit", "aliases": ["Git Commit Message", "git-commit"], "filenames": ["COMMIT_EDITMSG", "MERGE_MSG"], "configuration": "./languages/git-commit.language-configuration.json" }, { "id": "git-rebase", "aliases": ["Git Rebase Message", "git-rebase"], "filenames": ["git-rebase-todo"], "configuration": "./languages/git-rebase.language-configuration.json" }, { "id": "diff", "aliases": ["Diff", "diff"], "extensions": [".diff", ".patch", ".rej"], "configuration": "./languages/diff.language-configuration.json" }, { "id": "ignore", "aliases": ["Ignore", "ignore"], "extensions": [".gitignore_global", ".gitignore"], "configuration": "./languages/ignore.language-configuration.json" }], "grammars": [{ "language": "git-commit", "scopeName": "text.git-commit", "path": "./syntaxes/git-commit.tmLanguage.json" }, { "language": "git-rebase", "scopeName": "text.git-rebase", "path": "./syntaxes/git-rebase.tmLanguage.json" }, { "language": "diff", "scopeName": "source.diff", "path": "./syntaxes/diff.tmLanguage.json" }, { "language": "ignore", "scopeName": "source.ignore", "path": "./syntaxes/ignore.tmLanguage.json" }], "configurationDefaults": { "[git-commit]": { "editor.rulers": [72], "workbench.editor.restoreViewState": false }, "[git-rebase]": { "workbench.editor.restoreViewState": false } }, "viewsWelcome": [{ "view": "scm", "contents": "%view.workbench.scm.disabled%", "when": "!config.git.enabled" }, { "view": "scm", "contents": "%view.workbench.scm.missing%", "when": "config.git.enabled && git.missing" }, { "view": "scm", "contents": "%view.workbench.scm.empty%", "when": "config.git.enabled && workbenchState == empty", "enablement": "git.state == initialized", "group": "2_open@1" }, { "view": "scm", "contents": "%view.workbench.scm.folder%", "when": "config.git.enabled && workbenchState == folder", "enablement": "git.state == initialized", "group": "5_scm@1" }, { "view": "scm", "contents": "%view.workbench.scm.workspace%", "when": "config.git.enabled && workbenchState == workspace && workspaceFolderCount != 0", "enablement": "git.state == initialized", "group": "5_scm@1" }, { "view": "scm", "contents": "%view.workbench.scm.emptyWorkspace%", "when": "config.git.enabled && workbenchState == workspace && workspaceFolderCount == 0", "enablement": "git.state == initialized", "group": "2_open@1" }, { "view": "explorer", "contents": "%view.workbench.cloneRepository%", "when": "config.git.enabled", "enablement": "git.state == initialized", "group": "5_scm@1" }] }, "dependencies": { "byline": "^5.0.0", "file-type": "^7.2.0", "iconv-lite-umd": "0.6.8", "jschardet": "2.2.1", "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.0.0", "vscode-uri": "^2.0.0", "which": "^1.3.0" }, "devDependencies": { "@types/byline": "4.2.31", "@types/file-type": "^5.2.1", "@types/mocha": "^8.2.0", "@types/node": "^12.19.9", "@types/which": "^1.0.28" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "git", "packageNLS": { "displayName": "Git", "description": "Git SCM Integration", "command.setLogLevel": "Set Log Level...", "command.clone": "Clone", "command.cloneRecursive": "Clone (Recursive)", "command.init": "Initialize Repository", "command.openRepository": "Open Repository", "command.close": "Close Repository", "command.refresh": "Refresh", "command.openChange": "Open Changes", "command.openAllChanges": "Open All Changes", "command.openFile": "Open File", "command.openHEADFile": "Open File (HEAD)", "command.stage": "Stage Changes", "command.stageAll": "Stage All Changes", "command.stageAllTracked": "Stage All Tracked Changes", "command.stageAllUntracked": "Stage All Untracked Changes", "command.stageAllMerge": "Stage All Merge Changes", "command.stageSelectedRanges": "Stage Selected Ranges", "command.revertSelectedRanges": "Revert Selected Ranges", "command.stageChange": "Stage Change", "command.revertChange": "Revert Change", "command.unstage": "Unstage Changes", "command.unstageAll": "Unstage All Changes", "command.unstageSelectedRanges": "Unstage Selected Ranges", "command.rename": "Rename", "command.clean": "Discard Changes", "command.cleanAll": "Discard All Changes", "command.cleanAllTracked": "Discard All Tracked Changes", "command.cleanAllUntracked": "Discard All Untracked Changes", "command.commit": "Commit", "command.commitStaged": "Commit Staged", "command.commitEmpty": "Commit Empty", "command.commitStagedSigned": "Commit Staged (Signed Off)", "command.commitStagedAmend": "Commit Staged (Amend)", "command.commitAll": "Commit All", "command.commitAllSigned": "Commit All (Signed Off)", "command.commitAllAmend": "Commit All (Amend)", "command.commitNoVerify": "Commit (No Verify)", "command.commitStagedNoVerify": "Commit Staged (No Verify)", "command.commitEmptyNoVerify": "Commit Empty (No Verify)", "command.commitStagedSignedNoVerify": "Commit Staged (Signed Off, No Verify)", "command.commitStagedAmendNoVerify": "Commit Staged (Amend, No Verify)", "command.commitAllNoVerify": "Commit All (No Verify)", "command.commitAllSignedNoVerify": "Commit All (Signed Off, No Verify)", "command.commitAllAmendNoVerify": "Commit All (Amend, No Verify)", "command.restoreCommitTemplate": "Restore Commit Template", "command.undoCommit": "Undo Last Commit", "command.checkout": "Checkout to...", "command.checkoutDetached": "Checkout to (Detached)...", "command.branch": "Create Branch...", "command.branchFrom": "Create Branch From...", "command.deleteBranch": "Delete Branch...", "command.renameBranch": "Rename Branch...", "command.cherryPick": "Cherry Pick...", "command.merge": "Merge Branch...", "command.rebase": "Rebase Branch...", "command.createTag": "Create Tag", "command.deleteTag": "Delete Tag", "command.fetch": "Fetch", "command.fetchPrune": "Fetch (Prune)", "command.fetchAll": "Fetch From All Remotes", "command.pull": "Pull", "command.pullRebase": "Pull (Rebase)", "command.pullFrom": "Pull from...", "command.push": "Push", "command.pushForce": "Push (Force)", "command.pushTo": "Push to...", "command.pushToForce": "Push to... (Force)", "command.pushFollowTags": "Push (Follow Tags)", "command.pushFollowTagsForce": "Push (Follow Tags, Force)", "command.pushTags": "Push Tags", "command.addRemote": "Add Remote...", "command.removeRemote": "Remove Remote", "command.sync": "Sync", "command.syncRebase": "Sync (Rebase)", "command.publish": "Publish Branch...", "command.showOutput": "Show Git Output", "command.ignore": "Add to .gitignore", "command.revealInExplorer": "Reveal in Side Bar", "command.rebaseAbort": "Abort Rebase", "command.stashIncludeUntracked": "Stash (Include Untracked)", "command.stash": "Stash", "command.stashPop": "Pop Stash...", "command.stashPopLatest": "Pop Latest Stash", "command.stashApply": "Apply Stash...", "command.stashApplyLatest": "Apply Latest Stash", "command.stashDrop": "Drop Stash...", "command.timelineOpenDiff": "Open Changes", "command.timelineCopyCommitId": "Copy Commit ID", "command.timelineCopyCommitMessage": "Copy Commit Message", "command.timelineSelectForCompare": "Select for Compare", "command.timelineCompareWithSelected": "Compare with Selected", "config.enabled": "Whether git is enabled.", "config.path": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.", "config.autoRepositoryDetection": "Configures when repositories should be automatically detected.", "config.autoRepositoryDetection.true": "Scan for both subfolders of the current opened folder and parent folders of open files.", "config.autoRepositoryDetection.false": "Disable automatic repository scanning.", "config.autoRepositoryDetection.subFolders": "Scan for subfolders of the currently opened folder.", "config.autoRepositoryDetection.openEditors": "Scan for parent folders of open files.", "config.autorefresh": "Whether auto refreshing is enabled.", "config.autofetch": "When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes", "config.autofetchPeriod": "Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.", "config.confirmSync": "Confirm before synchronizing git repositories.", "config.countBadge": "Controls the Git count badge.", "config.countBadge.all": "Count all changes.", "config.countBadge.tracked": "Count only tracked changes.", "config.countBadge.off": "Turn off counter.", "config.checkoutType": "Controls what type of git refs are listed when running `Checkout to...`.", "config.checkoutType.local": "Local branches", "config.checkoutType.tags": "Tags", "config.checkoutType.remote": "Remote branches", "config.branchValidationRegex": "A regular expression to validate new branch names.", "config.branchWhitespaceChar": "The character to replace whitespace in new branch names.", "config.ignoreLegacyWarning": "Ignores the legacy Git warning.", "config.ignoreMissingGitWarning": "Ignores the warning when Git is missing.", "config.ignoreWindowsGit27Warning": "Ignores the warning when Git 2.25 - 2.26 is installed on Windows.", "config.ignoreLimitWarning": "Ignores the warning when there are too many changes in a repository.", "config.ignoreRebaseWarning": "Ignores the warning when it looks like the branch might have been rebased when pulling.", "config.defaultCloneDirectory": "The default location to clone a git repository.", "config.enableSmartCommit": "Commit all changes when there are no staged changes.", "config.smartCommitChanges": "Control which changes are automatically staged by Smart Commit.", "config.smartCommitChanges.all": "Automatically stage all changes.", "config.smartCommitChanges.tracked": "Automatically stage tracked changes only.", "config.suggestSmartCommit": "Suggests to enable smart commit (commit all changes when there are no staged changes).", "config.enableCommitSigning": "Enables commit signing with GPG or X.509.", "config.discardAllScope": "Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.", "config.decorations.enabled": "Controls whether Git contributes colors and badges to the explorer and the open editors view.", "config.enableStatusBarSync": "Controls whether the Git Sync command appears in the status bar.", "config.followTagsWhenSync": "Follow push all tags when running the sync command.", "config.promptToSaveFilesBeforeStash": "Controls whether Git should check for unsaved files before stashing changes.", "config.promptToSaveFilesBeforeStash.always": "Check for any unsaved files.", "config.promptToSaveFilesBeforeStash.staged": "Check only for unsaved staged files.", "config.promptToSaveFilesBeforeStash.never": "Disable this check.", "config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.", "config.promptToSaveFilesBeforeCommit.always": "Check for any unsaved files.", "config.promptToSaveFilesBeforeCommit.staged": "Check only for unsaved staged files.", "config.promptToSaveFilesBeforeCommit.never": "Disable this check.", "config.postCommitCommand": "Runs a git command after a successful commit.", "config.postCommitCommand.none": "Don't run any command after a commit.", "config.postCommitCommand.push": "Run 'Git Push' after a successful commit.", "config.postCommitCommand.sync": "Run 'Git Sync' after a successful commit.", "config.openAfterClone": "Controls whether to open a repository automatically after cloning.", "config.openAfterClone.always": "Always open in current window.", "config.openAfterClone.alwaysNewWindow": "Always open in a new window.", "config.openAfterClone.whenNoFolderOpen": "Only open in current window when no folder is opened.", "config.openAfterClone.prompt": "Always prompt for action.", "config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.", "config.showPushSuccessNotification": "Controls whether to show a notification when a push is successful.", "config.inputValidation": "Controls when to show commit message input validation.", "config.inputValidationLength": "Controls the commit message length threshold for showing a warning.", "config.inputValidationSubjectLength": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.", "config.detectSubmodules": "Controls whether to automatically detect git submodules.", "config.detectSubmodulesLimit": "Controls the limit of git submodules detected.", "config.alwaysShowStagedChangesResourceGroup": "Always show the Staged Changes resource group.", "config.alwaysSignOff": "Controls the signoff flag for all commits.", "config.ignoreSubmodules": "Ignore modifications to submodules in the file tree.", "config.ignoredRepositories": "List of git repositories to ignore.", "config.scanRepositories": "List of paths to search for git repositories in.", "config.showProgress": "Controls whether git actions should show progress.", "config.rebaseWhenSync": "Force git to use rebase when running the sync command.", "config.confirmEmptyCommits": "Always confirm the creation of empty commits for the 'Git: Commit Empty' command.", "config.fetchOnPull": "When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.", "config.pullTags": "Fetch all tags when pulling.", "config.pruneOnFetch": "Prune when fetching.", "config.autoStash": "Stash any changes before pulling and restore them after successful pull.", "config.allowForcePush": "Controls whether force push (with or without lease) is enabled.", "config.useForcePushWithLease": "Controls whether force pushing uses the safer force-with-lease variant.", "config.confirmForcePush": "Controls whether to ask for confirmation before force-pushing.", "config.allowNoVerifyCommit": "Controls whether commits without running pre-commit and commit-msg hooks are allowed.", "config.confirmNoVerifyCommit": "Controls whether to ask for confirmation before commiting without verification.", "config.openDiffOnClick": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.", "config.supportCancellation": "Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.", "config.branchSortOrder": "Controls the sort order for branches.", "config.untrackedChanges": "Controls how untracked changes behave.", "config.untrackedChanges.mixed": "All changes, tracked and untracked, appear together and behave equally.", "config.untrackedChanges.separate": "Untracked changes appear separately in the Source Control view. They are also excluded from several actions.", "config.untrackedChanges.hidden": "Untracked changes are hidden and excluded from several actions.", "config.requireGitUserConfig": "Controls whether to require explicit Git user configuration or allow Git to guess if missing", "config.showCommitInput": "Controls whether to show the commit input in the Git source control panel.", "config.terminalAuthentication": "Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.", "config.timeline.showAuthor": "Controls whether to show the commit author in the Timeline view", "config.timeline.date": "Controls which date to use for items in the Timeline view", "config.timeline.date.committed": "Use the committed date", "config.timeline.date.authored": "Use the authored date", "config.useCommitInputAsStashMessage": "Controls whether to use the message from the commit input box as the default stash message.", "submenu.explorer": "Git", "submenu.commit": "Commit", "submenu.commit.amend": "Amend", "submenu.commit.signoff": "Sign Off", "submenu.changes": "Changes", "submenu.pullpush": "Pull, Push", "submenu.branch": "Branch", "submenu.remotes": "Remote", "submenu.stash": "Stash", "submenu.tags": "Tags", "colors.added": "Color for added resources.", "colors.modified": "Color for modified resources.", "colors.stageModified": "Color for modified resources which have been staged.", "colors.stageDeleted": "Color for deleted resources which have been staged.", "colors.deleted": "Color for deleted resources.", "colors.renamed": "Color for renamed or copied resources.", "colors.untracked": "Color for untracked resources.", "colors.ignored": "Color for ignored resources.", "colors.conflict": "Color for resources with conflicts.", "colors.submodule": "Color for submodule resources.", "view.workbench.scm.missing": "A valid git installation was not detected, more details can be found in the [git output](command:git.showOutput).\nPlease [install git](https://git-scm.com/), or learn more about how to use git and source control in VS Code in [our docs](https://aka.ms/vscode-scm).\nIf you're using a different version control system, you can [search the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) for additional extensions.", "view.workbench.scm.disabled": "If you would like to use git features, please enable git in your [settings](command:workbench.action.openSettings?%5B%22git.enabled%22%5D).\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).", "view.workbench.scm.empty": "In order to use git features, you can open a folder containing a git repository or clone from a URL.\n[Open Folder](command:vscode.openFolder)\n[Clone Repository](command:git.clone)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).", "view.workbench.scm.folder": "The folder currently open doesn't have a git repository. You can initialize a repository which will enable source control features powered by git.\n[Initialize Repository](command:git.init?%5Btrue%5D)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).", "view.workbench.scm.workspace": "The workspace currently open doesn't have any folders containing git repositories. You can initialize a repository on a folder which will enable source control features powered by git.\n[Initialize Repository](command:git.init)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).", "view.workbench.scm.emptyWorkspace": "The workspace currently open doesn't have any folders containing git repositories.\n[Add Folder to Workspace](command:workbench.action.addRootFolder)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).", "view.workbench.cloneRepository": "You can also clone a repository from a URL. To learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).\n[Clone Repository](command:git.clone 'Clone a repository once the git extension has activated')" } }, { "packageJSON": { "name": "git-ui", "displayName": "%displayName%", "description": "%description%", "publisher": "vscode", "license": "MIT", "version": "1.0.0", "engines": { "vscode": "^1.5.0" }, "extensionKind": ["ui"], "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "enableProposedApi": true, "categories": ["Other"], "activationEvents": ["onCommand:git.credential"], "main": "./out/main", "icon": "resources/icons/git.png", "scripts": { "compile": "gulp compile-extension:git-ui", "watch": "gulp watch-extension:git-ui" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "git-ui", "packageNLS": { "displayName": "Git UI", "description": "Git SCM UI Integration" } }, { "packageJSON": { "name": "github", "displayName": "%displayName%", "description": "%description%", "publisher": "vscode", "license": "MIT", "version": "0.0.1", "engines": { "vscode": "^1.41.0" }, "enableProposedApi": true, "categories": ["Other"], "activationEvents": ["*"], "extensionDependencies": ["vscode.git"], "main": "./out/extension.js", "contributes": { "commands": [{ "command": "github.publish", "title": "Publish to GitHub" }], "configuration": [{ "title": "GitHub", "properties": { "github.gitAuthentication": { "type": "boolean", "scope": "resource", "default": true, "description": "%config.gitAuthentication%" } } }], "viewsWelcome": [{ "view": "scm", "contents": "%welcome.publishFolder%", "when": "config.git.enabled && git.state == initialized && workbenchState == folder" }, { "view": "scm", "contents": "%welcome.publishWorkspaceFolder%", "when": "config.git.enabled && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0" }] }, "scripts": { "vscode:prepublish": "npm run compile", "compile": "gulp compile-extension:github", "watch": "gulp watch-extension:github" }, "dependencies": { "@octokit/rest": "^18.0.1", "tunnel": "^0.0.6", "vscode-nls": "^4.1.2" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "github", "packageNLS": { "displayName": "GitHub", "description": "GitHub", "config.gitAuthentication": "Controls whether to enable automatic GitHub authentication for git commands within VS Code.", "welcome.publishFolder": "You can also directly publish this folder to a GitHub repository. Once published, you'll have access to source control features powered by git and GitHub.\n[$(github) Publish to GitHub](command:github.publish)", "welcome.publishWorkspaceFolder": "You can also directly publish a workspace folder to a GitHub repository. Once published, you'll have access to source control features powered by git and GitHub.\n[$(github) Publish to GitHub](command:github.publish)" } }, { "packageJSON": { "name": "github-authentication", "displayName": "%displayName%", "description": "%description%", "publisher": "vscode", "license": "MIT", "version": "0.0.1", "engines": { "vscode": "^1.41.0" }, "enableProposedApi": true, "categories": ["Other"], "extensionKind": ["ui", "workspace", "web"], "activationEvents": ["onAuthenticationRequest:github"], "contributes": { "commands": [{ "command": "github.provide-token", "title": "Manually Provide Token" }], "menus": { "commandPalette": [{ "command": "github.provide-token", "when": "false" }] }, "authentication": [{ "label": "GitHub", "id": "github" }] }, "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "main": "./out/extension.js", "browser": "./dist/browser/extension.js", "scripts": { "compile": "gulp compile-extension:github-authentication", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch": "gulp watch-extension:github-authentication", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose", "vscode:prepublish": "npm run compile" }, "dependencies": { "node-fetch": "2.6.1", "uuid": "8.1.0", "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.1.2" }, "devDependencies": { "@types/node": "^12.19.9", "@types/node-fetch": "^2.5.7", "@types/uuid": "8.0.0" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "github-authentication", "packageNLS": { "displayName": "GitHub Authentication", "description": "GitHub Authentication Provider" } }, { "packageJSON": { "name": "go", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin jeff-hykin/better-go-syntax export/generated.tmLanguage.json ./syntaxes/go.tmLanguage.json" }, "contributes": { "languages": [{ "id": "go", "extensions": [".go"], "aliases": ["Go"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "go", "scopeName": "source.go", "path": "./syntaxes/go.tmLanguage.json" }], "configurationDefaults": { "[go]": { "editor.insertSpaces": false } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "go", "packageNLS": { "displayName": "Go Language Basics", "description": "Provides syntax highlighting and bracket matching in Go files." } }, { "packageJSON": { "name": "groovy", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/groovy.tmbundle Syntaxes/Groovy.tmLanguage ./syntaxes/groovy.tmLanguage.json" }, "contributes": { "languages": [{ "id": "groovy", "aliases": ["Groovy", "groovy"], "extensions": [".groovy", ".gvy", ".gradle", ".jenkinsfile", ".nf"], "filenames": ["Jenkinsfile"], "filenamePatterns": ["Jenkinsfile.*"], "firstLine": "^#!.*\\bgroovy\\b", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "groovy", "scopeName": "source.groovy", "path": "./syntaxes/groovy.tmLanguage.json" }], "snippets": [{ "language": "groovy", "path": "./snippets/groovy.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "groovy", "packageNLS": { "displayName": "Groovy Language Basics", "description": "Provides snippets, syntax highlighting and bracket matching in Groovy files." } }, { "packageJSON": { "name": "grunt", "publisher": "vscode", "description": "Extension to add Grunt capabilities to VS Code.", "displayName": "Grunt support for VS Code", "version": "1.0.0", "icon": "images/grunt.png", "license": "MIT", "engines": { "vscode": "*" }, "categories": ["Other"], "scripts": { "compile": "gulp compile-extension:grunt", "watch": "gulp watch-extension:grunt" }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "main": "./out/main", "activationEvents": ["onCommand:workbench.action.tasks.runTask"], "contributes": { "configuration": { "id": "grunt", "type": "object", "title": "Grunt", "properties": { "grunt.autoDetect": { "scope": "resource", "type": "string", "enum": ["off", "on"], "default": "on", "description": "%config.grunt.autoDetect%" } } }, "taskDefinitions": [{ "type": "grunt", "required": ["task"], "properties": { "task": { "type": "string", "description": "%grunt.taskDefinition.type.description%" }, "args": { "type": "array", "description": "%grunt.taskDefinition.args.description%" }, "file": { "type": "string", "description": "%grunt.taskDefinition.file.description%" } } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "grunt", "packageNLS": { "description": "Extension to add Grunt capabilities to VS Code.", "displayName": "Grunt support for VS Code", "config.grunt.autoDetect": "Controls whether auto detection of Grunt tasks is on or off. Default is on.", "grunt.taskDefinition.type.description": "The Grunt task to customize.", "grunt.taskDefinition.args.description": "Command line arguments to pass to the grunt task", "grunt.taskDefinition.file.description": "The Grunt file that provides the task. Can be omitted." } }, { "packageJSON": { "name": "gulp", "publisher": "vscode", "description": "%description%", "displayName": "%displayName%", "version": "1.0.0", "icon": "images/gulp.png", "license": "MIT", "engines": { "vscode": "*" }, "categories": ["Other"], "scripts": { "compile": "gulp compile-extension:gulp", "watch": "gulp watch-extension:gulp" }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "main": "./out/main", "activationEvents": ["onCommand:workbench.action.tasks.runTask"], "contributes": { "configuration": { "id": "gulp", "type": "object", "title": "Gulp", "properties": { "gulp.autoDetect": { "scope": "resource", "type": "string", "enum": ["off", "on"], "default": "on", "description": "%config.gulp.autoDetect%" } } }, "taskDefinitions": [{ "type": "gulp", "required": ["task"], "properties": { "task": { "type": "string", "description": "%gulp.taskDefinition.type.description%" }, "file": { "type": "string", "description": "%gulp.taskDefinition.file.description%" } } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "gulp", "packageNLS": { "description": "Extension to add Gulp capabilities to VSCode.", "displayName": "Gulp support for VSCode", "config.gulp.autoDetect": "Controls whether auto detection of Gulp tasks is on or off. Default is on.", "gulp.taskDefinition.type.description": "The Gulp task to customize.", "gulp.taskDefinition.file.description": "The Gulp file that provides the task. Can be omitted." } }, { "packageJSON": { "name": "handlebars", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin daaain/Handlebars grammars/Handlebars.json ./syntaxes/Handlebars.tmLanguage.json" }, "contributes": { "languages": [{ "id": "handlebars", "extensions": [".handlebars", ".hbs", ".hjs"], "aliases": ["Handlebars", "handlebars"], "mimetypes": ["text/x-handlebars-template"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "handlebars", "scopeName": "text.html.handlebars", "path": "./syntaxes/Handlebars.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "handlebars", "packageNLS": { "displayName": "Handlebars Language Basics", "description": "Provides syntax highlighting and bracket matching in Handlebars files." } }, { "packageJSON": { "name": "hlsl", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin tgjones/shaders-tmLanguage grammars/hlsl.json ./syntaxes/hlsl.tmLanguage.json" }, "contributes": { "languages": [{ "id": "hlsl", "extensions": [".hlsl", ".hlsli", ".fx", ".fxh", ".vsh", ".psh", ".cginc", ".compute"], "aliases": ["HLSL", "hlsl"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "hlsl", "path": "./syntaxes/hlsl.tmLanguage.json", "scopeName": "source.hlsl" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "hlsl", "packageNLS": { "displayName": "HLSL Language Basics", "description": "Provides syntax highlighting and bracket matching in HLSL files." } }, { "packageJSON": { "name": "html", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ./build/update-grammar.js" }, "contributes": { "languages": [{ "id": "html", "extensions": [".html", ".htm", ".shtml", ".xhtml", ".xht", ".mdoc", ".jsp", ".asp", ".aspx", ".jshtm", ".volt", ".ejs", ".rhtml"], "aliases": ["HTML", "htm", "html", "xhtml"], "mimetypes": ["text/html", "text/x-jshtm", "text/template", "text/ng-template", "application/xhtml+xml"], "configuration": "./language-configuration.json" }], "grammars": [{ "scopeName": "text.html.basic", "path": "./syntaxes/html.tmLanguage.json", "embeddedLanguages": { "text.html": "html", "source.css": "css", "source.js": "javascript", "source.python": "python", "source.smarty": "smarty" }, "tokenTypes": { "meta.tag string.quoted": "other" } }, { "language": "html", "scopeName": "text.html.derivative", "path": "./syntaxes/html-derivative.tmLanguage.json", "embeddedLanguages": { "text.html": "html", "source.css": "css", "source.js": "javascript", "source.python": "python", "source.smarty": "smarty" }, "tokenTypes": { "meta.tag string.quoted": "other" } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "html", "packageNLS": { "displayName": "HTML Language Basics", "description": "Provides syntax highlighting, bracket matching & snippets in HTML files." } }, { "packageJSON": { "enableProposedApi": true, "name": "html-language-features", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "0.10.x" }, "icon": "icons/html.png", "activationEvents": ["onLanguage:html", "onLanguage:handlebars"], "main": "./client/out/node/htmlClientMain", "browser": "./client/dist/browser/htmlClientMain", "scripts": { "compile": "npx gulp compile-extension:html-language-features-client compile-extension:html-language-features-server", "watch": "npx gulp watch-extension:html-language-features-client watch-extension:html-language-features-server", "install-client-next": "yarn add vscode-languageclient@next" }, "categories": ["Programming Languages"], "contributes": { "configuration": { "id": "html", "order": 20, "type": "object", "title": "HTML", "properties": { "html.customData": { "type": "array", "markdownDescription": "%html.customData.desc%", "default": [], "items": { "type": "string" }, "scope": "resource" }, "html.format.enable": { "type": "boolean", "scope": "window", "default": true, "description": "%html.format.enable.desc%" }, "html.format.wrapLineLength": { "type": "integer", "scope": "resource", "default": 120, "description": "%html.format.wrapLineLength.desc%" }, "html.format.unformatted": { "type": ["string", "null"], "scope": "resource", "default": "wbr", "markdownDescription": "%html.format.unformatted.desc%" }, "html.format.contentUnformatted": { "type": ["string", "null"], "scope": "resource", "default": "pre,code,textarea", "markdownDescription": "%html.format.contentUnformatted.desc%" }, "html.format.indentInnerHtml": { "type": "boolean", "scope": "resource", "default": false, "markdownDescription": "%html.format.indentInnerHtml.desc%" }, "html.format.preserveNewLines": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.format.preserveNewLines.desc%" }, "html.format.maxPreserveNewLines": { "type": ["number", "null"], "scope": "resource", "default": null, "markdownDescription": "%html.format.maxPreserveNewLines.desc%" }, "html.format.indentHandlebars": { "type": "boolean", "scope": "resource", "default": false, "markdownDescription": "%html.format.indentHandlebars.desc%" }, "html.format.endWithNewline": { "type": "boolean", "scope": "resource", "default": false, "description": "%html.format.endWithNewline.desc%" }, "html.format.extraLiners": { "type": ["string", "null"], "scope": "resource", "default": "head, body, /html", "markdownDescription": "%html.format.extraLiners.desc%" }, "html.format.wrapAttributes": { "type": "string", "scope": "resource", "default": "auto", "enum": ["auto", "force", "force-aligned", "force-expand-multiline", "aligned-multiple", "preserve", "preserve-aligned"], "enumDescriptions": ["%html.format.wrapAttributes.auto%", "%html.format.wrapAttributes.force%", "%html.format.wrapAttributes.forcealign%", "%html.format.wrapAttributes.forcemultiline%", "%html.format.wrapAttributes.alignedmultiple%", "%html.format.wrapAttributes.preserve%", "%html.format.wrapAttributes.preservealigned%"], "description": "%html.format.wrapAttributes.desc%" }, "html.format.wrapAttributesIndentSize": { "type": ["number", "null"], "scope": "resource", "default": null, "description": "%html.format.wrapAttributesIndentSize.desc%" }, "html.format.templating": { "type": "boolean", "scope": "resource", "default": false, "description": "%html.format.templating.desc%" }, "html.format.unformattedContentDelimiter": { "type": "string", "scope": "resource", "default": "", "markdownDescription": "%html.format.unformattedContentDelimiter.desc%" }, "html.suggest.html5": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.suggest.html5.desc%" }, "html.validate.scripts": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.validate.scripts%" }, "html.validate.styles": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.validate.styles%" }, "html.autoClosingTags": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.autoClosingTags%" }, "html.hover.documentation": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.hover.documentation%" }, "html.hover.references": { "type": "boolean", "scope": "resource", "default": true, "description": "%html.hover.references%" }, "html.mirrorCursorOnMatchingTag": { "type": "boolean", "scope": "resource", "default": false, "description": "%html.mirrorCursorOnMatchingTag%", "deprecationMessage": "%html.mirrorCursorOnMatchingTagDeprecationMessage%" }, "html.trace.server": { "type": "string", "scope": "window", "enum": ["off", "messages", "verbose"], "default": "off", "description": "%html.trace.server.desc%" } } }, "configurationDefaults": { "[html]": { "editor.suggest.insertMode": "replace" }, "[handlebars]": { "editor.suggest.insertMode": "replace" } }, "jsonValidation": [{ "fileMatch": "*.html-data.json", "url": "https://raw.githubusercontent.com/microsoft/vscode-html-languageservice/master/docs/customData.schema.json" }, { "fileMatch": "package.json", "url": "./schemas/package.schema.json" }] }, "dependencies": { "vscode-extension-telemetry": "0.1.1", "vscode-languageclient": "^7.0.0", "vscode-nls": "^5.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "html-language-features", "packageNLS": { "displayName": "HTML Language Features", "description": "Provides rich language support for HTML and Handlebar files", "html.customData.desc": "A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).\n\nVS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.\n\nThe file paths are relative to workspace and only workspace folder settings are considered.", "html.format.enable.desc": "Enable/disable default HTML formatter.", "html.format.wrapLineLength.desc": "Maximum amount of characters per line (0 = disable).", "html.format.unformatted.desc": "List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.", "html.format.contentUnformatted.desc": "List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.", "html.format.indentInnerHtml.desc": "Indent `<head>` and `<body>` sections.", "html.format.preserveNewLines.desc": "Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.", "html.format.maxPreserveNewLines.desc": "Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.", "html.format.indentHandlebars.desc": "Format and indent `{{#foo}}` and `{{/foo}}`.", "html.format.endWithNewline.desc": "End with a newline.", "html.format.extraLiners.desc": "List of tags, comma separated, that should have an extra newline before them. `null` defaults to `\"head, body, /html\"`.", "html.format.wrapAttributes.desc": "Wrap attributes.", "html.format.wrapAttributes.auto": "Wrap attributes only when line length is exceeded.", "html.format.wrapAttributes.force": "Wrap each attribute except first.", "html.format.wrapAttributes.forcealign": "Wrap each attribute except first and keep aligned.", "html.format.wrapAttributes.forcemultiline": "Wrap each attribute.", "html.format.wrapAttributes.alignedmultiple": "Wrap when line length is exceeded, align attributes vertically.", "html.format.wrapAttributes.preserve": "Preserve wrapping of attributes", "html.format.wrapAttributes.preservealigned": "Preserve wrapping of attributes but align.", "html.format.templating.desc": "Honor django, erb, handlebars and php templating language tags.", "html.format.unformattedContentDelimiter.desc": "Keep text content together between this string.", "html.format.wrapAttributesIndentSize.desc": "Alignment size when using 'force aligned' and 'aligned multiple' in `#html.format.wrapAttributes#` or `null` to use the default indent size.", "html.suggest.html5.desc": "Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.", "html.trace.server.desc": "Traces the communication between VS Code and the HTML language server.", "html.validate.scripts": "Controls whether the built-in HTML language support validates embedded scripts.", "html.validate.styles": "Controls whether the built-in HTML language support validates embedded styles.", "html.autoClosingTags": "Enable/disable autoclosing of HTML tags.", "html.mirrorCursorOnMatchingTag": "Enable/disable mirroring cursor on matching HTML tag.", "html.mirrorCursorOnMatchingTagDeprecationMessage": "Deprecated in favor of `editor.linkedEditing`", "html.hover.documentation": "Show tag and attribute documentation in hover.", "html.hover.references": "Show references to MDN in hover." } }, { "packageJSON": { "name": "image-preview", "displayName": "%displayName%", "description": "%description%", "extensionKind": ["ui", "workspace", "web"], "version": "1.0.0", "publisher": "vscode", "icon": "icon.png", "enableProposedApi": true, "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "^1.39.0" }, "main": "./out/extension", "browser": "./dist/browser/extension.js", "categories": ["Other"], "activationEvents": ["onCustomEditor:imagePreview.previewEditor", "onCommand:imagePreview.zoomIn", "onCommand:imagePreview.zoomOut"], "contributes": { "customEditors": [{ "viewType": "imagePreview.previewEditor", "displayName": "%customEditors.displayName%", "priority": "builtin", "selector": [{ "filenamePattern": "*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif}" }] }], "commands": [{ "command": "imagePreview.zoomIn", "title": "%command.zoomIn%", "category": "Image Preview" }, { "command": "imagePreview.zoomOut", "title": "%command.zoomOut%", "category": "Image Preview" }], "menus": { "commandPalette": [{ "command": "imagePreview.zoomIn", "when": "imagePreviewFocus", "group": "1_imagePreview" }, { "command": "imagePreview.zoomOut", "when": "imagePreviewFocus", "group": "1_imagePreview" }] } }, "scripts": { "compile": "gulp compile-extension:image-preview", "watch": "npm run build-preview && gulp watch-extension:image-preview", "vscode:prepublish": "npm run build-ext", "build-ext": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:image-preview ./tsconfig.json", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose" }, "dependencies": { "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.0.0" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "image-preview", "packageNLS": { "displayName": "Image Preview", "description": "Provides VS Code's built-in image preview", "customEditors.displayName": "Image Preview", "command.zoomIn": "Zoom in", "command.zoomOut": "Zoom out" } }, { "packageJSON": { "name": "ini", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/ini.tmbundle Syntaxes/Ini.plist ./syntaxes/ini.tmLanguage.json" }, "contributes": { "languages": [{ "id": "ini", "extensions": [".ini"], "aliases": ["Ini", "ini"], "configuration": "./ini.language-configuration.json" }, { "id": "properties", "extensions": [".properties", ".cfg", ".conf", ".directory", ".gitattributes", ".gitconfig", ".gitmodules", ".editorconfig"], "filenames": ["gitconfig"], "filenamePatterns": ["**/.config/git/config", "**/.git/config"], "aliases": ["Properties", "properties"], "configuration": "./properties.language-configuration.json" }], "grammars": [{ "language": "ini", "scopeName": "source.ini", "path": "./syntaxes/ini.tmLanguage.json" }, { "language": "properties", "scopeName": "source.ini", "path": "./syntaxes/ini.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "ini", "packageNLS": { "displayName": "Ini Language Basics", "description": "Provides syntax highlighting and bracket matching in Ini files." } }, { "packageJSON": { "name": "jake", "publisher": "vscode", "description": "%description%", "displayName": "%displayName%", "icon": "images/cowboy_hat.png", "version": "1.0.0", "license": "MIT", "engines": { "vscode": "*" }, "categories": ["Other"], "scripts": { "compile": "gulp compile-extension:jake", "watch": "gulp watch-extension:jake" }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "main": "./out/main", "activationEvents": ["onCommand:workbench.action.tasks.runTask"], "contributes": { "configuration": { "id": "jake", "type": "object", "title": "Jake", "properties": { "jake.autoDetect": { "scope": "resource", "type": "string", "enum": ["off", "on"], "default": "on", "description": "%config.jake.autoDetect%" } } }, "taskDefinitions": [{ "type": "jake", "required": ["task"], "properties": { "task": { "type": "string", "description": "%jake.taskDefinition.type.description%" }, "file": { "type": "string", "description": "%jake.taskDefinition.file.description%" } } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "jake", "packageNLS": { "description": "Extension to add Jake capabilities to VS Code.", "displayName": "Jake support for VS Code", "jake.taskDefinition.type.description": "The Jake task to customize.", "jake.taskDefinition.file.description": "The Jake file that provides the task. Can be omitted.", "config.jake.autoDetect": "Controls whether auto detection of Jake tasks is on or off. Default is on." } }, { "packageJSON": { "name": "java", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-java grammars/java.cson ./syntaxes/java.tmLanguage.json" }, "contributes": { "languages": [{ "id": "java", "extensions": [".java", ".jav"], "aliases": ["Java", "java"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "java", "scopeName": "source.java", "path": "./syntaxes/java.tmLanguage.json" }], "snippets": [{ "language": "java", "path": "./snippets/java.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "java", "packageNLS": { "displayName": "Java Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in Java files." } }, { "packageJSON": { "name": "javascript", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "contributes": { "languages": [{ "id": "javascriptreact", "aliases": ["JavaScript React", "jsx"], "extensions": [".jsx"], "configuration": "./javascript-language-configuration.json" }, { "id": "javascript", "aliases": ["JavaScript", "javascript", "js"], "extensions": [".js", ".es6", ".mjs", ".cjs", ".pac"], "filenames": ["jakefile"], "firstLine": "^#!.*\\bnode", "mimetypes": ["text/javascript"], "configuration": "./javascript-language-configuration.json" }, { "id": "jsx-tags", "aliases": [], "configuration": "./tags-language-configuration.json" }], "grammars": [{ "language": "javascriptreact", "scopeName": "source.js.jsx", "path": "./syntaxes/JavaScriptReact.tmLanguage.json", "embeddedLanguages": { "meta.tag.js": "jsx-tags", "meta.tag.without-attributes.js": "jsx-tags", "meta.tag.attributes.js.jsx": "javascriptreact", "meta.embedded.expression.js": "javascriptreact" }, "tokenTypes": { "entity.name.type.instance.jsdoc": "other", "entity.name.function.tagged-template": "other", "meta.import string.quoted": "other", "variable.other.jsdoc": "other" } }, { "language": "javascript", "scopeName": "source.js", "path": "./syntaxes/JavaScript.tmLanguage.json", "embeddedLanguages": { "meta.tag.js": "jsx-tags", "meta.tag.without-attributes.js": "jsx-tags", "meta.tag.attributes.js": "javascript", "meta.embedded.expression.js": "javascript" }, "tokenTypes": { "entity.name.type.instance.jsdoc": "other", "entity.name.function.tagged-template": "other", "meta.import string.quoted": "other", "variable.other.jsdoc": "other" } }, { "scopeName": "source.js.regexp", "path": "./syntaxes/Regular Expressions (JavaScript).tmLanguage" }], "semanticTokenScopes": [{ "language": "javascript", "scopes": { "property": ["variable.other.property.js"], "property.readonly": ["variable.other.constant.property.js"], "variable": ["variable.other.readwrite.js"], "variable.readonly": ["variable.other.constant.object.js"], "function": ["entity.name.function.js"], "namespace": ["entity.name.type.module.js"], "variable.defaultLibrary": ["support.variable.js"], "function.defaultLibrary": ["support.function.js"] } }, { "language": "javascriptreact", "scopes": { "property": ["variable.other.property.jsx"], "property.readonly": ["variable.other.constant.property.jsx"], "variable": ["variable.other.readwrite.jsx"], "variable.readonly": ["variable.other.constant.object.jsx"], "function": ["entity.name.function.jsx"], "namespace": ["entity.name.type.module.jsx"], "variable.defaultLibrary": ["support.variable.js"], "function.defaultLibrary": ["support.function.js"] } }], "snippets": [{ "language": "javascript", "path": "./snippets/javascript.code-snippets" }, { "language": "javascriptreact", "path": "./snippets/javascript.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "javascript", "packageNLS": { "displayName": "JavaScript Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in JavaScript files." } }, { "packageJSON": { "name": "json", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ./build/update-grammars.js" }, "contributes": { "languages": [{ "id": "json", "aliases": ["JSON", "json"], "extensions": [".json", ".bowerrc", ".jscsrc", ".webmanifest", ".js.map", ".css.map", ".ts.map", ".har", ".jslintrc", ".jsonld"], "filenames": ["composer.lock", ".watchmanconfig"], "mimetypes": ["application/json", "application/manifest+json"], "configuration": "./language-configuration.json" }, { "id": "jsonc", "aliases": ["JSON with Comments"], "extensions": [".jsonc", ".eslintrc", ".eslintrc.json", ".jsfmtrc", ".jshintrc", ".swcrc", ".hintrc", ".babelrc"], "filenames": [".ember-cli"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "json", "scopeName": "source.json", "path": "./syntaxes/JSON.tmLanguage.json" }, { "language": "jsonc", "scopeName": "source.json.comments", "path": "./syntaxes/JSONC.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "json", "packageNLS": { "displayName": "JSON Language Basics", "description": "Provides syntax highlighting & bracket matching in JSON files." } }, { "packageJSON": { "name": "json-language-features", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "0.10.x" }, "icon": "icons/json.png", "activationEvents": ["onLanguage:json", "onLanguage:jsonc"], "main": "./client/out/node/jsonClientMain", "browser": "./client/dist/browser/jsonClientMain", "enableProposedApi": true, "scripts": { "compile": "gulp compile-extension:json-language-features-client compile-extension:json-language-features-server", "watch": "gulp watch-extension:json-language-features-client watch-extension:json-language-features-server", "install-client-next": "yarn add vscode-languageclient@next" }, "categories": ["Programming Languages"], "contributes": { "configuration": { "id": "json", "order": 20, "type": "object", "title": "JSON", "properties": { "json.schemas": { "type": "array", "scope": "resource", "description": "%json.schemas.desc%", "items": { "type": "object", "default": { "fileMatch": ["/myfile"], "url": "schemaURL" }, "properties": { "url": { "type": "string", "default": "/user.schema.json", "description": "%json.schemas.url.desc%" }, "fileMatch": { "type": "array", "items": { "type": "string", "default": "MyFile.json", "description": "%json.schemas.fileMatch.item.desc%" }, "minItems": 1, "description": "%json.schemas.fileMatch.desc%" }, "schema": { "$ref": "http://json-schema.org/draft-07/schema#", "description": "%json.schemas.schema.desc%" } } } }, "json.format.enable": { "type": "boolean", "scope": "window", "default": true, "description": "%json.format.enable.desc%" }, "json.trace.server": { "type": "string", "scope": "window", "enum": ["off", "messages", "verbose"], "default": "off", "description": "%json.tracing.desc%" }, "json.colorDecorators.enable": { "type": "boolean", "scope": "window", "default": true, "description": "%json.colorDecorators.enable.desc%", "deprecationMessage": "%json.colorDecorators.enable.deprecationMessage%" }, "json.maxItemsComputed": { "type": "number", "default": 5000, "description": "%json.maxItemsComputed.desc%" }, "json.schemaDownload.enable": { "type": "boolean", "default": true, "description": "%json.enableSchemaDownload.desc%", "tags": ["usesOnlineServices"] } } }, "configurationDefaults": { "[json]": { "editor.quickSuggestions": { "strings": true }, "editor.suggest.insertMode": "replace" }, "[jsonc]": { "editor.quickSuggestions": { "strings": true }, "editor.suggest.insertMode": "replace" } }, "jsonValidation": [{ "fileMatch": "*.schema.json", "url": "http://json-schema.org/draft-07/schema#" }] }, "dependencies": { "request-light": "^0.4.0", "vscode-extension-telemetry": "0.1.1", "vscode-languageclient": "^7.0.0", "vscode-nls": "^5.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "json-language-features", "packageNLS": { "displayName": "JSON Language Features", "description": "Provides rich language support for JSON files.", "json.schemas.desc": "Associate schemas to JSON files in the current project", "json.schemas.url.desc": "A URL to a schema or a relative path to a schema in the current directory", "json.schemas.fileMatch.desc": "An array of file patterns to match against when resolving JSON files to schemas. `*` can be used as a wildcard. Exclusion patterns can also be defined and start with '!'. A file matches when there is at least one matching pattern and the last matching pattern is not an exclusion pattern.", "json.schemas.fileMatch.item.desc": "A file pattern that can contain '*' to match against when resolving JSON files to schemas.", "json.schemas.schema.desc": "The schema definition for the given URL. The schema only needs to be provided to avoid accesses to the schema URL.", "json.format.enable.desc": "Enable/disable default JSON formatter", "json.tracing.desc": "Traces the communication between VS Code and the JSON language server.", "json.colorDecorators.enable.desc": "Enables or disables color decorators", "json.colorDecorators.enable.deprecationMessage": "The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.", "json.schemaResolutionErrorMessage": "Unable to resolve schema.", "json.clickToRetry": "Click to retry.", "json.maxItemsComputed.desc": "The maximum number of outline symbols and folding regions computed (limited for performance reasons).", "json.maxItemsExceededInformation.desc": "Show notification when exceeding the maximum number of outline symbols and folding regions.", "json.enableSchemaDownload.desc": "When enabled, JSON schemas can be fetched from http and https locations." } }, { "packageJSON": { "name": "julia", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ../node_modules/.bin/vscode-grammar-updater JuliaEditorSupport/atom-language-julia grammars/julia_vscode.json ./syntaxes/julia.tmLanguage.json" }, "contributes": { "languages": [{ "id": "julia", "aliases": ["Julia", "julia"], "extensions": [".jl"], "firstLine": "^#!\\s*/.*\\bjulia[0-9.-]*\\b", "configuration": "./language-configuration.json" }, { "id": "juliamarkdown", "aliases": ["Julia Markdown", "juliamarkdown"], "extensions": [".jmd"] }], "grammars": [{ "language": "julia", "scopeName": "source.julia", "path": "./syntaxes/julia.tmLanguage.json", "embeddedLanguages": { "meta.embedded.inline.cpp": "cpp", "meta.embedded.inline.javascript": "javascript", "meta.embedded.inline.python": "python", "meta.embedded.inline.r": "r", "meta.embedded.inline.sql": "sql" } }] } }, "extensionPath": "julia", "packageNLS": { "displayName": "Julia Language Basics", "description": "Provides syntax highlighting & bracket matching in Julia files." } }, { "packageJSON": { "name": "less", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-less grammars/less.cson ./syntaxes/less.tmLanguage.json" }, "contributes": { "languages": [{ "id": "less", "aliases": ["Less", "less"], "extensions": [".less"], "mimetypes": ["text/x-less", "text/less"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "less", "scopeName": "source.css.less", "path": "./syntaxes/less.tmLanguage.json" }], "problemMatchers": [{ "name": "lessc", "label": "Lessc compiler", "owner": "lessc", "source": "less", "fileLocation": "absolute", "pattern": { "regexp": "(.*)\\sin\\s(.*)\\son line\\s(\\d+),\\scolumn\\s(\\d+)", "message": 1, "file": 2, "line": 3, "column": 4 } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "less", "packageNLS": { "displayName": "Less Language Basics", "description": "Provides syntax highlighting, bracket matching and folding in Less files." } }, { "packageJSON": { "name": "log", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin emilast/vscode-logfile-highlighter syntaxes/log.tmLanguage ./syntaxes/log.tmLanguage.json" }, "contributes": { "languages": [{ "id": "log", "extensions": [".log", "*.log.?"], "aliases": ["Log"] }], "grammars": [{ "language": "log", "scopeName": "text.log", "path": "./syntaxes/log.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "log", "packageNLS": { "displayName": "Log", "description": "Provides syntax highlighting for files with .log extension." } }, { "packageJSON": { "name": "lua", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/lua.tmbundle Syntaxes/Lua.plist ./syntaxes/lua.tmLanguage.json" }, "contributes": { "languages": [{ "id": "lua", "extensions": [".lua"], "aliases": ["Lua", "lua"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "lua", "scopeName": "source.lua", "path": "./syntaxes/lua.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "lua", "packageNLS": { "displayName": "Lua Language Basics", "description": "Provides syntax highlighting and bracket matching in Lua files." } }, { "packageJSON": { "name": "make", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin fadeevab/make.tmbundle Syntaxes/Makefile.plist ./syntaxes/make.tmLanguage.json" }, "contributes": { "languages": [{ "id": "makefile", "aliases": ["Makefile", "makefile"], "extensions": [".mk"], "filenames": ["Makefile", "makefile", "GNUmakefile", "OCamlMakefile"], "firstLine": "^#!\\s*/usr/bin/make", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "makefile", "scopeName": "source.makefile", "path": "./syntaxes/make.tmLanguage.json", "tokenTypes": { "string.interpolated": "other" } }], "configurationDefaults": { "[makefile]": { "editor.insertSpaces": false } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "make", "packageNLS": { "displayName": "Make Language Basics", "description": "Provides syntax highlighting and bracket matching in Make files." } }, { "packageJSON": { "name": "markdown", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.20.0" }, "contributes": { "languages": [{ "id": "markdown", "aliases": ["Markdown", "markdown"], "extensions": [".md", ".mkd", ".mdwn", ".mdown", ".markdown", ".markdn", ".mdtxt", ".mdtext", ".workbook"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "markdown", "scopeName": "text.html.markdown", "path": "./syntaxes/markdown.tmLanguage.json", "embeddedLanguages": { "meta.embedded.block.html": "html", "source.js": "javascript", "source.css": "css", "meta.embedded.block.frontmatter": "yaml", "meta.embedded.block.css": "css", "meta.embedded.block.ini": "ini", "meta.embedded.block.java": "java", "meta.embedded.block.lua": "lua", "meta.embedded.block.makefile": "makefile", "meta.embedded.block.perl": "perl", "meta.embedded.block.r": "r", "meta.embedded.block.ruby": "ruby", "meta.embedded.block.php": "php", "meta.embedded.block.sql": "sql", "meta.embedded.block.vs_net": "vs_net", "meta.embedded.block.xml": "xml", "meta.embedded.block.xsl": "xsl", "meta.embedded.block.yaml": "yaml", "meta.embedded.block.dosbatch": "dosbatch", "meta.embedded.block.clojure": "clojure", "meta.embedded.block.coffee": "coffee", "meta.embedded.block.c": "c", "meta.embedded.block.cpp": "cpp", "meta.embedded.block.diff": "diff", "meta.embedded.block.dockerfile": "dockerfile", "meta.embedded.block.go": "go", "meta.embedded.block.groovy": "groovy", "meta.embedded.block.pug": "jade", "meta.embedded.block.javascript": "javascript", "meta.embedded.block.json": "json", "meta.embedded.block.less": "less", "meta.embedded.block.objc": "objc", "meta.embedded.block.scss": "scss", "meta.embedded.block.perl6": "perl6", "meta.embedded.block.powershell": "powershell", "meta.embedded.block.python": "python", "meta.embedded.block.rust": "rust", "meta.embedded.block.scala": "scala", "meta.embedded.block.shellscript": "shellscript", "meta.embedded.block.typescript": "typescript", "meta.embedded.block.typescriptreact": "typescriptreact", "meta.embedded.block.csharp": "csharp", "meta.embedded.block.fsharp": "fsharp" } }], "snippets": [{ "language": "markdown", "path": "./snippets/markdown.code-snippets" }] }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin microsoft/vscode-markdown-tm-grammar syntaxes/markdown.tmLanguage ./syntaxes/markdown.tmLanguage.json" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "markdown-basics", "packageNLS": { "displayName": "Markdown Language Basics", "description": "Provides snippets and syntax highlighting for Markdown." } }, { "packageJSON": { "name": "markdown-language-features", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "icon": "icon.png", "publisher": "vscode", "enableProposedApi": true, "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "^1.20.0" }, "main": "./out/extension", "browser": "./dist/browser/extension", "categories": ["Programming Languages"], "activationEvents": ["onLanguage:markdown", "onCommand:markdown.preview.toggleLock", "onCommand:markdown.preview.refresh", "onCommand:markdown.showPreview", "onCommand:markdown.showPreviewToSide", "onCommand:markdown.showLockedPreviewToSide", "onCommand:markdown.showSource", "onCommand:markdown.showPreviewSecuritySelector", "onCommand:markdown.api.render", "onWebviewPanel:markdown.preview", "onCustomEditor:vscode.markdown.preview.editor"], "contributes": { "notebookMarkdownRenderer": [{ "id": "markdownItRenderer", "displayName": "Markdown it renderer", "entrypoint": "./notebook-out/index.js" }], "commands": [{ "command": "markdown.showPreview", "title": "%markdown.preview.title%", "category": "Markdown", "icon": { "light": "./media/preview-light.svg", "dark": "./media/preview-dark.svg" } }, { "command": "markdown.showPreviewToSide", "title": "%markdown.previewSide.title%", "category": "Markdown", "icon": "$(open-preview)" }, { "command": "markdown.showLockedPreviewToSide", "title": "%markdown.showLockedPreviewToSide.title%", "category": "Markdown", "icon": "$(open-preview)" }, { "command": "markdown.showSource", "title": "%markdown.showSource.title%", "category": "Markdown", "icon": "$(go-to-file)" }, { "command": "markdown.showPreviewSecuritySelector", "title": "%markdown.showPreviewSecuritySelector.title%", "category": "Markdown" }, { "command": "markdown.preview.refresh", "title": "%markdown.preview.refresh.title%", "category": "Markdown" }, { "command": "markdown.preview.toggleLock", "title": "%markdown.preview.toggleLock.title%", "category": "Markdown" }], "menus": { "editor/title": [{ "command": "markdown.showPreviewToSide", "when": "editorLangId == markdown && !notebookEditorFocused", "alt": "markdown.showPreview", "group": "navigation" }, { "command": "markdown.showSource", "when": "markdownPreviewFocus", "group": "navigation" }, { "command": "markdown.preview.refresh", "when": "markdownPreviewFocus", "group": "1_markdown" }, { "command": "markdown.preview.toggleLock", "when": "markdownPreviewFocus", "group": "1_markdown" }, { "command": "markdown.showPreviewSecuritySelector", "when": "markdownPreviewFocus", "group": "1_markdown" }], "explorer/context": [{ "command": "markdown.showPreview", "when": "resourceLangId == markdown", "group": "navigation" }], "editor/title/context": [{ "command": "markdown.showPreview", "when": "resourceLangId == markdown", "group": "1_open" }], "commandPalette": [{ "command": "markdown.showPreview", "when": "editorLangId == markdown && !notebookEditorFocused", "group": "navigation" }, { "command": "markdown.showPreviewToSide", "when": "editorLangId == markdown && !notebookEditorFocused", "group": "navigation" }, { "command": "markdown.showLockedPreviewToSide", "when": "editorLangId == markdown && !notebookEditorFocused", "group": "navigation" }, { "command": "markdown.showSource", "when": "markdownPreviewFocus", "group": "navigation" }, { "command": "markdown.showPreviewSecuritySelector", "when": "editorLangId == markdown && !notebookEditorFocused" }, { "command": "markdown.showPreviewSecuritySelector", "when": "markdownPreviewFocus" }, { "command": "markdown.preview.toggleLock", "when": "markdownPreviewFocus" }, { "command": "markdown.preview.refresh", "when": "editorLangId == markdown && !notebookEditorFocused" }, { "command": "markdown.preview.refresh", "when": "markdownPreviewFocus" }] }, "keybindings": [{ "command": "markdown.showPreview", "key": "shift+ctrl+v", "mac": "shift+cmd+v", "when": "editorLangId == markdown && !notebookEditorFocused" }, { "command": "markdown.showPreviewToSide", "key": "ctrl+k v", "mac": "cmd+k v", "when": "editorLangId == markdown && !notebookEditorFocused" }], "configuration": { "type": "object", "title": "Markdown", "order": 20, "properties": { "markdown.styles": { "type": "array", "items": { "type": "string" }, "default": [], "description": "%markdown.styles.dec%", "scope": "resource" }, "markdown.preview.breaks": { "type": "boolean", "default": false, "description": "%markdown.preview.breaks.desc%", "scope": "resource" }, "markdown.preview.linkify": { "type": "boolean", "default": true, "description": "%markdown.preview.linkify%", "scope": "resource" }, "markdown.preview.fontFamily": { "type": "string", "default": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif", "description": "%markdown.preview.fontFamily.desc%", "scope": "resource" }, "markdown.preview.fontSize": { "type": "number", "default": 14, "description": "%markdown.preview.fontSize.desc%", "scope": "resource" }, "markdown.preview.lineHeight": { "type": "number", "default": 1.6, "description": "%markdown.preview.lineHeight.desc%", "scope": "resource" }, "markdown.preview.scrollPreviewWithEditor": { "type": "boolean", "default": true, "description": "%markdown.preview.scrollPreviewWithEditor.desc%", "scope": "resource" }, "markdown.preview.markEditorSelection": { "type": "boolean", "default": true, "description": "%markdown.preview.markEditorSelection.desc%", "scope": "resource" }, "markdown.preview.scrollEditorWithPreview": { "type": "boolean", "default": true, "description": "%markdown.preview.scrollEditorWithPreview.desc%", "scope": "resource" }, "markdown.preview.doubleClickToSwitchToEditor": { "type": "boolean", "default": true, "description": "%markdown.preview.doubleClickToSwitchToEditor.desc%", "scope": "resource" }, "markdown.preview.openMarkdownLinks": { "type": "string", "default": "inPreview", "description": "%configuration.markdown.preview.openMarkdownLinks.description%", "scope": "resource", "enum": ["inPreview", "inEditor"], "enumDescriptions": ["%configuration.markdown.preview.openMarkdownLinks.inPreview%", "%configuration.markdown.preview.openMarkdownLinks.inEditor%"] }, "markdown.links.openLocation": { "type": "string", "default": "currentGroup", "description": "%configuration.markdown.links.openLocation.description%", "scope": "resource", "enum": ["currentGroup", "beside"], "enumDescriptions": ["%configuration.markdown.links.openLocation.currentGroup%", "%configuration.markdown.links.openLocation.beside%"] }, "markdown.trace": { "type": "string", "enum": ["off", "verbose"], "default": "off", "description": "%markdown.trace.desc%", "scope": "window" } } }, "configurationDefaults": { "[markdown]": { "editor.wordWrap": "on", "editor.quickSuggestions": false } }, "jsonValidation": [{ "fileMatch": "package.json", "url": "./schemas/package.schema.json" }], "markdown.previewStyles": ["./media/markdown.css", "./media/highlight.css"], "markdown.previewScripts": ["./media/index.js"], "customEditors": [{ "viewType": "vscode.markdown.preview.editor", "displayName": "Markdown Preview (Experimental)", "priority": "option", "selector": [{ "filenamePattern": "*.md" }] }] }, "scripts": { "compile": "gulp compile-extension:markdown-language-features && npm run build-preview && npm run build-notebook", "watch": "npm run build-preview && gulp watch-extension:markdown-language-features", "vscode:prepublish": "npm run build-ext && npm run build-preview", "build-ext": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:markdown-language-features ./tsconfig.json", "build-preview": "npx webpack-cli --mode production", "build-notebook": "npx webpack-cli --config webpack.notebook --mode production", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose" }, "dependencies": { "highlight.js": "^10.4.1", "markdown-it": "^12.0.3", "markdown-it-front-matter": "^0.2.1", "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/highlight.js": "10.1.0", "@types/lodash.throttle": "^4.1.3", "@types/markdown-it": "0.0.2", "@types/node": "^12.19.9", "lodash.throttle": "^4.1.1" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "markdown-language-features", "packageNLS": { "displayName": "Markdown Language Features", "description": "Provides rich language support for Markdown.", "markdown.preview.breaks.desc": "Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.", "markdown.preview.linkify": "Enable or disable conversion of URL-like text to links in the markdown preview.", "markdown.preview.doubleClickToSwitchToEditor.desc": "Double click in the markdown preview to switch to the editor.", "markdown.preview.fontFamily.desc": "Controls the font family used in the markdown preview.", "markdown.preview.fontSize.desc": "Controls the font size in pixels used in the markdown preview.", "markdown.preview.lineHeight.desc": "Controls the line height used in the markdown preview. This number is relative to the font size.", "markdown.preview.markEditorSelection.desc": "Mark the current editor selection in the markdown preview.", "markdown.preview.scrollEditorWithPreview.desc": "When a markdown preview is scrolled, update the view of the editor.", "markdown.preview.scrollPreviewWithEditor.desc": "When a markdown editor is scrolled, update the view of the preview.", "markdown.preview.title": "Open Preview", "markdown.previewSide.title": "Open Preview to the Side", "markdown.showLockedPreviewToSide.title": "Open Locked Preview to the Side", "markdown.showSource.title": "Show Source", "markdown.styles.dec": "A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\\' need to be written as '\\\\'.", "markdown.showPreviewSecuritySelector.title": "Change Preview Security Settings", "markdown.trace.desc": "Enable debug logging for the markdown extension.", "markdown.preview.refresh.title": "Refresh Preview", "markdown.preview.toggleLock.title": "Toggle Preview Locking", "configuration.markdown.preview.openMarkdownLinks.description": "Controls how links to other markdown files in the markdown preview should be opened.", "configuration.markdown.preview.openMarkdownLinks.inEditor": "Try to open links in the editor", "configuration.markdown.preview.openMarkdownLinks.inPreview": "Try to open links in the markdown preview", "configuration.markdown.links.openLocation.description": "Controls where links in markdown files should be opened.", "configuration.markdown.links.openLocation.currentGroup": "Open links in the active editor group.", "configuration.markdown.links.openLocation.beside": "Open links beside the active editor." } }, { "packageJSON": { "name": "merge-conflict", "publisher": "vscode", "displayName": "%displayName%", "description": "%description%", "icon": "resources/icons/merge-conflict.png", "version": "1.0.0", "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "^1.5.0" }, "categories": ["Other"], "activationEvents": ["onStartupFinished"], "main": "./out/mergeConflictMain", "browser": "./dist/browser/mergeConflictMain", "scripts": { "compile": "gulp compile-extension:merge-conflict", "watch": "gulp watch-extension:merge-conflict" }, "contributes": { "commands": [{ "category": "%command.category%", "title": "%command.accept.all-current%", "original": "Accept All Current", "command": "merge-conflict.accept.all-current" }, { "category": "%command.category%", "title": "%command.accept.all-incoming%", "original": "Accept All Incoming", "command": "merge-conflict.accept.all-incoming" }, { "category": "%command.category%", "title": "%command.accept.all-both%", "original": "Accept All Both", "command": "merge-conflict.accept.all-both" }, { "category": "%command.category%", "title": "%command.accept.current%", "original": "Accept Current", "command": "merge-conflict.accept.current" }, { "category": "%command.category%", "title": "%command.accept.incoming%", "original": "Accept Incoming", "command": "merge-conflict.accept.incoming" }, { "category": "%command.category%", "title": "%command.accept.selection%", "original": "Accept Selection", "command": "merge-conflict.accept.selection" }, { "category": "%command.category%", "title": "%command.accept.both%", "original": "Accept Both", "command": "merge-conflict.accept.both" }, { "category": "%command.category%", "title": "%command.next%", "original": "Next Conflict", "command": "merge-conflict.next" }, { "category": "%command.category%", "title": "%command.previous%", "original": "Previous Conflict", "command": "merge-conflict.previous" }, { "category": "%command.category%", "title": "%command.compare%", "original": "Compare Current Conflict", "command": "merge-conflict.compare" }], "menus": { "scm/resourceState/context": [{ "command": "merge-conflict.accept.all-current", "when": "scmProvider == git && scmResourceGroup == merge", "group": "1_modification" }, { "command": "merge-conflict.accept.all-incoming", "when": "scmProvider == git && scmResourceGroup == merge", "group": "1_modification" }] }, "configuration": { "title": "%config.title%", "properties": { "merge-conflict.codeLens.enabled": { "type": "boolean", "description": "%config.codeLensEnabled%", "default": true }, "merge-conflict.decorators.enabled": { "type": "boolean", "description": "%config.decoratorsEnabled%", "default": true }, "merge-conflict.autoNavigateNextConflict.enabled": { "type": "boolean", "description": "%config.autoNavigateNextConflictEnabled%", "default": false }, "merge-conflict.diffViewPosition": { "type": "string", "enum": ["Current", "Beside", "Below"], "description": "%config.diffViewPosition%", "enumDescriptions": ["%config.diffViewPosition.current%", "%config.diffViewPosition.beside%", "%config.diffViewPosition.below%"], "default": "Current" } } } }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "merge-conflict", "packageNLS": { "displayName": "Merge Conflict", "description": "Highlighting and commands for inline merge conflicts.", "command.category": "Merge Conflict", "command.accept.all-current": "Accept All Current", "command.accept.all-incoming": "Accept All Incoming", "command.accept.all-both": "Accept All Both", "command.accept.current": "Accept Current", "command.accept.incoming": "Accept Incoming", "command.accept.selection": "Accept Selection", "command.accept.both": "Accept Both", "command.next": "Next Conflict", "command.previous": "Previous Conflict", "command.compare": "Compare Current Conflict", "config.title": "Merge Conflict", "config.autoNavigateNextConflictEnabled": "Whether to automatically navigate to the next merge conflict after resolving a merge conflict.", "config.codeLensEnabled": "Create a CodeLens for merge conflict blocks within editor.", "config.decoratorsEnabled": "Create decorators for merge conflict blocks within editor.", "config.diffViewPosition": "Controls where the diff view should be opened when comparing changes in merge conflicts.", "config.diffViewPosition.current": "Open the diff view in the current editor group.", "config.diffViewPosition.beside": "Open the diff view next to the current editor group.", "config.diffViewPosition.below": "Open the diff view below the current editor group." } }, { "packageJSON": { "name": "microsoft-authentication", "publisher": "vscode", "license": "MIT", "displayName": "%displayName%", "description": "%description%", "version": "0.0.1", "engines": { "vscode": "^1.42.0" }, "categories": ["Other"], "enableProposedApi": true, "activationEvents": ["onAuthenticationRequest:microsoft"], "extensionKind": ["ui", "workspace", "web"], "contributes": { "authentication": [{ "label": "Microsoft", "id": "microsoft" }] }, "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "main": "./out/extension.js", "browser": "./dist/browser/extension.js", "scripts": { "vscode:prepublish": "npm run compile", "compile": "gulp compile-extension:microsoft-authentication", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch": "gulp watch-extension:microsoft-authentication", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose" }, "devDependencies": { "@types/node": "^12.19.9", "@types/node-fetch": "^2.5.7", "@types/randombytes": "^2.0.0", "@types/sha.js": "^2.4.0", "@types/uuid": "8.0.0" }, "dependencies": { "buffer": "^5.6.0", "node-fetch": "2.6.1", "randombytes": "github:rmacfarlane/randombytes#b28d4ecee46262801ea09f15fa1f1513a05c5971", "sha.js": "2.4.11", "stream": "0.0.2", "uuid": "^8.2.0", "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.1.1" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "microsoft-authentication", "packageNLS": { "displayName": "Microsoft Account", "description": "Microsoft authentication provider", "signIn": "Sign In", "signOut": "Sign Out" } }, { "packageJSON": { "name": "notebook-markdown-extensions", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "icon": "icon.png", "publisher": "vscode", "enableProposedApi": true, "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "^1.54.0" }, "categories": ["Other"], "contributes": { "notebookMarkdownRenderer": [{ "id": "markdownItRenderer-katex", "displayName": "Markdown it katex renderer", "entrypoint": "./notebook-out/katex.js" }, { "id": "markdownItRenderer-emoji", "displayName": "Markdown it emoji renderer", "entrypoint": "./notebook-out/emoji.js" }] }, "scripts": { "compile": "npm run build-notebook", "watch": "npm run build-notebook", "build-notebook": "npx webpack-cli --config webpack.notebook.js --mode production" }, "dependencies": { "@iktakahiro/markdown-it-katex": "^4.0.1", "markdown-it-emoji": "^2.0.0" }, "devDependencies": { "@types/markdown-it": "^0.0.0", "css-loader": "^5.0.2", "markdown-it": "^12.0.4", "style-loader": "^2.0.0", "url-loader": "^4.1.1" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "notebook-markdown-extensions", "packageNLS": { "displayName": "Markdown Notebook math", "description": "Provides rich language support for Markdown." } }, { "packageJSON": { "name": "npm", "publisher": "vscode", "displayName": "%displayName%", "description": "%description%", "version": "1.0.1", "license": "MIT", "engines": { "vscode": "0.10.x" }, "enableProposedApi": true, "icon": "images/npm_icon.png", "categories": ["Other"], "scripts": { "compile": "gulp compile-extension:npm", "watch": "gulp watch-extension:npm" }, "dependencies": { "find-up": "^4.1.0", "find-yarn-workspace-root": "^2.0.0", "jsonc-parser": "^2.2.1", "minimatch": "^3.0.4", "request-light": "^0.4.0", "vscode-nls": "^4.1.1", "which-pm": "^2.0.0" }, "devDependencies": { "@types/minimatch": "^3.0.3", "@types/node": "^12.19.9" }, "resolutions": { "which-pm/load-yaml-file/**/argparse": "1.0.9" }, "main": "./out/npmMain", "browser": "./dist/browser/npmBrowserMain", "activationEvents": ["onCommand:workbench.action.tasks.runTask", "onCommand:npm.runScriptFromFolder", "onLanguage:json", "workspaceContains:package.json", "onView:npm"], "contributes": { "languages": [{ "id": "ignore", "extensions": [".npmignore"] }, { "id": "properties", "extensions": [".npmrc"] }], "views": { "explorer": [{ "id": "npm", "name": "%view.name%", "icon": "$(code)", "visibility": "hidden" }] }, "commands": [{ "command": "npm.runScript", "title": "%command.run%", "icon": "$(run)" }, { "command": "npm.debugScript", "title": "%command.debug%", "icon": "$(debug)" }, { "command": "npm.openScript", "title": "%command.openScript%" }, { "command": "npm.runInstall", "title": "%command.runInstall%" }, { "command": "npm.refresh", "title": "%command.refresh%", "icon": "$(refresh)" }, { "command": "npm.runSelectedScript", "title": "%command.runSelectedScript%" }, { "command": "npm.runScriptFromFolder", "title": "%command.runScriptFromFolder%" }, { "command": "npm.packageManager", "title": "%command.packageManager" }], "menus": { "commandPalette": [{ "command": "npm.refresh", "when": "false" }, { "command": "npm.runScript", "when": "false" }, { "command": "npm.debugScript", "when": "false" }, { "command": "npm.openScript", "when": "false" }, { "command": "npm.runInstall", "when": "false" }, { "command": "npm.runSelectedScript", "when": "false" }, { "command": "npm.runScriptFromFolder", "when": "false" }, { "command": "npm.packageManager", "when": "false" }], "editor/context": [{ "command": "npm.runSelectedScript", "when": "resourceFilename == 'package.json' && resourceScheme == file", "group": "navigation@+1" }], "view/title": [{ "command": "npm.refresh", "when": "view == npm", "group": "navigation" }], "view/item/context": [{ "command": "npm.openScript", "when": "view == npm && viewItem == packageJSON", "group": "navigation@1" }, { "command": "npm.runInstall", "when": "view == npm && viewItem == packageJSON", "group": "navigation@2" }, { "command": "npm.openScript", "when": "view == npm && viewItem == script", "group": "navigation@1" }, { "command": "npm.runScript", "when": "view == npm && viewItem == script", "group": "navigation@2" }, { "command": "npm.runScript", "when": "view == npm && viewItem == script", "group": "inline" }, { "command": "npm.debugScript", "when": "view == npm && viewItem == script", "group": "inline" }, { "command": "npm.debugScript", "when": "view == npm && viewItem == script", "group": "navigation@3" }], "explorer/context": [{ "when": "config.npm.enableRunFromFolder && explorerViewletVisible && explorerResourceIsFolder && resourceScheme == file", "command": "npm.runScriptFromFolder", "group": "2_workspace" }] }, "configuration": { "id": "npm", "type": "object", "title": "Npm", "properties": { "npm.autoDetect": { "type": "string", "enum": ["off", "on"], "default": "on", "scope": "resource", "description": "%config.npm.autoDetect%" }, "npm.runSilent": { "type": "boolean", "default": false, "scope": "resource", "markdownDescription": "%config.npm.runSilent%" }, "npm.packageManager": { "scope": "resource", "type": "string", "enum": ["auto", "npm", "yarn", "pnpm"], "enumDescriptions": ["%config.npm.packageManager.auto%", "%config.npm.packageManager.npm%", "%config.npm.packageManager.yarn%", "%config.npm.packageManager.pnpm%"], "default": "auto", "description": "%config.npm.packageManager%" }, "npm.exclude": { "type": ["string", "array"], "items": { "type": "string" }, "description": "%config.npm.exclude%", "scope": "resource" }, "npm.enableScriptExplorer": { "type": "boolean", "default": false, "scope": "resource", "deprecationMessage": "The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.", "description": "%config.npm.enableScriptExplorer%" }, "npm.enableRunFromFolder": { "type": "boolean", "default": false, "scope": "resource", "description": "%config.npm.enableRunFromFolder%" }, "npm.scriptExplorerAction": { "type": "string", "enum": ["open", "run"], "markdownDescription": "%config.npm.scriptExplorerAction%", "scope": "window", "default": "open" }, "npm.fetchOnlinePackageInfo": { "type": "boolean", "description": "%config.npm.fetchOnlinePackageInfo%", "default": true, "scope": "window", "tags": ["usesOnlineServices"] } } }, "jsonValidation": [{ "fileMatch": "package.json", "url": "https://json.schemastore.org/package" }, { "fileMatch": "bower.json", "url": "https://json.schemastore.org/bower" }], "taskDefinitions": [{ "type": "npm", "required": ["script"], "properties": { "script": { "type": "string", "description": "%taskdef.script%" }, "path": { "type": "string", "description": "%taskdef.path%" } }, "when": "shellExecutionSupported" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "npm", "packageNLS": { "description": "Extension to add task support for npm scripts.", "displayName": "NPM support for VS Code", "config.npm.autoDetect": "Controls whether npm scripts should be automatically detected.", "config.npm.runSilent": "Run npm commands with the `--silent` option.", "config.npm.packageManager": "The package manager used to run scripts.", "config.npm.packageManager.npm": "Use npm as the package manager for running scripts.", "config.npm.packageManager.yarn": "Use yarn as the package manager for running scripts.", "config.npm.packageManager.pnpm": "Use pnpm as the package manager for running scripts.", "config.npm.packageManager.auto": "Auto-detect which package manager to use for running scripts based on lock files and installed package managers.", "config.npm.exclude": "Configure glob patterns for folders that should be excluded from automatic script detection.", "config.npm.enableScriptExplorer": "Enable an explorer view for npm scripts when there is no top-level 'package.json' file.", "config.npm.scriptExplorerAction": "The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.", "config.npm.enableRunFromFolder": "Enable running npm scripts contained in a folder from the Explorer context menu.", "config.npm.fetchOnlinePackageInfo": "Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.", "npm.parseError": "Npm task detection: failed to parse the file {0}", "taskdef.script": "The npm script to customize.", "taskdef.path": "The path to the folder of the package.json file that provides the script. Can be omitted.", "view.name": "NPM Scripts", "command.refresh": "Refresh", "command.run": "Run", "command.debug": "Debug", "command.openScript": "Open", "command.runInstall": "Run Install", "command.runSelectedScript": "Run Script", "command.runScriptFromFolder": "Run NPM Script in Folder...", "command.packageManager": "Get Configured Package Manager" } }, { "packageJSON": { "name": "objective-c", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ./build/update-grammars.js" }, "contributes": { "languages": [{ "id": "objective-c", "extensions": [".m"], "aliases": ["Objective-C"], "configuration": "./language-configuration.json" }, { "id": "objective-cpp", "extensions": [".mm"], "aliases": ["Objective-C++"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "objective-c", "scopeName": "source.objc", "path": "./syntaxes/objective-c.tmLanguage.json" }, { "language": "objective-cpp", "scopeName": "source.objcpp", "path": "./syntaxes/objective-c++.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "objective-c", "packageNLS": { "displayName": "Objective-C Language Basics", "description": "Provides syntax highlighting and bracket matching in Objective-C files." } }, { "packageJSON": { "name": "perl", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/perl.tmbundle Syntaxes/Perl.plist ./syntaxes/perl.tmLanguage.json Syntaxes/Perl%206.tmLanguage ./syntaxes/perl6.tmLanguage.json" }, "contributes": { "languages": [{ "id": "perl", "aliases": ["Perl", "perl"], "extensions": [".pl", ".pm", ".pod", ".t", ".PL", ".psgi"], "firstLine": "^#!.*\\bperl\\b", "configuration": "./perl.language-configuration.json" }, { "id": "perl6", "aliases": ["Perl 6", "perl6"], "extensions": [".p6", ".pl6", ".pm6", ".nqp"], "firstLine": "(^#!.*\\bperl6\\b)|use\\s+v6", "configuration": "./perl6.language-configuration.json" }], "grammars": [{ "language": "perl", "scopeName": "source.perl", "path": "./syntaxes/perl.tmLanguage.json" }, { "language": "perl6", "scopeName": "source.perl.6", "path": "./syntaxes/perl6.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "perl", "packageNLS": { "displayName": "Perl Language Basics", "description": "Provides syntax highlighting and bracket matching in Perl files." } }, { "packageJSON": { "name": "php", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "contributes": { "languages": [{ "id": "php", "extensions": [".php", ".php4", ".php5", ".phtml", ".ctp"], "aliases": ["PHP", "php"], "firstLine": "^#!\\s*/.*\\bphp\\b", "mimetypes": ["application/x-php"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "php", "scopeName": "source.php", "path": "./syntaxes/php.tmLanguage.json" }, { "language": "php", "scopeName": "text.html.php", "path": "./syntaxes/html.tmLanguage.json", "embeddedLanguages": { "text.html": "html", "source.php": "php", "source.sql": "sql", "text.xml": "xml", "source.js": "javascript", "source.json": "json", "source.css": "css" } }], "snippets": [{ "language": "php", "path": "./snippets/php.code-snippets" }] }, "scripts": { "update-grammar": "node ./build/update-grammar.js" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "php", "packageNLS": { "displayName": "PHP Language Basics", "description": "Provides syntax highlighting and bracket matching for PHP files." } }, { "packageJSON": { "name": "php-language-features", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "icon": "icons/logo.png", "engines": { "vscode": "0.10.x" }, "activationEvents": ["onLanguage:php"], "main": "./out/phpMain", "categories": ["Programming Languages"], "contributes": { "configuration": { "title": "%configuration.title%", "type": "object", "order": 20, "properties": { "php.suggest.basic": { "type": "boolean", "default": true, "description": "%configuration.suggest.basic%" }, "php.validate.enable": { "type": "boolean", "default": true, "description": "%configuration.validate.enable%" }, "php.validate.executablePath": { "type": ["string", "null"], "default": null, "description": "%configuration.validate.executablePath%", "scope": "machine-overridable" }, "php.validate.run": { "type": "string", "enum": ["onSave", "onType"], "default": "onSave", "description": "%configuration.validate.run%" } } }, "jsonValidation": [{ "fileMatch": "composer.json", "url": "https://getcomposer.org/schema.json" }], "commands": [{ "title": "%command.untrustValidationExecutable%", "category": "%commands.categroy.php%", "command": "php.untrustValidationExecutable" }], "menus": { "commandPalette": [{ "command": "php.untrustValidationExecutable", "when": "php.untrustValidationExecutableContext" }] } }, "scripts": { "compile": "npx gulp compile-extension:php-language-features", "watch": "npx gulp watch-extension:php-language-features" }, "dependencies": { "vscode-nls": "^4.0.0" }, "devDependencies": { "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "php-language-features", "packageNLS": { "configuration.suggest.basic": "Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.", "configuration.validate.enable": "Enable/disable built-in PHP validation.", "configuration.validate.executablePath": "Points to the PHP executable.", "configuration.validate.run": "Whether the linter is run on save or on type.", "configuration.title": "PHP", "commands.categroy.php": "PHP", "command.untrustValidationExecutable": "Disallow PHP validation executable (defined as workspace setting)", "displayName": "PHP Language Features", "description": "Provides rich language support for PHP files." } }, { "packageJSON": { "name": "powershell", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "languages": [{ "id": "powershell", "extensions": [".ps1", ".psm1", ".psd1", ".pssc", ".psrc"], "aliases": ["PowerShell", "powershell", "ps", "ps1"], "firstLine": "^#!\\s*/.*\\bpwsh\\b", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "powershell", "scopeName": "source.powershell", "path": "./syntaxes/powershell.tmLanguage.json" }], "snippets": [{ "language": "powershell", "path": "./snippets/powershell.code-snippets" }] }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin PowerShell/EditorSyntax PowerShellSyntax.tmLanguage ./syntaxes/powershell.tmLanguage.json" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "powershell", "packageNLS": { "displayName": "Powershell Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in Powershell files." } }, { "packageJSON": { "name": "pug", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin davidrios/pug-tmbundle Syntaxes/Pug.JSON-tmLanguage ./syntaxes/pug.tmLanguage.json" }, "contributes": { "languages": [{ "id": "jade", "extensions": [".pug", ".jade"], "aliases": ["Pug", "Jade", "jade"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "jade", "scopeName": "text.pug", "path": "./syntaxes/pug.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "pug", "packageNLS": { "displayName": "Pug Language Basics", "description": "Provides syntax highlighting and bracket matching in Pug files." } }, { "packageJSON": { "name": "python", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "extensionKind": ["ui", "workspace", "web"], "contributes": { "languages": [{ "id": "python", "extensions": [".py", ".rpy", ".pyw", ".cpy", ".gyp", ".gypi", ".pyi", ".ipy"], "aliases": ["Python", "py"], "filenames": ["Snakefile", "SConstruct", "SConscript"], "firstLine": "^#!\\s*/?.*\\bpython[0-9.-]*\\b", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "python", "scopeName": "source.python", "path": "./syntaxes/MagicPython.tmLanguage.json" }, { "scopeName": "source.regexp.python", "path": "./syntaxes/MagicRegExp.tmLanguage.json" }] }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin MagicStack/MagicPython grammars/MagicPython.tmLanguage ./syntaxes/MagicPython.tmLanguage.json grammars/MagicRegExp.tmLanguage ./syntaxes/MagicRegExp.tmLanguage.json" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "python", "packageNLS": { "displayName": "Python Language Basics", "description": "Provides syntax highlighting, bracket matching and folding in Python files." } }, { "packageJSON": { "name": "r", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin Ikuyadeu/vscode-R syntax/r.json ./syntaxes/r.tmLanguage.json" }, "contributes": { "languages": [{ "id": "r", "extensions": [".r", ".rhistory", ".rprofile", ".rt"], "aliases": ["R", "r"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "r", "scopeName": "source.r", "path": "./syntaxes/r.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "r", "packageNLS": { "displayName": "R Language Basics", "description": "Provides syntax highlighting and bracket matching in R files." } }, { "packageJSON": { "name": "razor", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "0.10.x" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin demyte/language-cshtml grammars/cshtml.json ./syntaxes/cshtml.tmLanguage.json" }, "contributes": { "languages": [{ "id": "razor", "extensions": [".cshtml"], "aliases": ["Razor", "razor"], "mimetypes": ["text/x-cshtml"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "razor", "scopeName": "text.html.cshtml", "path": "./syntaxes/cshtml.tmLanguage.json", "embeddedLanguages": { "section.embedded.source.cshtml": "csharp", "source.css": "css", "source.js": "javascript" } }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "razor", "packageNLS": { "displayName": "Razor Language Basics", "description": "Provides syntax highlighting, bracket matching and folding in Razor files." } }, { "packageJSON": { "name": "ruby", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/ruby.tmbundle Syntaxes/Ruby.plist ./syntaxes/ruby.tmLanguage.json" }, "contributes": { "languages": [{ "id": "ruby", "extensions": [".rb", ".rbx", ".rjs", ".gemspec", ".rake", ".ru", ".erb", ".podspec", ".rbi"], "filenames": ["rakefile", "gemfile", "guardfile", "podfile", "capfile", "cheffile", "hobofile", "vagrantfile", "appraisals", "rantfile", "berksfile", "berksfile.lock", "thorfile", "puppetfile", "dangerfile", "brewfile", "fastfile", "appfile", "deliverfile", "matchfile", "scanfile", "snapfile", "gymfile"], "aliases": ["Ruby", "rb"], "firstLine": "^#!\\s*/.*\\bruby\\b", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "ruby", "scopeName": "source.ruby", "path": "./syntaxes/ruby.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "ruby", "packageNLS": { "displayName": "Ruby Language Basics", "description": "Provides syntax highlighting and bracket matching in Ruby files." } }, { "packageJSON": { "name": "rust", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin dustypomerleau/rust-syntax syntaxes/rust.tmLanguage.json ./syntaxes/rust.tmLanguage.json" }, "contributes": { "languages": [{ "id": "rust", "extensions": [".rs"], "aliases": ["Rust", "rust"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "rust", "path": "./syntaxes/rust.tmLanguage.json", "scopeName": "source.rust" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "rust", "packageNLS": { "displayName": "Rust Language Basics", "description": "Provides syntax highlighting and bracket matching in Rust files." } }, { "packageJSON": { "name": "scss", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-sass grammars/scss.cson ./syntaxes/scss.tmLanguage.json grammars/sassdoc.cson ./syntaxes/sassdoc.tmLanguage.json" }, "contributes": { "languages": [{ "id": "scss", "aliases": ["SCSS", "scss"], "extensions": [".scss"], "mimetypes": ["text/x-scss", "text/scss"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "scss", "scopeName": "source.css.scss", "path": "./syntaxes/scss.tmLanguage.json" }, { "scopeName": "source.sassdoc", "path": "./syntaxes/sassdoc.tmLanguage.json" }], "problemMatchers": [{ "name": "node-sass", "label": "Node Sass Compiler", "owner": "node-sass", "fileLocation": "absolute", "pattern": [{ "regexp": "^{$" }, { "regexp": "\\s*\"status\":\\s\\d+," }, { "regexp": "\\s*\"file\":\\s\"(.*)\",", "file": 1 }, { "regexp": "\\s*\"line\":\\s(\\d+),", "line": 1 }, { "regexp": "\\s*\"column\":\\s(\\d+),", "column": 1 }, { "regexp": "\\s*\"message\":\\s\"(.*)\",", "message": 1 }, { "regexp": "\\s*\"formatted\":\\s(.*)" }, { "regexp": "^}$" }] }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "scss", "packageNLS": { "displayName": "SCSS Language Basics", "description": "Provides syntax highlighting, bracket matching and folding in SCSS files." } }, { "packageJSON": { "name": "search-result", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "enableProposedApi": true, "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.39.0" }, "categories": ["Programming Languages"], "main": "./out/extension.js", "browser": "./dist/extension.js", "activationEvents": ["onLanguage:search-result"], "scripts": { "generate-grammar": "node ./syntaxes/generateTMLanguage.js", "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:search-result ./tsconfig.json" }, "contributes": { "configurationDefaults": { "[search-result]": { "editor.lineNumbers": "off" } }, "languages": [{ "id": "search-result", "extensions": [".code-search"], "aliases": ["Search Result"] }], "grammars": [{ "language": "search-result", "scopeName": "text.searchResult", "path": "./syntaxes/searchResult.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "search-result", "packageNLS": { "displayName": "Search Result", "description": "Provides syntax highlighting and language features for tabbed search results." } }, { "packageJSON": { "name": "shaderlab", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin tgjones/shaders-tmLanguage grammars/shaderlab.json ./syntaxes/shaderlab.tmLanguage.json" }, "contributes": { "languages": [{ "id": "shaderlab", "extensions": [".shader"], "aliases": ["ShaderLab", "shaderlab"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "shaderlab", "path": "./syntaxes/shaderlab.tmLanguage.json", "scopeName": "source.shaderlab" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "shaderlab", "packageNLS": { "displayName": "Shaderlab Language Basics", "description": "Provides syntax highlighting and bracket matching in Shaderlab files." } }, { "packageJSON": { "name": "shellscript", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-shellscript grammars/shell-unix-bash.cson ./syntaxes/shell-unix-bash.tmLanguage.json" }, "contributes": { "languages": [{ "id": "shellscript", "aliases": ["Shell Script", "shellscript", "bash", "sh", "zsh", "ksh", "csh"], "extensions": [".sh", ".bash", ".bashrc", ".bash_aliases", ".bash_profile", ".bash_login", ".ebuild", ".install", ".profile", ".bash_logout", ".zsh", ".zshrc", ".zprofile", ".zlogin", ".zlogout", ".zshenv", ".zsh-theme", ".ksh", ".csh", ".cshrc", ".tcshrc", ".yashrc", ".yash_profile"], "filenames": ["APKBUILD", "PKGBUILD", ".envrc", ".hushlogin", "zshrc", "zshenv", "zlogin", "zprofile", "zlogout", "bashrc_Apple_Terminal", "zshrc_Apple_Terminal"], "firstLine": "^#!.*\\b(bash|zsh|sh|ksh|dtksh|pdksh|mksh|ash|dash|yash|sh|csh|jcsh|tcsh|itcsh).*|^#\\s*-\\*-[^*]*mode:\\s*shell-script[^*]*-\\*-", "configuration": "./language-configuration.json", "mimetypes": ["text/x-shellscript"] }], "grammars": [{ "language": "shellscript", "scopeName": "source.shell", "path": "./syntaxes/shell-unix-bash.tmLanguage.json" }], "configurationDefaults": { "[shellscript]": { "files.eol": "\n" } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "shellscript", "packageNLS": { "displayName": "Shell Script Language Basics", "description": "Provides syntax highlighting and bracket matching in Shell Script files." } }, { "packageJSON": { "name": "simple-browser", "displayName": "%displayName%", "description": "%description%", "enableProposedApi": true, "version": "1.0.0", "icon": "icon.png", "publisher": "vscode", "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "engines": { "vscode": "^1.53.0" }, "main": "./out/extension", "browser": "./dist/browser/extension", "categories": ["Other"], "extensionKind": ["ui", "workspace", "web"], "activationEvents": ["onCommand:simpleBrowser.show", "onCommand:simpleBrowser.api.open", "onOpenExternalUri:http", "onOpenExternalUri:https"], "contributes": { "commands": [{ "command": "simpleBrowser.show", "title": "Show", "category": "Simple Browser" }], "configuration": [{ "title": "Simple Browser", "properties": { "simpleBrowser.focusLockIndicator.enabled": { "type": "boolean", "default": true, "title": "Focus Lock Indicator Enabled", "description": "%configuration.focusLockIndicator.enabled.description%" } } }] }, "scripts": { "compile": "gulp compile-extension:markdown-language-features && npm run build-preview", "watch": "npm run build-preview && gulp watch-extension:markdown-language-features", "vscode:prepublish": "npm run build-ext && npm run build-preview", "build-ext": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:markdown-language-features ./tsconfig.json", "build-preview": "npx webpack-cli --mode development", "build-preview-production": "npx webpack-cli --mode production", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose", "postinstall": "node ./build/copy" }, "dependencies": { "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.0.0" }, "devDependencies": { "vscode-codicons": "^0.0.14", "@types/node": "^12.11.7" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "simple-browser", "packageNLS": { "displayName": "Simple Browser", "description": "A very basic built-in webview for displaying web content.", "configuration.focusLockIndicator.enabled.description": "Enable/disable the floating indicator that shows when focused in the simple browser." } }, { "packageJSON": { "name": "sql", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ./build/update-grammar.js" }, "contributes": { "languages": [{ "id": "sql", "extensions": [".sql", ".dsql"], "aliases": ["SQL"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "sql", "scopeName": "source.sql", "path": "./syntaxes/sql.tmLanguage.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "sql", "packageNLS": { "displayName": "SQL Language Basics", "description": "Provides syntax highlighting and bracket matching in SQL files." } }, { "packageJSON": { "name": "swift", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/swift.tmbundle Syntaxes/Swift.tmLanguage ./syntaxes/swift.tmLanguage.json" }, "contributes": { "languages": [{ "id": "swift", "aliases": ["Swift", "swift"], "extensions": [".swift"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "swift", "scopeName": "source.swift", "path": "./syntaxes/swift.tmLanguage.json" }], "snippets": [{ "language": "swift", "path": "./snippets/swift.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "swift", "packageNLS": { "displayName": "Swift Language Basics", "description": "Provides snippets, syntax highlighting and bracket matching in Swift files." } }, { "packageJSON": { "name": "testing-editor-contributions", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "enableProposedApi": true, "publisher": "vscode", "license": "MIT", "engines": { "vscode": "^1.39.0" }, "categories": ["Other"], "main": "./out/extension.js", "browser": "./dist/extension.js", "activationEvents": ["onStartupFinished"], "dependencies": { "vscode-nls": "^5.0.0" }, "contributes": { "configuration": { "title": "Testing", "properties": { "testing.enableCodeLens": { "description": "%config.enableCodeLens%", "type": "boolean", "default": true }, "testing.enableProblemDiagnostics": { "description": "%config.enableProblemDiagnostics%", "type": "boolean", "default": false } } } }, "scripts": { "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:testing-editor-contributions ./tsconfig.json" }, "prettier": { "printWidth": 100, "singleQuote": true, "trailingComma": "all" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "testing-editor-contributions", "packageNLS": { "displayName": "Testing Editor Contributions", "description": "Provides the in-editor experience for tests and test results.", "action.run": "Run Tests", "action.debug": "Debug", "tooltip.run": "Run {0}", "tooltip.debug": "Debug {0}", "tooltip.runState": "{0}/{1} Tests Passed", "tooltip.runStateWithDuration": "{0}/{1} Tests Passed in {2}", "state.failed": "Failed", "state.passed": "Passed", "state.passedWithDuration": "Passed in {0}", "config.enableCodeLens": "Whether code lens on test cases and suites should be visible", "config.enableProblemDiagnostics": "Whether test failures should be reported in the 'problems' view and show as errors in the editor." } }, { "packageJSON": { "name": "theme-abyss", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Abyss", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/abyss-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-abyss", "packageNLS": { "displayName": "Abyss Theme", "description": "Abyss theme for Visual Studio Code", "themeLabel": "Abyss" } }, { "packageJSON": { "name": "theme-defaults", "displayName": "%displayName%", "description": "%description%", "categories": ["Themes"], "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Default Dark+", "label": "%darkPlusColorThemeLabel%", "uiTheme": "vs-dark", "path": "./themes/dark_plus.json" }, { "id": "Default Light+", "label": "%lightPlusColorThemeLabel%", "uiTheme": "vs", "path": "./themes/light_plus.json" }, { "id": "Visual Studio Dark", "label": "%darkColorThemeLabel%", "uiTheme": "vs-dark", "path": "./themes/dark_vs.json" }, { "id": "Visual Studio Light", "label": "%lightColorThemeLabel%", "uiTheme": "vs", "path": "./themes/light_vs.json" }, { "id": "Default High Contrast", "label": "%hcColorThemeLabel%", "uiTheme": "hc-black", "path": "./themes/hc_black.json" }], "iconThemes": [{ "id": "vs-minimal", "label": "%minimalIconThemeLabel%", "path": "./fileicons/vs_minimal-icon-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-defaults", "packageNLS": { "displayName": "Default Themes", "description": "The default Visual Studio light and dark themes", "darkPlusColorThemeLabel": "Dark+ (default dark)", "lightPlusColorThemeLabel": "Light+ (default light)", "darkColorThemeLabel": "Dark (Visual Studio)", "lightColorThemeLabel": "Light (Visual Studio)", "hcColorThemeLabel": "High Contrast", "minimalIconThemeLabel": "Minimal (Visual Studio Code)" } }, { "packageJSON": { "name": "theme-kimbie-dark", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Kimbie Dark", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/kimbie-dark-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-kimbie-dark", "packageNLS": { "displayName": "Kimbie Dark Theme", "description": "Kimbie dark theme for Visual Studio Code", "themeLabel": "Kimbie Dark" } }, { "packageJSON": { "name": "theme-monokai", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Monokai", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/monokai-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-monokai", "packageNLS": { "displayName": "Monokai Theme", "description": "Monokai theme for Visual Studio Code", "themeLabel": "Monokai" } }, { "packageJSON": { "name": "theme-monokai-dimmed", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Monokai Dimmed", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/dimmed-monokai-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-monokai-dimmed", "packageNLS": { "displayName": "Monokai Dimmed Theme", "description": "Monokai dimmed theme for Visual Studio Code", "themeLabel": "Monokai Dimmed" } }, { "packageJSON": { "name": "theme-quietlight", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Quiet Light", "label": "%themeLabel%", "uiTheme": "vs", "path": "./themes/quietlight-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-quietlight", "packageNLS": { "displayName": "Quiet Light Theme", "description": "Quiet light theme for Visual Studio Code", "themeLabel": "Quiet Light" } }, { "packageJSON": { "name": "theme-red", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Red", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/Red-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-red", "packageNLS": { "displayName": "Red Theme", "description": "Red theme for Visual Studio Code", "themeLabel": "Red" } }, { "packageJSON": { "name": "vscode-theme-seti", "private": true, "version": "1.0.0", "displayName": "%displayName%", "description": "%description%", "publisher": "vscode", "license": "MIT", "icon": "icons/seti-circular-128x128.png", "scripts": { "update": "node ./build/update-icon-theme.js" }, "engines": { "vscode": "*" }, "contributes": { "iconThemes": [{ "id": "vs-seti", "label": "%themeLabel%", "path": "./icons/vs-seti-icon-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-seti", "packageNLS": { "displayName": "Seti File Icon Theme", "description": "A file icon theme made out of the Seti UI file icons", "themeLabel": "Seti (Visual Studio Code)" } }, { "packageJSON": { "name": "theme-solarized-dark", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Solarized Dark", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/solarized-dark-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-solarized-dark", "packageNLS": { "displayName": "Solarized Dark Theme", "description": "Solarized dark theme for Visual Studio Code", "themeLabel": "Solarized Dark" } }, { "packageJSON": { "name": "theme-solarized-light", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Solarized Light", "label": "%themeLabel%", "uiTheme": "vs", "path": "./themes/solarized-light-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-solarized-light", "packageNLS": { "displayName": "Solarized Light Theme", "description": "Solarized light theme for Visual Studio Code", "themeLabel": "Solarized Light" } }, { "packageJSON": { "name": "theme-tomorrow-night-blue", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "themes": [{ "id": "Tomorrow Night Blue", "label": "%themeLabel%", "uiTheme": "vs-dark", "path": "./themes/tomorrow-night-blue-color-theme.json" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "theme-tomorrow-night-blue", "packageNLS": { "displayName": "Tomorrow Night Blue Theme", "description": "Tomorrow night blue theme for Visual Studio Code", "themeLabel": "Tomorrow Night Blue" } }, { "packageJSON": { "name": "typescript", "description": "%description%", "displayName": "%displayName%", "version": "1.0.0", "author": "vscode", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ./build/update-grammars.js" }, "contributes": { "languages": [{ "id": "typescript", "aliases": ["TypeScript", "ts", "typescript"], "extensions": [".ts"], "configuration": "./language-configuration.json" }, { "id": "typescriptreact", "aliases": ["TypeScript React", "tsx"], "extensions": [".tsx"], "configuration": "./language-configuration.json" }, { "id": "jsonc", "filenames": ["tsconfig.json", "jsconfig.json"], "filenamePatterns": ["tsconfig.*.json", "jsconfig.*.json", "tsconfig-*.json", "jsconfig-*.json"] }], "grammars": [{ "language": "typescript", "scopeName": "source.ts", "path": "./syntaxes/TypeScript.tmLanguage.json", "tokenTypes": { "entity.name.type.instance.jsdoc": "other", "entity.name.function.tagged-template": "other", "meta.import string.quoted": "other", "variable.other.jsdoc": "other" } }, { "language": "typescriptreact", "scopeName": "source.tsx", "path": "./syntaxes/TypeScriptReact.tmLanguage.json", "embeddedLanguages": { "meta.tag.tsx": "jsx-tags", "meta.tag.without-attributes.tsx": "jsx-tags", "meta.tag.attributes.tsx": "typescriptreact", "meta.embedded.expression.tsx": "typescriptreact" }, "tokenTypes": { "entity.name.type.instance.jsdoc": "other", "entity.name.function.tagged-template": "other", "meta.import string.quoted": "other", "variable.other.jsdoc": "other" } }, { "scopeName": "documentation.injection.ts", "path": "./syntaxes/jsdoc.ts.injection.tmLanguage.json", "injectTo": ["source.ts", "source.tsx"] }, { "scopeName": "documentation.injection.js.jsx", "path": "./syntaxes/jsdoc.js.injection.tmLanguage.json", "injectTo": ["source.js", "source.js.jsx"] }], "semanticTokenScopes": [{ "language": "typescript", "scopes": { "property": ["variable.other.property.ts"], "property.readonly": ["variable.other.constant.property.ts"], "variable": ["variable.other.readwrite.ts"], "variable.readonly": ["variable.other.constant.object.ts"], "function": ["entity.name.function.ts"], "namespace": ["entity.name.type.module.ts"], "variable.defaultLibrary": ["support.variable.ts"], "function.defaultLibrary": ["support.function.ts"] } }, { "language": "typescriptreact", "scopes": { "property": ["variable.other.property.tsx"], "property.readonly": ["variable.other.constant.property.tsx"], "variable": ["variable.other.readwrite.tsx"], "variable.readonly": ["variable.other.constant.object.tsx"], "function": ["entity.name.function.tsx"], "namespace": ["entity.name.type.module.tsx"], "variable.defaultLibrary": ["support.variable.tsx"], "function.defaultLibrary": ["support.function.tsx"] } }], "snippets": [{ "language": "typescript", "path": "./snippets/typescript.code-snippets" }, { "language": "typescriptreact", "path": "./snippets/typescript.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "typescript-basics", "packageNLS": { "displayName": "TypeScript Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in TypeScript files." } }, { "packageJSON": { "name": "typescript-language-features", "description": "%description%", "displayName": "%displayName%", "version": "1.0.0", "icon": "icon.png", "author": "vscode", "publisher": "vscode", "license": "MIT", "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217", "enableProposedApi": true, "engines": { "vscode": "^1.30.0" }, "categories": ["Programming Languages"], "dependencies": { "jsonc-parser": "^2.2.1", "semver": "5.5.1", "typescript-vscode-sh-plugin": "^0.6.14", "vscode-extension-telemetry": "0.1.1", "vscode-nls": "^4.1.1" }, "devDependencies": { "@types/node": "^12.19.9", "@types/rimraf": "^2.0.4", "@types/semver": "^5.5.0" }, "scripts": { "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:typescript-language-features", "compile-web": "npx webpack-cli --config extension-browser.webpack.config --mode none", "watch-web": "npx webpack-cli --config extension-browser.webpack.config --mode none --watch --info-verbosity verbose" }, "activationEvents": ["onLanguage:javascript", "onLanguage:javascriptreact", "onLanguage:typescript", "onLanguage:typescriptreact", "onLanguage:jsx-tags", "onCommand:typescript.reloadProjects", "onCommand:javascript.reloadProjects", "onCommand:typescript.selectTypeScriptVersion", "onCommand:javascript.goToProjectConfig", "onCommand:typescript.goToProjectConfig", "onCommand:typescript.openTsServerLog", "onCommand:workbench.action.tasks.runTask", "onCommand:_typescript.configurePlugin", "onCommand:_typescript.learnMoreAboutRefactorings", "onCommand:typescript.fileReferences", "onLanguage:jsonc"], "main": "./out/extension", "browser": "./dist/browser/extension", "contributes": { "jsonValidation": [{ "fileMatch": "package.json", "url": "./schemas/package.schema.json" }, { "fileMatch": "tsconfig.json", "url": "https://json.schemastore.org/tsconfig" }, { "fileMatch": "tsconfig.json", "url": "./schemas/tsconfig.schema.json" }, { "fileMatch": "tsconfig.*.json", "url": "https://json.schemastore.org/tsconfig" }, { "fileMatch": "tsconfig-*.json", "url": "./schemas/tsconfig.schema.json" }, { "fileMatch": "tsconfig-*.json", "url": "https://json.schemastore.org/tsconfig" }, { "fileMatch": "tsconfig.*.json", "url": "./schemas/tsconfig.schema.json" }, { "fileMatch": "typings.json", "url": "https://json.schemastore.org/typings" }, { "fileMatch": ".bowerrc", "url": "https://json.schemastore.org/bowerrc" }, { "fileMatch": ".babelrc", "url": "https://json.schemastore.org/babelrc" }, { "fileMatch": ".babelrc.json", "url": "https://json.schemastore.org/babelrc" }, { "fileMatch": "babel.config.json", "url": "https://json.schemastore.org/babelrc" }, { "fileMatch": "jsconfig.json", "url": "https://json.schemastore.org/jsconfig" }, { "fileMatch": "jsconfig.json", "url": "./schemas/jsconfig.schema.json" }, { "fileMatch": "jsconfig.*.json", "url": "https://json.schemastore.org/jsconfig" }, { "fileMatch": "jsconfig.*.json", "url": "./schemas/jsconfig.schema.json" }], "configuration": { "type": "object", "title": "%configuration.typescript%", "order": 20, "properties": { "typescript.tsdk": { "type": ["string", "null"], "default": null, "markdownDescription": "%typescript.tsdk.desc%", "scope": "window" }, "typescript.disableAutomaticTypeAcquisition": { "type": "boolean", "default": false, "description": "%typescript.disableAutomaticTypeAcquisition%", "scope": "window", "tags": ["usesOnlineServices"] }, "typescript.enablePromptUseWorkspaceTsdk": { "type": "boolean", "default": false, "description": "%typescript.enablePromptUseWorkspaceTsdk%", "scope": "window" }, "typescript.npm": { "type": ["string", "null"], "default": null, "description": "%typescript.npm%", "scope": "machine" }, "typescript.check.npmIsInstalled": { "type": "boolean", "default": true, "description": "%typescript.check.npmIsInstalled%", "scope": "window" }, "javascript.referencesCodeLens.enabled": { "type": "boolean", "default": false, "description": "%javascript.referencesCodeLens.enabled%", "scope": "window" }, "javascript.referencesCodeLens.showOnAllFunctions": { "type": "boolean", "default": false, "description": "%javascript.referencesCodeLens.showOnAllFunctions%", "scope": "window" }, "typescript.referencesCodeLens.enabled": { "type": "boolean", "default": false, "description": "%typescript.referencesCodeLens.enabled%", "scope": "window" }, "typescript.referencesCodeLens.showOnAllFunctions": { "type": "boolean", "default": false, "description": "%typescript.referencesCodeLens.showOnAllFunctions%", "scope": "window" }, "typescript.implementationsCodeLens.enabled": { "type": "boolean", "default": false, "description": "%typescript.implementationsCodeLens.enabled%", "scope": "window" }, "typescript.tsserver.enableTracing": { "type": "boolean", "default": false, "description": "%typescript.tsserver.enableTracing%", "scope": "window" }, "typescript.tsserver.log": { "type": "string", "enum": ["off", "terse", "normal", "verbose"], "default": "off", "description": "%typescript.tsserver.log%", "scope": "window" }, "typescript.tsserver.pluginPaths": { "type": "array", "items": { "type": "string", "description": "%typescript.tsserver.pluginPaths.item%" }, "default": [], "description": "%typescript.tsserver.pluginPaths%", "scope": "machine" }, "typescript.tsserver.trace": { "type": "string", "enum": ["off", "messages", "verbose"], "default": "off", "description": "%typescript.tsserver.trace%", "scope": "window" }, "javascript.suggest.completeFunctionCalls": { "type": "boolean", "default": false, "description": "%configuration.suggest.completeFunctionCalls%", "scope": "resource" }, "typescript.suggest.completeFunctionCalls": { "type": "boolean", "default": false, "description": "%configuration.suggest.completeFunctionCalls%", "scope": "resource" }, "javascript.suggest.includeAutomaticOptionalChainCompletions": { "type": "boolean", "default": true, "description": "%configuration.suggest.includeAutomaticOptionalChainCompletions%", "scope": "resource" }, "typescript.suggest.includeAutomaticOptionalChainCompletions": { "type": "boolean", "default": true, "description": "%configuration.suggest.includeAutomaticOptionalChainCompletions%", "scope": "resource" }, "typescript.reportStyleChecksAsWarnings": { "type": "boolean", "default": true, "description": "%typescript.reportStyleChecksAsWarnings%", "scope": "window" }, "typescript.validate.enable": { "type": "boolean", "default": true, "description": "%typescript.validate.enable%", "scope": "window" }, "typescript.format.enable": { "type": "boolean", "default": true, "description": "%typescript.format.enable%", "scope": "window" }, "typescript.format.insertSpaceAfterCommaDelimiter": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterCommaDelimiter%", "scope": "resource" }, "typescript.format.insertSpaceAfterConstructor": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterConstructor%", "scope": "resource" }, "typescript.format.insertSpaceAfterSemicolonInForStatements": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterSemicolonInForStatements%", "scope": "resource" }, "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": { "type": "boolean", "default": true, "description": "%format.insertSpaceBeforeAndAfterBinaryOperators%", "scope": "resource" }, "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterKeywordsInControlFlowStatements%", "scope": "resource" }, "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterFunctionKeywordForAnonymousFunctions%", "scope": "resource" }, "typescript.format.insertSpaceBeforeFunctionParenthesis": { "type": "boolean", "default": false, "description": "%format.insertSpaceBeforeFunctionParenthesis%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces%", "scope": "resource" }, "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces%", "scope": "resource" }, "typescript.format.insertSpaceAfterTypeAssertion": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterTypeAssertion%", "scope": "resource" }, "typescript.format.placeOpenBraceOnNewLineForFunctions": { "type": "boolean", "default": false, "description": "%format.placeOpenBraceOnNewLineForFunctions%", "scope": "resource" }, "typescript.format.placeOpenBraceOnNewLineForControlBlocks": { "type": "boolean", "default": false, "description": "%format.placeOpenBraceOnNewLineForControlBlocks%", "scope": "resource" }, "typescript.format.semicolons": { "type": "string", "default": "ignore", "description": "%format.semicolons%", "scope": "resource", "enum": ["ignore", "insert", "remove"], "enumDescriptions": ["%format.semicolons.ignore%", "%format.semicolons.insert%", "%format.semicolons.remove%"] }, "javascript.validate.enable": { "type": "boolean", "default": true, "description": "%javascript.validate.enable%", "scope": "window" }, "javascript.format.enable": { "type": "boolean", "default": true, "description": "%javascript.format.enable%", "scope": "window" }, "javascript.format.insertSpaceAfterCommaDelimiter": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterCommaDelimiter%", "scope": "resource" }, "javascript.format.insertSpaceAfterConstructor": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterConstructor%", "scope": "resource" }, "javascript.format.insertSpaceAfterSemicolonInForStatements": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterSemicolonInForStatements%", "scope": "resource" }, "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": { "type": "boolean", "default": true, "description": "%format.insertSpaceBeforeAndAfterBinaryOperators%", "scope": "resource" }, "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterKeywordsInControlFlowStatements%", "scope": "resource" }, "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterFunctionKeywordForAnonymousFunctions%", "scope": "resource" }, "javascript.format.insertSpaceBeforeFunctionParenthesis": { "type": "boolean", "default": false, "description": "%format.insertSpaceBeforeFunctionParenthesis%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": { "type": "boolean", "default": true, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces%", "scope": "resource" }, "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": { "type": "boolean", "default": false, "description": "%format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces%", "scope": "resource" }, "javascript.format.placeOpenBraceOnNewLineForFunctions": { "type": "boolean", "default": false, "description": "%format.placeOpenBraceOnNewLineForFunctions%", "scope": "resource" }, "javascript.format.placeOpenBraceOnNewLineForControlBlocks": { "type": "boolean", "default": false, "description": "%format.placeOpenBraceOnNewLineForControlBlocks%", "scope": "resource" }, "javascript.format.semicolons": { "type": "string", "default": "ignore", "description": "%format.semicolons%", "scope": "resource", "enum": ["ignore", "insert", "remove"], "enumDescriptions": ["%format.semicolons.ignore%", "%format.semicolons.insert%", "%format.semicolons.remove%"] }, "javascript.implicitProjectConfig.checkJs": { "type": "boolean", "default": false, "markdownDescription": "%configuration.implicitProjectConfig.checkJs%", "markdownDeprecationMessage": "%configuration.javascript.checkJs.checkJs.deprecation%", "scope": "window" }, "js/ts.implicitProjectConfig.checkJs": { "type": "boolean", "default": false, "markdownDescription": "%configuration.implicitProjectConfig.checkJs%", "scope": "window" }, "javascript.implicitProjectConfig.experimentalDecorators": { "type": "boolean", "default": false, "markdownDescription": "%configuration.implicitProjectConfig.experimentalDecorators%", "markdownDeprecationMessage": "%configuration.javascript.checkJs.experimentalDecorators.deprecation%", "scope": "window" }, "js/ts.implicitProjectConfig.experimentalDecorators": { "type": "boolean", "default": false, "markdownDescription": "%configuration.implicitProjectConfig.experimentalDecorators%", "scope": "window" }, "js/ts.implicitProjectConfig.strictNullChecks": { "type": "boolean", "default": false, "markdownDescription": "%configuration.implicitProjectConfig.strictNullChecks%", "scope": "window" }, "js/ts.implicitProjectConfig.strictFunctionTypes": { "type": "boolean", "default": true, "markdownDescription": "%configuration.implicitProjectConfig.strictFunctionTypes%", "scope": "window" }, "javascript.suggest.names": { "type": "boolean", "default": true, "markdownDescription": "%configuration.suggest.names%", "scope": "resource" }, "typescript.tsc.autoDetect": { "type": "string", "default": "on", "enum": ["on", "off", "build", "watch"], "markdownEnumDescriptions": ["%typescript.tsc.autoDetect.on%", "%typescript.tsc.autoDetect.off%", "%typescript.tsc.autoDetect.build%", "%typescript.tsc.autoDetect.watch%"], "description": "%typescript.tsc.autoDetect%", "scope": "window" }, "javascript.suggest.paths": { "type": "boolean", "default": true, "description": "%configuration.suggest.paths%", "scope": "resource" }, "typescript.suggest.paths": { "type": "boolean", "default": true, "description": "%configuration.suggest.paths%", "scope": "resource" }, "javascript.suggest.autoImports": { "type": "boolean", "default": true, "description": "%configuration.suggest.autoImports%", "scope": "resource" }, "typescript.suggest.autoImports": { "type": "boolean", "default": true, "description": "%configuration.suggest.autoImports%", "scope": "resource" }, "javascript.suggest.completeJSDocs": { "type": "boolean", "default": true, "description": "%configuration.suggest.completeJSDocs%", "scope": "resource" }, "typescript.suggest.completeJSDocs": { "type": "boolean", "default": true, "description": "%configuration.suggest.completeJSDocs%", "scope": "resource" }, "javascript.suggest.jsdoc.generateReturns": { "type": "boolean", "default": true, "markdownDescription": "%configuration.suggest.jsdoc.generateReturns%", "scope": "resource" }, "typescript.suggest.jsdoc.generateReturns": { "type": "boolean", "default": true, "markdownDescription": "%configuration.suggest.jsdoc.generateReturns%", "scope": "resource" }, "typescript.locale": { "type": ["string", "null"], "enum": ["de", "es", "en", "fr", "it", "ja", "ko", "ru", "zh-CN", "zh-TW", null], "default": null, "markdownDescription": "%typescript.locale%", "scope": "window" }, "javascript.suggestionActions.enabled": { "type": "boolean", "default": true, "description": "%javascript.suggestionActions.enabled%", "scope": "resource" }, "typescript.suggestionActions.enabled": { "type": "boolean", "default": true, "description": "%typescript.suggestionActions.enabled%", "scope": "resource" }, "javascript.preferences.quoteStyle": { "type": "string", "enum": ["auto", "single", "double"], "default": "auto", "markdownDescription": "%typescript.preferences.quoteStyle%", "scope": "resource" }, "typescript.preferences.quoteStyle": { "type": "string", "enum": ["auto", "single", "double"], "default": "auto", "markdownDescription": "%typescript.preferences.quoteStyle%", "scope": "resource" }, "javascript.preferences.importModuleSpecifier": { "type": "string", "enum": ["shortest", "relative", "non-relative", "project-relative"], "markdownEnumDescriptions": ["%typescript.preferences.importModuleSpecifier.shortest%", "%typescript.preferences.importModuleSpecifier.relative%", "%typescript.preferences.importModuleSpecifier.nonRelative%", "%typescript.preferences.importModuleSpecifier.projectRelative%"], "default": "shortest", "description": "%typescript.preferences.importModuleSpecifier%", "scope": "resource" }, "typescript.preferences.importModuleSpecifier": { "type": "string", "enum": ["shortest", "relative", "non-relative", "project-relative"], "markdownEnumDescriptions": ["%typescript.preferences.importModuleSpecifier.shortest%", "%typescript.preferences.importModuleSpecifier.relative%", "%typescript.preferences.importModuleSpecifier.nonRelative%", "%typescript.preferences.importModuleSpecifier.projectRelative%"], "default": "shortest", "description": "%typescript.preferences.importModuleSpecifier%", "scope": "resource" }, "javascript.preferences.importModuleSpecifierEnding": { "type": "string", "enum": ["auto", "minimal", "index", "js"], "markdownEnumDescriptions": ["%typescript.preferences.importModuleSpecifierEnding.auto%", "%typescript.preferences.importModuleSpecifierEnding.minimal%", "%typescript.preferences.importModuleSpecifierEnding.index%", "%typescript.preferences.importModuleSpecifierEnding.js%"], "default": "auto", "description": "%typescript.preferences.importModuleSpecifierEnding%", "scope": "resource" }, "typescript.preferences.importModuleSpecifierEnding": { "type": "string", "enum": ["auto", "minimal", "index", "js"], "markdownEnumDescriptions": ["%typescript.preferences.importModuleSpecifierEnding.auto%", "%typescript.preferences.importModuleSpecifierEnding.minimal%", "%typescript.preferences.importModuleSpecifierEnding.index%", "%typescript.preferences.importModuleSpecifierEnding.js%"], "default": "auto", "description": "%typescript.preferences.importModuleSpecifierEnding%", "scope": "resource" }, "typescript.preferences.includePackageJsonAutoImports": { "type": "string", "enum": ["auto", "on", "off"], "enumDescriptions": ["%typescript.preferences.includePackageJsonAutoImports.auto%", "%typescript.preferences.includePackageJsonAutoImports.on%", "%typescript.preferences.includePackageJsonAutoImports.off%"], "default": "auto", "markdownDescription": "%typescript.preferences.includePackageJsonAutoImports%", "scope": "window" }, "javascript.preferences.renameShorthandProperties": { "type": "boolean", "default": true, "description": "%typescript.preferences.useAliasesForRenames%", "deprecationMessage": "%typescript.preferences.renameShorthandProperties.deprecationMessage%", "scope": "resource" }, "typescript.preferences.renameShorthandProperties": { "type": "boolean", "default": true, "description": "%typescript.preferences.useAliasesForRenames%", "deprecationMessage": "%typescript.preferences.renameShorthandProperties.deprecationMessage%", "scope": "resource" }, "javascript.preferences.useAliasesForRenames": { "type": "boolean", "default": true, "description": "%typescript.preferences.useAliasesForRenames%", "scope": "resource" }, "typescript.preferences.useAliasesForRenames": { "type": "boolean", "default": true, "description": "%typescript.preferences.useAliasesForRenames%", "scope": "resource" }, "typescript.updateImportsOnFileMove.enabled": { "type": "string", "enum": ["prompt", "always", "never"], "markdownEnumDescriptions": ["%typescript.updateImportsOnFileMove.enabled.prompt%", "%typescript.updateImportsOnFileMove.enabled.always%", "%typescript.updateImportsOnFileMove.enabled.never%"], "default": "prompt", "description": "%typescript.updateImportsOnFileMove.enabled%", "scope": "resource" }, "javascript.updateImportsOnFileMove.enabled": { "type": "string", "enum": ["prompt", "always", "never"], "markdownEnumDescriptions": ["%typescript.updateImportsOnFileMove.enabled.prompt%", "%typescript.updateImportsOnFileMove.enabled.always%", "%typescript.updateImportsOnFileMove.enabled.never%"], "default": "prompt", "description": "%typescript.updateImportsOnFileMove.enabled%", "scope": "resource" }, "typescript.autoClosingTags": { "type": "boolean", "default": true, "description": "%typescript.autoClosingTags%" }, "javascript.autoClosingTags": { "type": "boolean", "default": true, "description": "%typescript.autoClosingTags%" }, "javascript.suggest.enabled": { "type": "boolean", "default": true, "description": "%typescript.suggest.enabled%", "scope": "resource" }, "typescript.suggest.enabled": { "type": "boolean", "default": true, "description": "%typescript.suggest.enabled%", "scope": "resource" }, "typescript.surveys.enabled": { "type": "boolean", "default": true, "description": "%configuration.surveys.enabled%", "scope": "window" }, "typescript.tsserver.useSeparateSyntaxServer": { "type": "boolean", "default": true, "description": "%configuration.tsserver.useSeparateSyntaxServer%", "scope": "window" }, "typescript.tsserver.maxTsServerMemory": { "type": "number", "default": 3072, "description": "%configuration.tsserver.maxTsServerMemory%", "scope": "window" }, "typescript.tsserver.experimental.enableProjectDiagnostics": { "type": "boolean", "default": false, "description": "%configuration.tsserver.experimental.enableProjectDiagnostics%", "scope": "window" }, "typescript.tsserver.watchOptions": { "type": "object", "description": "%configuration.tsserver.watchOptions%", "scope": "window", "properties": { "watchFile": { "type": "string", "description": "%configuration.tsserver.watchOptions.watchFile%", "enum": ["fixedPollingInterval", "priorityPollingInterval", "dynamicPriorityPolling", "useFsEvents", "useFsEventsOnParentDirectory"], "enumDescriptions": ["%configuration.tsserver.watchOptions.watchFile.fixedPollingInterval%", "%configuration.tsserver.watchOptions.watchFile.priorityPollingInterval%", "%configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling%", "%configuration.tsserver.watchOptions.watchFile.useFsEvents%", "%configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory%"], "default": "useFsEvents" }, "watchDirectory": { "type": "string", "description": "%configuration.tsserver.watchOptions.watchDirectory%", "enum": ["fixedPollingInterval", "dynamicPriorityPolling", "useFsEvents"], "enumDescriptions": ["%configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval%", "%configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling%", "%configuration.tsserver.watchOptions.watchDirectory.useFsEvents%"], "default": "useFsEvents" }, "fallbackPolling": { "type": "string", "description": "%configuration.tsserver.watchOptions.fallbackPolling%", "enum": ["fixedPollingInterval", "priorityPollingInterval", "dynamicPriorityPolling"], "enumDescriptions": ["configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval", "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval", "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling"] }, "synchronousWatchDirectory": { "type": "boolean", "description": "%configuration.tsserver.watchOptions.synchronousWatchDirectory%" } } }, "typescript.workspaceSymbols.scope": { "type": "string", "enum": ["allOpenProjects", "currentProject"], "enumDescriptions": ["%typescript.workspaceSymbols.scope.allOpenProjects%", "%typescript.workspaceSymbols.scope.currentProject%"], "default": "allOpenProjects", "markdownDescription": "%typescript.workspaceSymbols.scope%", "scope": "window" } } }, "commands": [{ "command": "typescript.reloadProjects", "title": "%reloadProjects.title%", "category": "TypeScript" }, { "command": "javascript.reloadProjects", "title": "%reloadProjects.title%", "category": "JavaScript" }, { "command": "typescript.selectTypeScriptVersion", "title": "%typescript.selectTypeScriptVersion.title%", "category": "TypeScript" }, { "command": "typescript.goToProjectConfig", "title": "%goToProjectConfig.title%", "category": "TypeScript" }, { "command": "javascript.goToProjectConfig", "title": "%goToProjectConfig.title%", "category": "JavaScript" }, { "command": "typescript.openTsServerLog", "title": "%typescript.openTsServerLog.title%", "category": "TypeScript" }, { "command": "typescript.restartTsServer", "title": "%typescript.restartTsServer%", "category": "TypeScript" }, { "command": "typescript.findAllFileReferences", "title": "%typescript.findAllFileReferences%", "category": "TypeScript" }], "menus": { "commandPalette": [{ "command": "typescript.reloadProjects", "when": "editorLangId == typescript && typescript.isManagedFile" }, { "command": "typescript.reloadProjects", "when": "editorLangId == typescriptreact && typescript.isManagedFile" }, { "command": "javascript.reloadProjects", "when": "editorLangId == javascript && typescript.isManagedFile" }, { "command": "javascript.reloadProjects", "when": "editorLangId == javascriptreact && typescript.isManagedFile" }, { "command": "typescript.goToProjectConfig", "when": "editorLangId == typescript && typescript.isManagedFile" }, { "command": "typescript.goToProjectConfig", "when": "editorLangId == typescriptreact" }, { "command": "javascript.goToProjectConfig", "when": "editorLangId == javascript && typescript.isManagedFile" }, { "command": "javascript.goToProjectConfig", "when": "editorLangId == javascriptreact && typescript.isManagedFile" }, { "command": "typescript.selectTypeScriptVersion", "when": "typescript.isManagedFile" }, { "command": "typescript.openTsServerLog", "when": "typescript.isManagedFile" }, { "command": "typescript.restartTsServer", "when": "typescript.isManagedFile" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && typescript.isManagedFile" }], "explorer/context": [{ "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == javascript" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == javascriptreact" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == typescript" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == typescriptreact" }], "editor/title/context": [{ "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == javascript" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == javascriptreact" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == typescript" }, { "command": "typescript.findAllFileReferences", "when": "tsSupportsFileReferences && resourceLangId == typescriptreact" }] }, "breakpoints": [{ "language": "typescript" }, { "language": "typescriptreact" }], "taskDefinitions": [{ "type": "typescript", "required": ["tsconfig"], "properties": { "tsconfig": { "type": "string", "description": "%taskDefinition.tsconfig.description%" }, "option": { "type": "string" } } }], "problemPatterns": [{ "name": "tsc", "regexp": "^([^\\s].*)[\\(:](\\d+)[,:](\\d+)(?:\\):\\s+|\\s+-\\s+)(error|warning|info)\\s+TS(\\d+)\\s*:\\s*(.*)$", "file": 1, "line": 2, "column": 3, "severity": 4, "code": 5, "message": 6 }], "problemMatchers": [{ "name": "tsc", "label": "%typescript.problemMatchers.tsc.label%", "owner": "typescript", "source": "ts", "applyTo": "closedDocuments", "fileLocation": ["relative", "${cwd}"], "pattern": "$tsc" }, { "name": "tsc-watch", "label": "%typescript.problemMatchers.tscWatch.label%", "owner": "typescript", "source": "ts", "applyTo": "closedDocuments", "fileLocation": ["relative", "${cwd}"], "pattern": "$tsc", "background": { "activeOnStart": true, "beginsPattern": { "regexp": "^\\s*(?:message TS6032:|\\[?\\D*\\d{1,2}[:.]\\d{1,2}[:.]\\d{1,2}\\D*(├\\D*\\d{1,2}\\D+┤)?(?:\\]| -)) File change detected\\. Starting incremental compilation\\.\\.\\." }, "endsPattern": { "regexp": "^\\s*(?:message TS6042:|\\[?\\D*\\d{1,2}[:.]\\d{1,2}[:.]\\d{1,2}\\D*(├\\D*\\d{1,2}\\D+┤)?(?:\\]| -)) (?:Compilation complete\\.|Found \\d+ errors?\\.) Watching for file changes\\." } } }], "codeActions": [{ "languages": ["javascript", "javascriptreact", "typescript", "typescriptreact"], "actions": [{ "kind": "refactor.extract.constant", "title": "%codeActions.refactor.extract.constant.title%", "description": "%codeActions.refactor.extract.constant.description%" }, { "kind": "refactor.extract.function", "title": "%codeActions.refactor.extract.function.title%", "description": "%codeActions.refactor.extract.function.description%" }, { "kind": "refactor.extract.interface", "title": "%codeActions.refactor.extract.interface.title%", "description": "%codeActions.refactor.extract.interface.description%" }, { "kind": "refactor.extract.type", "title": "%codeActions.refactor.extract.type.title%", "description": "%codeActions.refactor.extract.type.description%" }, { "kind": "refactor.rewrite.import", "title": "%codeActions.refactor.rewrite.import.title%", "description": "%codeActions.refactor.rewrite.import.description%" }, { "kind": "refactor.rewrite.export", "title": "%codeActions.refactor.rewrite.export.title%", "description": "%codeActions.refactor.rewrite.export.description%" }, { "kind": "refactor.rewrite.arrow.braces", "title": "%codeActions.refactor.rewrite.arrow.braces.title%", "description": "%codeActions.refactor.rewrite.arrow.braces.description%" }, { "kind": "refactor.rewrite.parameters.toDestructured", "title": "%codeActions.refactor.rewrite.parameters.toDestructured.title%" }, { "kind": "refactor.rewrite.property.generateAccessors", "title": "%codeActions.refactor.rewrite.property.generateAccessors.title%", "description": "%codeActions.refactor.rewrite.property.generateAccessors.description%" }, { "kind": "refactor.move.newFile", "title": "%codeActions.refactor.move.newFile.title%", "description": "%codeActions.refactor.move.newFile.description%" }, { "kind": "source.organizeImports", "title": "%codeActions.source.organizeImports.title%" }] }], "typescriptServerPlugins": [{ "name": "typescript-vscode-sh-plugin", "enableForWorkspaceTypeScriptVersions": true }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "typescript-language-features", "packageNLS": { "displayName": "TypeScript and JavaScript Language Features", "description": "Provides rich language support for JavaScript and TypeScript.", "reloadProjects.title": "Reload Project", "configuration.typescript": "TypeScript", "configuration.suggest.completeFunctionCalls": "Complete functions with their parameter signature.", "configuration.suggest.includeAutomaticOptionalChainCompletions": "Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.", "typescript.tsdk.desc": "Specifies the folder path to the tsserver and lib*.d.ts files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.\n\n- When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.\n- When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.\n\nSee the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.", "typescript.disableAutomaticTypeAcquisition": "Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.", "typescript.enablePromptUseWorkspaceTsdk": "Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.", "typescript.tsserver.enableTracing": "Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.", "typescript.tsserver.log": "Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.", "typescript.tsserver.pluginPaths": "Additional paths to discover TypeScript Language Service plugins.", "typescript.tsserver.pluginPaths.item": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s).", "typescript.tsserver.trace": "Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.", "typescript.validate.enable": "Enable/disable TypeScript validation.", "typescript.format.enable": "Enable/disable default TypeScript formatter.", "javascript.format.enable": "Enable/disable default JavaScript formatter.", "format.insertSpaceAfterCommaDelimiter": "Defines space handling after a comma delimiter.", "format.insertSpaceAfterConstructor": "Defines space handling after the constructor keyword.", "format.insertSpaceAfterSemicolonInForStatements": "Defines space handling after a semicolon in a for statement.", "format.insertSpaceBeforeAndAfterBinaryOperators": "Defines space handling after a binary operator.", "format.insertSpaceAfterKeywordsInControlFlowStatements": "Defines space handling after keywords in a control flow statement.", "format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Defines space handling after function keyword for anonymous functions.", "format.insertSpaceBeforeFunctionParenthesis": "Defines space handling before function argument parentheses.", "format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Defines space handling after opening and before closing non-empty parenthesis.", "format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Defines space handling after opening and before closing non-empty brackets.", "format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Defines space handling after opening and before closing non-empty braces.", "format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Defines space handling after opening and before closing empty braces.", "format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Defines space handling after opening and before closing template string braces.", "format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Defines space handling after opening and before closing JSX expression braces.", "format.insertSpaceAfterTypeAssertion": "Defines space handling after type assertions in TypeScript.", "format.placeOpenBraceOnNewLineForFunctions": "Defines whether an open brace is put onto a new line for functions or not.", "format.placeOpenBraceOnNewLineForControlBlocks": "Defines whether an open brace is put onto a new line for control blocks or not.", "format.semicolons": "Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.", "format.semicolons.ignore": "Don't insert or remove any semicolons.", "format.semicolons.insert": "Insert semicolons at statement ends.", "format.semicolons.remove": "Remove unnecessary semicolons.", "javascript.validate.enable": "Enable/disable JavaScript validation.", "goToProjectConfig.title": "Go to Project Configuration", "javascript.referencesCodeLens.enabled": "Enable/disable references CodeLens in JavaScript files.", "javascript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in JavaScript files.", "typescript.referencesCodeLens.enabled": "Enable/disable references CodeLens in TypeScript files.", "typescript.referencesCodeLens.showOnAllFunctions": "Enable/disable references CodeLens on all functions in TypeScript files.", "typescript.implementationsCodeLens.enabled": "Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.", "typescript.openTsServerLog.title": "Open TS Server log", "typescript.restartTsServer": "Restart TS server", "typescript.selectTypeScriptVersion.title": "Select TypeScript Version...", "typescript.reportStyleChecksAsWarnings": "Report style checks as warnings.", "typescript.npm": "Specifies the path to the npm executable used for Automatic Type Acquisition.", "typescript.check.npmIsInstalled": "Check if npm is installed for Automatic Type Acquisition.", "configuration.suggest.names": "Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.", "typescript.tsc.autoDetect": "Controls auto detection of tsc tasks.", "typescript.tsc.autoDetect.off": "Disable this feature.", "typescript.tsc.autoDetect.on": "Create both build and watch tasks.", "typescript.tsc.autoDetect.build": "Only create single run compile tasks.", "typescript.tsc.autoDetect.watch": "Only create compile and watch tasks.", "typescript.problemMatchers.tsc.label": "TypeScript problems", "typescript.problemMatchers.tscWatch.label": "TypeScript problems (watch mode)", "configuration.suggest.paths": "Enable/disable suggestions for paths in import statements and require calls.", "configuration.tsserver.useSeparateSyntaxServer": "Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.", "configuration.tsserver.maxTsServerMemory": "Set the maximum amount of memory (in MB) to allocate to the TypeScript server process", "configuration.tsserver.experimental.enableProjectDiagnostics": "(Experimental) Enables project wide error reporting.", "typescript.locale": "Sets the locale used to report JavaScript and TypeScript errors. Default of `null` uses VS Code's locale.", "configuration.implicitProjectConfig.checkJs": "Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.", "configuration.javascript.checkJs.checkJs.deprecation": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.", "configuration.implicitProjectConfig.experimentalDecorators": "Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.", "configuration.javascript.checkJs.experimentalDecorators.deprecation": "This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.", "configuration.implicitProjectConfig.strictNullChecks": "Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.", "configuration.implicitProjectConfig.strictFunctionTypes": "Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.", "configuration.suggest.jsdoc.generateReturns": "Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.", "configuration.suggest.autoImports": "Enable/disable auto import suggestions.", "taskDefinition.tsconfig.description": "The tsconfig file that defines the TS build.", "javascript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for JavaScript files in the editor.", "typescript.suggestionActions.enabled": "Enable/disable suggestion diagnostics for TypeScript files in the editor.", "typescript.preferences.quoteStyle": "Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.", "typescript.preferences.importModuleSpecifier": "Preferred path style for auto imports.", "typescript.preferences.importModuleSpecifier.shortest": "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.", "typescript.preferences.importModuleSpecifier.relative": "Prefers a relative path to the imported file location.", "typescript.preferences.importModuleSpecifier.nonRelative": "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.", "typescript.preferences.importModuleSpecifier.projectRelative": "Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.", "typescript.preferences.importModuleSpecifierEnding": "Preferred path ending for auto imports.", "typescript.preferences.importModuleSpecifierEnding.auto": "Use project settings to select a default.", "typescript.preferences.importModuleSpecifierEnding.minimal": "Shorten `./component/index.js` to `./component`.", "typescript.preferences.importModuleSpecifierEnding.index": "Shorten `./component/index.js` to `./component/index`.", "typescript.preferences.importModuleSpecifierEnding.js": "Do not shorten path endings; include the `.js` extension.", "typescript.preferences.includePackageJsonAutoImports": "Enable/disable searching `package.json` dependencies for available auto imports.", "typescript.preferences.includePackageJsonAutoImports.auto": "Search dependencies based on estimated performance impact.", "typescript.preferences.includePackageJsonAutoImports.on": "Always search dependencies.", "typescript.preferences.includePackageJsonAutoImports.off": "Never search dependencies.", "typescript.updateImportsOnFileMove.enabled": "Enable/disable automatic updating of import paths when you rename or move a file in VS Code.", "typescript.updateImportsOnFileMove.enabled.prompt": "Prompt on each rename.", "typescript.updateImportsOnFileMove.enabled.always": "Always update paths automatically.", "typescript.updateImportsOnFileMove.enabled.never": "Never rename paths and don't prompt.", "typescript.autoClosingTags": "Enable/disable automatic closing of JSX tags.", "typescript.suggest.enabled": "Enabled/disable autocomplete suggestions.", "configuration.surveys.enabled": "Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.", "configuration.suggest.completeJSDocs": "Enable/disable suggestion to complete JSDoc comments.", "configuration.tsserver.watchOptions": "Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.", "configuration.tsserver.watchOptions.watchFile": "Strategy for how individual files are watched.", "configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.", "configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.", "configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified files will be checked less often.", "configuration.tsserver.watchOptions.watchFile.useFsEvents": "Attempt to use the operating system/file system’s native events for file changes.", "configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Attempt to use the operating system/file system’s native events to listen for changes on a file’s containing directories. This can use fewer file watchers, but might be less accurate.", "configuration.tsserver.watchOptions.watchDirectory": "Strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.", "configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Check every directory for changes several times a second at a fixed interval.", "configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Use a dynamic queue where less-frequently modified directories will be checked less often.", "configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Attempt to use the operating system/file system’s native events for directory changes.", "configuration.tsserver.watchOptions.fallbackPolling": "When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.", "configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Check every file for changes several times a second at a fixed interval.", "configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.", "configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Use a dynamic queue where less-frequently modified files will be checked less often.", "configuration.tsserver.watchOptions.synchronousWatchDirectory": "Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in node_modules from running npm install), but you might want to disable it with this flag for some less-common setups.", "typescript.preferences.renameShorthandProperties.deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'", "typescript.preferences.useAliasesForRenames": "Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.", "typescript.workspaceSymbols.scope": "Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).", "typescript.workspaceSymbols.scope.allOpenProjects": "Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.", "typescript.workspaceSymbols.scope.currentProject": "Only search for symbols in the current JavaScript or TypeScript project.", "codeActions.refactor.extract.constant.title": "Extract constant", "codeActions.refactor.extract.constant.description": "Extract expression to constant.", "codeActions.refactor.extract.function.title": "Extract function", "codeActions.refactor.extract.function.description": "Extract expression to method or function.", "codeActions.refactor.extract.type.title": "Extract type", "codeActions.refactor.extract.type.description": "Extract type to a type alias.", "codeActions.refactor.extract.interface.title": "Extract interface", "codeActions.refactor.extract.interface.description": "Extract type to an interface.", "codeActions.refactor.rewrite.import.title": "Convert import", "codeActions.refactor.rewrite.import.description": "Convert between named imports and namespace imports.", "codeActions.refactor.rewrite.export.title": "Convert export", "codeActions.refactor.rewrite.export.description": "Convert between default export and named export.", "codeActions.refactor.move.newFile.title": "Move to a new file", "codeActions.refactor.move.newFile.description": "Move the expression to a new file.", "codeActions.refactor.rewrite.arrow.braces.title": "Rewrite arrow braces", "codeActions.refactor.rewrite.arrow.braces.description": "Add or remove braces in an arrow function.", "codeActions.refactor.rewrite.parameters.toDestructured.title": "Convert parameters to destructured object", "codeActions.refactor.rewrite.property.generateAccessors.title": "Generate accessors", "codeActions.refactor.rewrite.property.generateAccessors.description": "Generate 'get' and 'set' accessors", "codeActions.source.organizeImports.title": "Organize imports", "typescript.findAllFileReferences": "Find File References" } }, { "packageJSON": { "name": "vb", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/asp.vb.net.tmbundle Syntaxes/ASP%20VB.net.plist ./syntaxes/asp-vb-net.tmlanguage.json" }, "contributes": { "languages": [{ "id": "vb", "extensions": [".vb", ".brs", ".vbs", ".bas"], "aliases": ["Visual Basic", "vb"], "configuration": "./language-configuration.json" }], "grammars": [{ "language": "vb", "scopeName": "source.asp.vb.net", "path": "./syntaxes/asp-vb-net.tmlanguage.json" }], "snippets": [{ "language": "vb", "path": "./snippets/vb.code-snippets" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vb", "packageNLS": { "displayName": "Visual Basic Language Basics", "description": "Provides snippets, syntax highlighting, bracket matching and folding in Visual Basic files." } }, { "packageJSON": { "name": "vscode-api-tests", "description": "API tests for VS Code", "version": "0.0.1", "publisher": "vscode", "license": "MIT", "enableProposedApi": true, "requiresWorkspaceTrust": "onDemand", "private": true, "activationEvents": [], "main": "./out/extension", "engines": { "vscode": "^1.25.0" }, "contributes": { "configuration": { "type": "object", "title": "Test Config", "properties": { "farboo.config0": { "type": "boolean", "default": true }, "farboo.nested.config1": { "type": "number", "default": 42 }, "farboo.nested.config2": { "type": "string", "default": "Das Pferd frisst kein Reis." }, "farboo.config4": { "type": "string" }, "farboo.get": { "type": "string", "default": "get-prop" } } }, "views": { "remote": [{ "id": "test.treeId", "name": "test-tree", "when": "never" }] }, "configurationDefaults": { "[abcLang]": { "editor.lineNumbers": "off", "editor.tabSize": 2 } }, "taskDefinitions": [{ "type": "custombuildscript", "required": ["flavor"], "properties": { "flavor": { "type": "string", "description": "The build flavor. Should be either '32' or '64'." }, "flags": { "type": "array", "description": "Additional build flags." } } }], "breakpoints": [{ "language": "markdown" }], "debuggers": [{ "type": "mock", "label": "Mock Debug", "languages": ["markdown"], "configurationAttributes": { "launch": { "required": ["program"], "properties": { "program": { "type": "string", "description": "Absolute path to a text file.", "default": "${workspaceFolder}/file.md" }, "stopOnEntry": { "type": "boolean", "description": "Automatically stop after launch.", "default": true }, "trace": { "type": "boolean", "description": "Enable logging of the Debug Adapter Protocol.", "default": true } } } }, "initialConfigurations": [{ "type": "mock", "request": "launch", "name": "Debug file.md", "program": "${workspaceFolder}/file.md" }] }], "notebookProvider": [{ "viewType": "notebookCoreTest", "displayName": "Notebook Core Test", "selector": [{ "filenamePattern": "*.vsctestnb", "excludeFileNamePattern": "" }] }, { "viewType": "notebook.nbdtest", "displayName": "notebook.nbdtest", "selector": [{ "filenamePattern": "**/*.nbdtest" }] }] }, "scripts": { "compile": "node ./node_modules/vscode/bin/compile -watch -p ./", "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-api-tests ./tsconfig.json" }, "devDependencies": { "@types/mocha": "^8.2.0", "@types/node": "^12.19.9" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vscode-api-tests", "packageNLS": null }, { "packageJSON": { "name": "vscode-colorize-tests", "description": "Colorize tests for VS Code", "version": "0.0.1", "publisher": "vscode", "license": "MIT", "private": true, "activationEvents": ["onLanguage:json"], "main": "./out/colorizerTestMain", "enableProposedApi": true, "engines": { "vscode": "*" }, "scripts": { "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-colorize-tests ./tsconfig.json" }, "dependencies": { "jsonc-parser": "2.2.1" }, "devDependencies": { "@types/node": "^12.19.9" }, "contributes": { "semanticTokenTypes": [{ "id": "testToken", "description": "A test token" }], "semanticTokenModifiers": [{ "id": "testModifier", "description": "A test modifier" }], "semanticTokenScopes": [{ "scopes": { "testToken": ["entity.name.function.special"] } }], "productIconThemes": [{ "id": "Test Product Icons", "label": "The Test Product Icon Theme", "path": "./producticons/test-product-icon-theme.json", "_watch": true }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vscode-colorize-tests", "packageNLS": null }, { "packageJSON": { "name": "vscode-custom-editor-tests", "description": "Custom editor tests for VS Code", "version": "0.0.1", "publisher": "vscode", "license": "MIT", "private": true, "activationEvents": ["onCustomEditor:testWebviewEditor.abc"], "main": "./out/extension", "enableProposedApi": true, "engines": { "vscode": "^1.48.0" }, "scripts": { "compile": "node ./node_modules/vscode/bin/compile -watch -p ./", "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-notebook-tests ./tsconfig.json" }, "dependencies": { "p-limit": "^3.0.2" }, "devDependencies": { "@types/node": "^12.19.9", "@types/p-limit": "^2.2.0" }, "contributes": { "customEditors": [{ "viewType": "testWebviewEditor.abc", "displayName": "Test ABC editor", "selector": [{ "filenamePattern": "*.abc" }] }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vscode-custom-editor-tests", "packageNLS": null }, { "packageJSON": { "name": "vscode-notebook-tests", "description": "Notebook tests for VS Code", "version": "0.0.1", "publisher": "vscode", "license": "MIT", "private": true, "activationEvents": ["*"], "main": "./out/extension", "enableProposedApi": true, "engines": { "vscode": "^1.25.0" }, "scripts": { "compile": "node ./node_modules/vscode/bin/compile -watch -p ./", "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-notebook-tests ./tsconfig.json" }, "dependencies": {}, "devDependencies": { "@types/node": "^12.19.9" }, "contributes": { "commands": [{ "command": "vscode-notebook-tests.createNewNotebook", "title": "Create New Notebook" }, { "command": "vscode-notebook-tests.debugAction", "title": "Debug Notebook Test Cell Action", "icon": "$(debug)" }], "notebookProvider": [{ "viewType": "notebookSmokeTest", "displayName": "Notebook Smoke Test", "selector": [{ "filenamePattern": "*.smoke-nb", "excludeFileNamePattern": "" }] }], "notebookOutputRenderer": [{ "id": "notebookCoreTestRenderer", "displayName": "Notebook Core Test Renderer", "entrypoint": "./src/customRenderer.js", "mimeTypes": ["text/custom"] }], "menus": { "notebook/cell/title": [{ "command": "vscode-notebook-tests.debugAction", "when": "notebookViewType == notebookSmokeTest", "group": "inline@1" }] }, "jsonValidation": [{ "fileMatch": "vscode://vscode-notebook-cell-metadata/*", "url": "vscode://schemas/notebook/cellmetadata" }] }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vscode-notebook-tests", "packageNLS": null }, { "packageJSON": { "name": "vscode-test-resolver", "description": "Test resolver for VS Code", "version": "0.0.1", "publisher": "vscode", "license": "MIT", "enableProposedApi": true, "private": true, "engines": { "vscode": "^1.25.0" }, "extensionKind": ["ui"], "scripts": { "compile": "node ./node_modules/vscode/bin/compile -watch -p ./", "vscode:prepublish": "node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-test-resolver" }, "activationEvents": ["onResolveRemoteAuthority:test", "onCommand:vscode-testresolver.newWindow", "onCommand:vscode-testresolver.newWindowWithError", "onCommand:vscode-testresolver.showLog", "onCommand:vscode-testresolver.openTunnel", "onCommand:vscode-testresolver.startRemoteServer"], "main": "./out/extension", "devDependencies": { "@types/node": "^12.19.9" }, "contributes": { "resourceLabelFormatters": [{ "scheme": "vscode-remote", "authority": "test+*", "formatting": { "label": "${path}", "separator": "/", "tildify": true, "workspaceSuffix": "TestResolver" } }], "commands": [{ "title": "New Window", "category": "Remote-TestResolver", "command": "vscode-testresolver.newWindow" }, { "title": "Show Log", "category": "Remote-TestResolver", "command": "vscode-testresolver.showLog" }, { "title": "Kill Server and Trigger Handled Error", "category": "Remote-TestResolver", "command": "vscode-testresolver.killServerAndTriggerHandledError" }, { "title": "Open Tunnel...", "category": "Remote-TestResolver", "command": "vscode-testresolver.openTunnel" }, { "title": "Open Remote Server...", "category": "Remote-TestResolver", "command": "vscode-testresolver.startRemoteServer" }], "menus": { "commandPalette": [{ "command": "vscode-testresolver.openTunnel", "when": "remoteName == test" }, { "command": "vscode-testresolver.startRemoteServer", "when": "remoteName == test" }], "statusBar/windowIndicator": [{ "command": "vscode-testresolver.newWindow", "when": "!remoteName", "group": "9_local_testresolver@2" }, { "command": "vscode-testresolver.showLog", "when": "remoteName == test", "group": "1_remote_testresolver_open@3" }, { "command": "vscode-testresolver.newWindow", "when": "remoteName == test", "group": "1_remote_testresolver_open@1" }, { "command": "vscode-testresolver.openTunnel", "when": "remoteName == test", "group": "1_remote_testresolver_open@4" }, { "command": "vscode-testresolver.startRemoteServer", "when": "remoteName == test", "group": "1_remote_testresolver_open@5" }] }, "configuration": { "properties": { "testresolver.startupDelay": { "description": "If set, the resolver will delay for the given amount of seconds. Use ths setting for testing a slow resolver", "type": "number", "default": 0 }, "testresolver.startupError": { "description": "If set, the resolver will fail. Use ths setting for testing the failure of a resolver.", "type": "boolean", "default": false }, "testresolver.pause": { "description": "If set, connection is paused", "type": "boolean", "default": false }, "testresolver.supportPublicPorts": { "description": "If set, the test resolver tunnel factory will support mock public ports. Forwarded ports will not actually be public. Requires reload.", "type": "boolean", "default": false } } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "vscode-test-resolver", "packageNLS": null }, { "packageJSON": { "name": "xml", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "contributes": { "languages": [{ "id": "xml", "extensions": [".xml", ".xsd", ".ascx", ".atom", ".axml", ".bpmn", ".cpt", ".csl", ".csproj", ".csproj.user", ".dita", ".ditamap", ".dtd", ".ent", ".mod", ".dtml", ".fsproj", ".fxml", ".iml", ".isml", ".jmx", ".launch", ".menu", ".mxml", ".nuspec", ".opml", ".owl", ".proj", ".props", ".pt", ".publishsettings", ".pubxml", ".pubxml.user", ".rbxlx", ".rbxmx", ".rdf", ".rng", ".rss", ".shproj", ".storyboard", ".svg", ".targets", ".tld", ".tmx", ".vbproj", ".vbproj.user", ".vcxproj", ".vcxproj.filters", ".wsdl", ".wxi", ".wxl", ".wxs", ".xaml", ".xbl", ".xib", ".xlf", ".xliff", ".xpdl", ".xul", ".xoml"], "firstLine": "(\\<\\?xml.*)|(\\<svg)|(\\<\\!doctype\\s+svg)", "aliases": ["XML", "xml"], "configuration": "./xml.language-configuration.json" }, { "id": "xsl", "extensions": [".xsl", ".xslt"], "aliases": ["XSL", "xsl"], "configuration": "./xsl.language-configuration.json" }], "grammars": [{ "language": "xml", "scopeName": "text.xml", "path": "./syntaxes/xml.tmLanguage.json" }, { "language": "xsl", "scopeName": "text.xml.xsl", "path": "./syntaxes/xsl.tmLanguage.json" }] }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin atom/language-xml grammars/xml.cson ./syntaxes/xml.tmLanguage.json grammars/xsl.cson ./syntaxes/xsl.tmLanguage.json" }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "xml", "packageNLS": { "displayName": "XML Language Basics", "description": "Provides syntax highlighting and bracket matching in XML files." } }, { "packageJSON": { "name": "yaml", "displayName": "%displayName%", "description": "%description%", "version": "1.0.0", "publisher": "vscode", "license": "MIT", "engines": { "vscode": "*" }, "scripts": { "update-grammar": "node ../node_modules/vscode-grammar-updater/bin textmate/yaml.tmbundle Syntaxes/YAML.tmLanguage ./syntaxes/yaml.tmLanguage.json" }, "contributes": { "languages": [{ "id": "yaml", "aliases": ["YAML", "yaml"], "extensions": [".yml", ".eyaml", ".eyml", ".yaml"], "firstLine": "^#cloud-config", "configuration": "./language-configuration.json" }], "grammars": [{ "language": "yaml", "scopeName": "source.yaml", "path": "./syntaxes/yaml.tmLanguage.json" }], "configurationDefaults": { "[yaml]": { "editor.insertSpaces": true, "editor.tabSize": 2, "editor.autoIndent": "advanced" } } }, "repository": { "type": "git", "url": "https://github.com/microsoft/vscode.git" } }, "extensionPath": "yaml", "packageNLS": { "displayName": "YAML Language Basics", "description": "Provides syntax highlighting and bracket matching in YAML files." } }];


/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extensions": () => (/* binding */ extensions)
/* harmony export */ });
var extensions = [{ "packageJSON": { "name": "vscode-web-fs", "displayName": "VS Code Web File System", "description": "File System implementation for VSCode Web", "version": "0.0.1", "publisher": "shd101wyy", "engines": { "vscode": "^1.54.0" }, "categories": ["Other"], "activationEvents": ["onFileSystem:memfs", "onFileSystem:nativefs", "onCommand:memfs.openFolder", "onCommand:nativefs.openFolder"], "main": "./dist/extension.js", "browser": "./dist/extension.js", "contributes": { "commands": [{ "command": "nativefs.openFolder", "title": "Open Folder", "category": "NativeFS" }, { "command": "memfs.openFolder", "title": "Open Folder", "category": "MemFS" }] }, "scripts": { "vscode:prepublish": "yarn run package", "compile": "webpack", "watch": "webpack --watch", "package": "webpack --mode production --devtool hidden-source-map", "test-compile": "tsc -p ./", "test-watch": "tsc -watch -p ./", "pretest": "yarn run test-compile && yarn run lint", "lint": "eslint src --ext ts", "test": "node ./out/test/runTest.js" }, "devDependencies": { "@types/glob": "^7.1.3", "@types/mocha": "^8.0.4", "@types/node": "^12.11.7", "@types/vscode": "^1.55.0", "@types/wicg-file-system-access": "^2020.9.1", "@typescript-eslint/eslint-plugin": "^4.14.1", "@typescript-eslint/parser": "^4.14.1", "eslint": "^7.19.0", "glob": "^7.1.6", "mocha": "^8.2.1", "path-browserify": "^1.0.1", "ts-loader": "^8.0.14", "typescript": "^4.1.3", "vscode-test": "^1.5.0", "webpack": "^5.19.0", "webpack-cli": "^4.4.0" }, "repository": { "url": "git@github.com:0xGG/vscode-web-fs.git" }, "dependencies": { "nanoid": "^3.1.22" } }, "extensionPath": "vscode-web-fs" }];


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "product": () => (/* binding */ product)
/* harmony export */ });
/* harmony import */ var _builtinExtensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _myExtensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var nativeFS = __webpack_require__(1);


// Register service worker
if ("serviceWorker" in navigator) {
    window.addEventListener("load", function () {
        navigator.serviceWorker
            .register("/service-worker.js")
            .then(function (registration) {
            console.log("SW registered: ", registration);
        })
            .catch(function (registrationError) {
            console.log("SW registration failed: ", registrationError);
        });
    });
}
// Display prompt
var handler = function (event) {
    try {
        event.preventDefault();
        event.prompt();
        event.userChoice.then(function (choiceResult) {
            console.log(choiceResult);
            localStorage.removeItem("layoutModel");
        });
    }
    catch (error) {
        console.error(error);
    }
};
window.addEventListener("beforeinstallprompt", handler);
/* return () => {
  window.removeEventListener("beforeinstallprompt", handler);
};
*/
var product = {
    productConfiguration: {
        nameShort: "VSCode PWA",
        nameLong: "VSCode PWA",
        applicationName: "vscode-pwa",
        dataFolderName: ".vscode-pwa-extensions",
        version: "0.0.1",
        date: "2021-04-13",
        portable: true,
        /*
        extensionAllowedProposedApi: [
          "ms-vscode.vscode-js-profile-flame",
          "ms-vscode.vscode-js-profile-table",
          "ms-vscode.github-browser",
        ],
        */
        extensionsGallery: {
            serviceUrl: "https://marketplace.visualstudio.com/_apis/public/gallery",
            cacheUrl: "https://vscode.blob.core.windows.net/gallery/index",
            itemUrl: "https://marketplace.visualstudio.com/items",
            controlUrl: "https://az764295.vo.msecnd.net/extensions/marketplace.json",
            recommendationsUrl: "https://az764295.vo.msecnd.net/extensions/workspaceRecommendations.json.gz",
        },
    },
    folderUri: {
        scheme: "memfs",
        path: "/Welcome",
    },
    settingsSyncOptions: {
        enabled: true,
    },
    commands: [
        {
            id: "browser.testCommand",
            handler: function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    console.log("test command triggered");
                    return [2 /*return*/];
                });
            }); },
        },
    ],
};
nativeFS.registerNativeFS(product);
var extElement = document.getElementById("vscode-workbench-builtin-extensions");
var extensionList = __spreadArray(__spreadArray([], _builtinExtensions__WEBPACK_IMPORTED_MODULE_0__.extensions), _myExtensions__WEBPACK_IMPORTED_MODULE_1__.extensions);
extElement.attributes["data-settings"].value = JSON.stringify(extensionList);

})();

var __webpack_export_target__ = window;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;
//# sourceMappingURL=index.bundle.js.map